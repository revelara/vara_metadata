{
    "code": 0,
    "message": "Success",
    "generated_at": [
        1722678872,
        1722678873,
        1722678874,
        1722678875,
        1722678876,
        1722678878,
        1722678879,
        1722678880,
        1722678881,
        1722678882,
        1722678883,
        1722678884,
        1722678885,
        1722678887,
        1722678888,
        1722678889,
        1722678890,
        1722678891,
        1722678892,
        1722678893,
        1722678894,
        1722678896,
        1722678897,
        1722678898
    ],
    "data": {
        "info": {
            "metadata": [
                {
                    "name": "System",
                    "prefix": "System",
                    "storage": [
                        {
                            "name": "Account",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "frame_system:AccountInfo",
                                    "keys_id": 0,
                                    "value_id": 3
                                }
                            },
                            "fallback": [
                                "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                                "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                            ],
                            "docs": [
                                " The full account information for a particular account ID."
                            ]
                        },
                        {
                            "name": "ExtrinsicCount",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Total extrinsics count for the current block."
                            ]
                        },
                        {
                            "name": "BlockWeight",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": [
                                    "frame_support:dispatch:PerDispatchClass@8",
                                    "frame_support:dispatch:PerDispatchClass@7"
                                ],
                                "PlainTypeValue": [
                                    8,
                                    7
                                ]
                            },
                            "fallback": "0x000000000000",
                            "docs": [
                                " The current weight for the block."
                            ]
                        },
                        {
                            "name": "AllExtrinsicsLen",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Total length (in bytes) for all extrinsics put together, for the current block."
                            ]
                        },
                        {
                            "name": "BlockHash",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "H256",
                                    "keys_id": 4,
                                    "value_id": [
                                        12,
                                        11
                                    ]
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " Map of block numbers to block hashes."
                            ]
                        },
                        {
                            "name": "ExtrinsicData",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": [
                                        13,
                                        12
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                            ]
                        },
                        {
                            "name": "Number",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The current block number being processed. Set by `execute_block`."
                            ]
                        },
                        {
                            "name": "ParentHash",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "H256",
                                "PlainTypeValue": [
                                    12,
                                    11
                                ]
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " Hash of the previous block."
                            ]
                        },
                        {
                            "name": "Digest",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<sp_runtime:generic:digest:DigestItem>",
                                "PlainTypeValue": [
                                    14,
                                    13
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Digest of the current block, also part of the block header."
                            ]
                        },
                        {
                            "name": "Events",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<frame_system:EventRecord>",
                                "PlainTypeValue": [
                                    18,
                                    17
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Events deposited for the current block.",
                                "",
                                " NOTE: The item is unbound and should therefore never be read on chain.",
                                " It could otherwise inflate the PoV size of a block.",
                                "",
                                " Events have a large in-memory size. Box the events to not go out-of-memory",
                                " just in case someone still reads them from within the runtime."
                            ]
                        },
                        {
                            "name": "EventCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The number of events in the `Events<T>` list."
                            ]
                        },
                        {
                            "name": "EventTopics",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": "Vec<Tuple:U32U32>",
                                    "keys_id": [
                                        12,
                                        11
                                    ],
                                    "value_id": [
                                        337,
                                        336,
                                        339,
                                        344,
                                        343,
                                        342,
                                        347,
                                        266,
                                        245,
                                        242
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                                " of events in the `<Events<T>>` list.",
                                "",
                                " All topic vectors have deterministic storage locations depending on the topic. This",
                                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                                " in case of changes fetch the list of events of interest.",
                                "",
                                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                                " the `EventIndex` then in case if the topic has the same contents on the next block",
                                " no notification will be triggered thus the event might be lost.",
                                " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"
                            ]
                        },
                        {
                            "name": "LastRuntimeUpgrade",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "frame_system:LastRuntimeUpgradeInfo",
                                "PlainTypeValue": [
                                    338,
                                    337,
                                    340,
                                    345,
                                    344,
                                    343,
                                    348,
                                    267,
                                    246,
                                    243
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                            ]
                        },
                        {
                            "name": "UpgradedToU32RefCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": [
                                    54,
                                    53,
                                    52
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                            ]
                        },
                        {
                            "name": "UpgradedToTripleRefCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": [
                                    54,
                                    53,
                                    52
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                                " (default) if not."
                            ]
                        },
                        {
                            "name": "ExecutionPhase",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "frame_system:Phase",
                                "PlainTypeValue": [
                                    336,
                                    334,
                                    337,
                                    342,
                                    341,
                                    340,
                                    345,
                                    264,
                                    243,
                                    240
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The execution phase of the block."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0000",
                            "name": "remark",
                            "docs": [
                                "See [`Pallet::remark`].",
                                "Make some on-chain remark.",
                                "",
                                "- `O(1)`",
                                "## Complexity",
                                "# <weight>",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "remark",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "0001",
                            "name": "set_heap_pages",
                            "docs": [
                                "See [`Pallet::set_heap_pages`].",
                                "Set the number of pages in the WebAssembly environment's heap."
                            ],
                            "args": [
                                {
                                    "name": "pages",
                                    "type": "U64",
                                    "type_name": "u64"
                                }
                            ]
                        },
                        {
                            "lookup": "0002",
                            "name": "set_code",
                            "docs": [
                                "See [`Pallet::set_code`].",
                                "Set the new runtime code.",
                                "",
                                "## Complexity",
                                "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                                "# <weight>",
                                "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                                "  expensive).",
                                "- 1 storage write (codec `O(C)`).",
                                "- 1 digest item.",
                                "- 1 event.",
                                "The weight of this function is dependent on the runtime, but generally this is very",
                                "expensive. We will treat this as a full block.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "0003",
                            "name": "set_code_without_checks",
                            "docs": [
                                "See [`Pallet::set_code_without_checks`].",
                                "Set the new runtime code without doing any checks of the given `code`.",
                                "",
                                "## Complexity",
                                "- `O(C)` where `C` length of `code`",
                                "# <weight>",
                                "- 1 storage write (codec `O(C)`).",
                                "- 1 digest item.",
                                "- 1 event.",
                                "The weight of this function is dependent on the runtime. We will treat this as a full",
                                "block. # </weight>"
                            ],
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "0004",
                            "name": "set_storage",
                            "docs": [
                                "See [`Pallet::set_storage`].",
                                "Set some items of storage."
                            ],
                            "args": [
                                {
                                    "name": "items",
                                    "type": "Vec<Tuple:Vec<U8>Vec<U8>>",
                                    "type_name": "Vec<KeyValue>"
                                }
                            ]
                        },
                        {
                            "lookup": "0005",
                            "name": "kill_storage",
                            "docs": [
                                "See [`Pallet::kill_storage`].",
                                "Kill some items from storage."
                            ],
                            "args": [
                                {
                                    "name": "keys",
                                    "type": "Vec<Vec<U8>>",
                                    "type_name": "Vec<Key>"
                                }
                            ]
                        },
                        {
                            "lookup": "0006",
                            "name": "kill_prefix",
                            "docs": [
                                "See [`Pallet::kill_prefix`].",
                                "Kill all storage items with a key that starts with the given prefix.",
                                "",
                                "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                                "the prefix we are removing to accurately calculate the weight of this function."
                            ],
                            "args": [
                                {
                                    "name": "prefix",
                                    "type": "Vec<U8>",
                                    "type_name": "Key"
                                },
                                {
                                    "name": "subkeys",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0007",
                            "name": "remark_with_event",
                            "docs": [
                                "See [`Pallet::remark_with_event`].",
                                "Make some on-chain remark and emit event."
                            ],
                            "args": [
                                {
                                    "name": "remark",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            66,
                            65,
                            64,
                            61
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0000",
                            "name": "ExtrinsicSuccess",
                            "docs": [
                                "An extrinsic completed successfully."
                            ],
                            "args": [
                                "frame_support:dispatch:DispatchInfo"
                            ],
                            "args_name": [
                                "dispatch_info"
                            ],
                            "args_type_name": [
                                "DispatchInfo"
                            ]
                        },
                        {
                            "lookup": "0001",
                            "name": "ExtrinsicFailed",
                            "docs": [
                                "An extrinsic failed."
                            ],
                            "args": [
                                "sp_runtime:DispatchError",
                                "frame_support:dispatch:DispatchInfo"
                            ],
                            "args_name": [
                                "dispatch_error",
                                "dispatch_info"
                            ],
                            "args_type_name": [
                                "DispatchError",
                                "DispatchInfo"
                            ]
                        },
                        {
                            "lookup": "0002",
                            "name": "CodeUpdated",
                            "docs": [
                                "`:code` was updated."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0003",
                            "name": "NewAccount",
                            "docs": [
                                "A new account was created."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "account"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0004",
                            "name": "KilledAccount",
                            "docs": [
                                "An account was reaped."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "account"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0005",
                            "name": "Remarked",
                            "docs": [
                                "On on-chain remark happened."
                            ],
                            "args": [
                                "AccountId",
                                "H256"
                            ],
                            "args_name": [
                                "sender",
                                "hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Hash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            21,
                            20
                        ]
                    },
                    "constants": [
                        {
                            "name": "BlockWeights",
                            "type": "frame_system:limits:BlockWeights",
                            "type_value": [
                                340,
                                339,
                                342,
                                347,
                                346,
                                345,
                                350,
                                269,
                                248,
                                245
                            ],
                            "constants_value": [
                                "025b1f5d00070010a5d4e813ffffffffffffffffc2a0a91d000107d02f9b313313ec51b81e85eb51380107004429353a130000000000000040010000c2a0a91d000107d0fb16d1e113eb51b81e85eb51f801070010a5d4e813ffffffffffffffff010700cc7b9fae13ffffffffffffffbfc2a0a91d00000000",
                                "0203815d00070010a5d4e813ffffffffffffffffc2e9171b000107909d3f323313ec51b81e85eb51380107004429353a130000000000000040010000c2e9171b0001079069bbd1e113eb51b81e85eb51f801070010a5d4e813ffffffffffffffff010700cc7b9fae13ffffffffffffffbfc2e9171b00000000",
                                "624fd75a00070010a5d4e813ffffffffffffffff02c0cd17000107002812333313ec51b81e85eb51380107004429353a13000000000000004001000002c0cd1700010700f48dd2e113eb51b81e85eb51f801070010a5d4e813ffffffffffffffff010700cc7b9fae13ffffffffffffffbf02c0cd1700000000",
                                "624fd75a0007aa0a6e389b13ffffffffffffffff02c0cd17000107aa4a10202213ec51b81e85eb51380107aa821bce2613000000000000004001000002c0cd17000107aad2628a9613eb51b81e85eb51f80107aa0a6e389b13ffffffffffffffff01070088526a7413ffffffffffffffbf02c0cd1700000000"
                            ],
                            "docs": [
                                " Block & extrinsics weights: base values and limits."
                            ]
                        },
                        {
                            "name": "BlockLength",
                            "type": [
                                "frame_support:dispatch:PerDispatchClass@344",
                                "frame_support:dispatch:PerDispatchClass@343",
                                "frame_support:dispatch:PerDispatchClass@346",
                                "frame_support:dispatch:PerDispatchClass@351",
                                "frame_support:dispatch:PerDispatchClass@350",
                                "frame_support:dispatch:PerDispatchClass@349",
                                "frame_support:dispatch:PerDispatchClass@354",
                                "frame_support:dispatch:PerDispatchClass@273",
                                "frame_support:dispatch:PerDispatchClass@252",
                                "frame_support:dispatch:PerDispatchClass@249"
                            ],
                            "type_value": [
                                343,
                                342,
                                345,
                                350,
                                349,
                                348,
                                353,
                                272,
                                251,
                                248
                            ],
                            "constants_value": "000014000000500000005000",
                            "docs": [
                                " The maximum length of a block (in bytes)."
                            ]
                        },
                        {
                            "name": "BlockHashCount",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "60090000",
                            "docs": [
                                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
                            ]
                        },
                        {
                            "name": "DbWeight",
                            "type": "sp_weights:RuntimeDbWeight",
                            "type_value": [
                                345,
                                344,
                                347,
                                352,
                                351,
                                350,
                                355,
                                274,
                                253,
                                250
                            ],
                            "constants_value": "40787d010000000000e1f50500000000",
                            "docs": [
                                " The weight of runtime database operations the runtime can invoke."
                            ]
                        },
                        {
                            "name": "Version",
                            "type": "sp_version:RuntimeVersion",
                            "type_value": [
                                346,
                                345,
                                348,
                                353,
                                352,
                                351,
                                356,
                                275,
                                254,
                                251
                            ],
                            "constants_value": [
                                "10766172611076617261010000008c0500000100000040cbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000f757f704c8ea14fe01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "1076617261107661726101000000820500000100000040cbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000f757f704c8ea14fe01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "1076617261107661726101000000780500000100000040cbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000f757f704c8ea14fe01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "10766172611076617261010000001e0500000100000040cbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000f757f704c8ea14fe01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "1076617261107661726101000000140500000100000040cbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000f757f704c8ea14fe01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "1076617261107661726101000000ba0400000100000040cbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000f757f704c8ea14fe01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "1076617261107661726101000000b00400000100000040cbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000f757f704c8ea14fe01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "107661726110766172610100000056040000010000003ccbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "10766172611076617261010000001a040000010000003ccbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "107661726110766172610100000010040000010000003ccbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "107661726110766172610100000006040000010000003ccbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                                "1076617261107661726101000000fc030000010000003ccbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223020000000100000001",
                                "1076617261107661726101000000f2030000010000003ccbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223020000000100000001",
                                "1076617261107661726101000000e8030000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "10766172611076617261010000005e010000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "107661726110766172610100000054010000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "10766172611076617261010000004a010000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "107661726110766172610100000040010000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "107661726110766172610100000036010000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "1076617261107661726101000000d2000000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "10766172611076617261010000008c000000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "107661726110766172610100000082000000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "107661726110766172610100000078000000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
                                "107661726110766172610100000064000000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001"
                            ],
                            "docs": [
                                " Get the chain's current version."
                            ]
                        },
                        {
                            "name": "SS58Prefix",
                            "type": "U16",
                            "type_value": [
                                63,
                                62,
                                61,
                                58
                            ],
                            "constants_value": "8900",
                            "docs": [
                                " The designated SS58 prefix of this chain.",
                                "",
                                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                                " that the runtime should know about the prefix in order to make use of it as",
                                " an identifier of the chain."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InvalidSpecName",
                            "doc": [
                                "The name of specification does not match between the current runtime",
                                "and the new runtime."
                            ]
                        },
                        {
                            "name": "SpecVersionNeedsToIncrease",
                            "doc": [
                                "The specification version is not allowed to decrease between the current runtime",
                                "and the new runtime."
                            ]
                        },
                        {
                            "name": "FailedToExtractRuntimeVersion",
                            "doc": [
                                "Failed to extract the runtime version from the new runtime.",
                                "",
                                "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                            ]
                        },
                        {
                            "name": "NonDefaultComposite",
                            "doc": [
                                "Suicide called when the account has non-default composite data."
                            ]
                        },
                        {
                            "name": "NonZeroRefCount",
                            "doc": [
                                "There is a non-zero reference count preventing the account from being purged."
                            ]
                        },
                        {
                            "name": "CallFiltered",
                            "doc": [
                                "The origin filter prevent the call to be dispatched."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            350,
                            349,
                            352,
                            357,
                            356,
                            355,
                            360,
                            279,
                            258,
                            255
                        ]
                    },
                    "index": 0
                },
                {
                    "name": "Timestamp",
                    "prefix": "Timestamp",
                    "storage": [
                        {
                            "name": "Now",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    11,
                                    10
                                ]
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The current time for the current block.",
                                " Current time for the current block."
                            ]
                        },
                        {
                            "name": "DidUpdate",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": [
                                    54,
                                    53,
                                    52
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Whether the timestamp has been updated in this block.",
                                "",
                                " This value is updated to `true` upon successful submission of a timestamp by a node.",
                                " It is then checked at the end of each block execution in the `on_finalize` hook.",
                                " Did the timestamp get updated in this block?"
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0100",
                            "name": "set",
                            "docs": [
                                "See [`Pallet::set`].",
                                "Set the current time.",
                                "",
                                "This call should be invoked exactly once per block. It will panic at the finalization",
                                "phase, if this call hasn't been invoked by that time.",
                                "The timestamp should be greater than the previous one by the amount specified by",
                                "`MinimumPeriod`.",
                                "The dispatch origin for this call must be `Inherent`.",
                                "## Complexity",
                                "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                                "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                                "  `on_finalize`)",
                                "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                                "# <weight>",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "now",
                                    "type": "compact<U64>",
                                    "type_name": "Moment"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            70,
                            69,
                            68,
                            65
                        ]
                    },
                    "constants": [
                        {
                            "name": "MinimumPeriod",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "dc05000000000000",
                            "docs": [
                                " The minimum period between blocks.",
                                "",
                                " Be aware that this is different to the *expected* period that the block production",
                                " apparatus provides. Your chosen consensus system will generally work with this to",
                                " determine a sensible block time. For example, in the Aura pallet it will be double this",
                                " period on default settings.",
                                " The minimum period between blocks. Beware that this is different to the *expected*",
                                " period that the block production apparatus provides. Your chosen consensus system will",
                                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                                " double this period on default settings."
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 1
                },
                {
                    "name": "Authorship",
                    "prefix": "Authorship",
                    "storage": [
                        {
                            "name": "Author",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "AccountId",
                                "PlainTypeValue": 0
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Author of current block."
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 2
                },
                {
                    "name": "AuthorityDiscovery",
                    "prefix": "AuthorityDiscovery",
                    "storage": [
                        {
                            "name": "Keys",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": [
                                    "Vec<[U8; 32]>",
                                    "Vec<sp_authority_discovery:app:Public>"
                                ],
                                "PlainTypeValue": [
                                    351,
                                    350,
                                    353,
                                    358,
                                    357,
                                    356,
                                    361,
                                    280,
                                    259,
                                    256
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Keys of the current authority set."
                            ]
                        },
                        {
                            "name": "NextKeys",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": [
                                    "Vec<[U8; 32]>",
                                    "Vec<sp_authority_discovery:app:Public>"
                                ],
                                "PlainTypeValue": [
                                    351,
                                    350,
                                    353,
                                    358,
                                    357,
                                    356,
                                    361,
                                    280,
                                    259,
                                    256
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Keys of the next authority set."
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 9
                },
                {
                    "name": "Babe",
                    "prefix": "Babe",
                    "storage": [
                        {
                            "name": "EpochIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    11,
                                    10
                                ]
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " Current epoch index."
                            ]
                        },
                        {
                            "name": "Authorities",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": [
                                    "Vec<Tuple:[U8; 32]U64>",
                                    "Vec<Tuple:sp_consensus_babe:app:PublicU64>"
                                ],
                                "PlainTypeValue": [
                                    353,
                                    352,
                                    355,
                                    360,
                                    359,
                                    358,
                                    363,
                                    282,
                                    261,
                                    258
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Current epoch authorities."
                            ]
                        },
                        {
                            "name": "GenesisSlot",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    76,
                                    75,
                                    72
                                ]
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The slot at which the first epoch actually started. This is 0",
                                " until the first block of the chain."
                            ]
                        },
                        {
                            "name": "CurrentSlot",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    76,
                                    75,
                                    72
                                ]
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " Current slot number."
                            ]
                        },
                        {
                            "name": "Randomness",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "[U8; 32]",
                                "PlainTypeValue": 1
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " The epoch randomness for the *current* epoch.",
                                "",
                                " # Security",
                                "",
                                " This MUST NOT be used for gambling, as it can be influenced by a",
                                " malicious validator in the short term. It MAY be used in many",
                                " cryptographic protocols, however, so long as one remembers that this",
                                " (like everything else on-chain) it is public. For example, it can be",
                                " used where a number is needed that cannot have been chosen by an",
                                " adversary, for purposes such as public-coin zero-knowledge proofs."
                            ]
                        },
                        {
                            "name": "PendingEpochConfigChange",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "sp_consensus_babe:digests:NextConfigDescriptor",
                                "PlainTypeValue": [
                                    78,
                                    77,
                                    74
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Pending epoch configuration change that will be applied when the next epoch is enacted."
                            ]
                        },
                        {
                            "name": "NextRandomness",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "[U8; 32]",
                                "PlainTypeValue": 1
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " Next epoch randomness."
                            ]
                        },
                        {
                            "name": "NextAuthorities",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": [
                                    "Vec<Tuple:[U8; 32]U64>",
                                    "Vec<Tuple:sp_consensus_babe:app:PublicU64>"
                                ],
                                "PlainTypeValue": [
                                    353,
                                    352,
                                    355,
                                    360,
                                    359,
                                    358,
                                    363,
                                    282,
                                    261,
                                    258
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Next epoch authorities."
                            ]
                        },
                        {
                            "name": "SegmentIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Randomness under construction.",
                                "",
                                " We make a trade-off between storage accesses and list length.",
                                " We store the under-construction randomness in segments of up to",
                                " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                                "",
                                " Once a segment reaches this length, we begin the next one.",
                                " We reset all segments and return to `0` at the beginning of every",
                                " epoch."
                            ]
                        },
                        {
                            "name": "UnderConstruction",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<[U8; 32]>",
                                    "keys_id": 4,
                                    "value_id": [
                                        356,
                                        355,
                                        358,
                                        363,
                                        362,
                                        361,
                                        366,
                                        285,
                                        264,
                                        261
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                            ]
                        },
                        {
                            "name": "Initialized",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "option<sp_consensus_babe:digests:PreDigest>",
                                "PlainTypeValue": [
                                    358,
                                    357,
                                    360,
                                    365,
                                    364,
                                    363,
                                    368,
                                    287,
                                    266,
                                    263
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Temporary value (cleared at block finalization) which is `Some`",
                                " if per-block initialization has already been called for current block."
                            ]
                        },
                        {
                            "name": "AuthorVrfRandomness",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "option<[U8; 32]>",
                                "PlainTypeValue": [
                                    291,
                                    289,
                                    294,
                                    293,
                                    292,
                                    295,
                                    222,
                                    206,
                                    203
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " This field should always be populated during block processing unless",
                                " secondary plain slots are enabled (which don't contain a VRF output).",
                                "",
                                " It is set in `on_finalize`, before it will contain the value from the last block."
                            ]
                        },
                        {
                            "name": "EpochStart",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Tuple:U32U32",
                                "PlainTypeValue": [
                                    137,
                                    136,
                                    141,
                                    140,
                                    138
                                ]
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The block numbers when the last and current epoch have started, respectively `N-1` and",
                                " `N`.",
                                " NOTE: We track this is in order to annotate the block number when a given pool of",
                                " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                                " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                            ]
                        },
                        {
                            "name": "Lateness",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " How late the current block is compared to its parent.",
                                "",
                                " This entry is populated as part of block execution and is cleaned up",
                                " on block finalization. Querying this storage entry outside of block",
                                " execution context should always yield zero."
                            ]
                        },
                        {
                            "name": "EpochConfig",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "sp_consensus_babe:BabeEpochConfiguration",
                                "PlainTypeValue": [
                                    364,
                                    363,
                                    366,
                                    371,
                                    369,
                                    368,
                                    373,
                                    292,
                                    271,
                                    268
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The configuration for the current epoch. Should never be `None` as it is initialized in",
                                " genesis."
                            ]
                        },
                        {
                            "name": "NextEpochConfig",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "sp_consensus_babe:BabeEpochConfiguration",
                                "PlainTypeValue": [
                                    364,
                                    363,
                                    366,
                                    371,
                                    369,
                                    368,
                                    373,
                                    292,
                                    271,
                                    268
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The configuration for the next epoch, `None` if the config will not change",
                                " (you can fallback to `EpochConfig` instead in that case)."
                            ]
                        },
                        {
                            "name": "SkippedEpochs",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:U64U32>",
                                "PlainTypeValue": [
                                    365,
                                    364,
                                    367,
                                    372,
                                    370,
                                    369,
                                    374,
                                    293,
                                    272
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A list of the last 100 skipped epochs and the corresponding session index",
                                " when the epoch was skipped.",
                                "",
                                " This is only used for validating equivocation proofs. An equivocation proof",
                                " must contains a key-ownership proof for a given session, therefore we need a",
                                " way to tie together sessions and epoch indices, i.e. we need to validate that",
                                " a validator was the owner of a given key on a given session, and what the",
                                " active epoch index was during that session."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0300",
                            "name": "report_equivocation",
                            "docs": [
                                "See [`Pallet::report_equivocation`].",
                                "Report authority equivocation/misbehavior. This method will verify",
                                "the equivocation proof and validate the given key ownership proof",
                                "against the extracted offender. If both are valid, the offence will",
                                "be reported."
                            ],
                            "args": [
                                {
                                    "name": "equivocation_proof",
                                    "type": "sp_consensus_slots:EquivocationProof",
                                    "type_name": [
                                        "Box<EquivocationProof<HeaderFor>>",
                                        "Box<EquivocationProof<Header>>"
                                    ]
                                },
                                {
                                    "name": "key_owner_proof",
                                    "type": "sp_session:MembershipProof",
                                    "type_name": "KeyOwnerProof"
                                }
                            ]
                        },
                        {
                            "lookup": "0301",
                            "name": "report_equivocation_unsigned",
                            "docs": [
                                "See [`Pallet::report_equivocation_unsigned`].",
                                "Report authority equivocation/misbehavior. This method will verify",
                                "the equivocation proof and validate the given key ownership proof",
                                "against the extracted offender. If both are valid, the offence will",
                                "be reported.",
                                "This extrinsic must be called unsigned and it is expected that only",
                                "block authors will call it (validated in `ValidateUnsigned`), as such",
                                "if the block author is defined it will be defined as the equivocation",
                                "reporter."
                            ],
                            "args": [
                                {
                                    "name": "equivocation_proof",
                                    "type": "sp_consensus_slots:EquivocationProof",
                                    "type_name": [
                                        "Box<EquivocationProof<HeaderFor>>",
                                        "Box<EquivocationProof<Header>>"
                                    ]
                                },
                                {
                                    "name": "key_owner_proof",
                                    "type": "sp_session:MembershipProof",
                                    "type_name": "KeyOwnerProof"
                                }
                            ]
                        },
                        {
                            "lookup": "0302",
                            "name": "plan_config_change",
                            "docs": [
                                "See [`Pallet::plan_config_change`].",
                                "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                                "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                                "Multiple calls to this method will replace any existing planned config change that had",
                                "not been enacted yet."
                            ],
                            "args": [
                                {
                                    "name": "config",
                                    "type": "sp_consensus_babe:digests:NextConfigDescriptor",
                                    "type_name": "NextConfigDescriptor"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            71,
                            70,
                            69,
                            66
                        ]
                    },
                    "constants": [
                        {
                            "name": "EpochDuration",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "6009000000000000",
                            "docs": [
                                " The amount of time, in slots, that each epoch should last.",
                                " NOTE: Currently it is not possible to change the epoch duration after",
                                " the chain has started. Attempting to do so will brick block production."
                            ]
                        },
                        {
                            "name": "ExpectedBlockTime",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "b80b000000000000",
                            "docs": [
                                " The expected average block time at which BABE should be creating",
                                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                                " what the expected average block time should be based on the slot",
                                " duration and the security parameter `c` (where `1 - c` represents",
                                " the probability of a slot being empty)."
                            ]
                        },
                        {
                            "name": "MaxAuthorities",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": [
                                "a0860100",
                                "20000000"
                            ],
                            "docs": [
                                " Max number of authorities allowed"
                            ]
                        },
                        {
                            "name": "MaxNominators",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00010000",
                            "docs": [
                                " The maximum number of nominators for each validator."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InvalidEquivocationProof",
                            "doc": [
                                "An equivocation proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name": "InvalidKeyOwnershipProof",
                            "doc": [
                                "A key ownership proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name": "DuplicateOffenceReport",
                            "doc": [
                                "A given equivocation report is valid but already previously reported."
                            ]
                        },
                        {
                            "name": "InvalidConfiguration",
                            "doc": [
                                "Submitted configuration is invalid."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            368,
                            367,
                            370,
                            375,
                            373,
                            372,
                            377,
                            296,
                            275,
                            269
                        ]
                    },
                    "index": 3
                },
                {
                    "name": "Grandpa",
                    "prefix": "Grandpa",
                    "storage": [
                        {
                            "name": "State",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_grandpa:StoredState",
                                "PlainTypeValue": [
                                    369,
                                    368,
                                    371,
                                    376,
                                    374,
                                    373,
                                    378,
                                    297,
                                    276,
                                    270
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " State of the current authority set."
                            ]
                        },
                        {
                            "name": "PendingChange",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_grandpa:StoredPendingChange",
                                "PlainTypeValue": [
                                    370,
                                    369,
                                    372,
                                    377,
                                    375,
                                    374,
                                    379,
                                    298,
                                    277,
                                    271
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Pending change: (signaled at, scheduled change)."
                            ]
                        },
                        {
                            "name": "NextForced",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " next block number where we can force a change."
                            ]
                        },
                        {
                            "name": "Stalled",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Tuple:U32U32",
                                "PlainTypeValue": [
                                    137,
                                    136,
                                    141,
                                    140,
                                    138
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " `true` if we are currently stalled."
                            ]
                        },
                        {
                            "name": "CurrentSetId",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    11,
                                    10
                                ]
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The number of changes (both in terms of keys and underlying economic responsibilities)",
                                " in the \"set\" of Grandpa validators from genesis."
                            ]
                        },
                        {
                            "name": "SetIdSession",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U64"
                                    ],
                                    "value": "U32",
                                    "keys_id": [
                                        11,
                                        10
                                    ],
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                                " members were responsible.",
                                "",
                                " This is only used for validating equivocation proofs. An equivocation proof must",
                                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                                " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                                " was the owner of a given key on a given session, and what the active set ID was",
                                " during that session.",
                                "",
                                " TWOX-NOTE: `SetId` is not under user control."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0400",
                            "name": "report_equivocation",
                            "docs": [
                                "See [`Pallet::report_equivocation`].",
                                "Report voter equivocation/misbehavior. This method will verify the",
                                "equivocation proof and validate the given key ownership proof",
                                "against the extracted offender. If both are valid, the offence",
                                "will be reported."
                            ],
                            "args": [
                                {
                                    "name": "equivocation_proof",
                                    "type": [
                                        "sp_consensus_grandpa:EquivocationProof",
                                        "sp_finality_grandpa:EquivocationProof"
                                    ],
                                    "type_name": [
                                        "Box<EquivocationProof<Hash, BlockNumberFor>>",
                                        "Box<EquivocationProof<Hash, BlockNumber>>"
                                    ]
                                },
                                {
                                    "name": "key_owner_proof",
                                    "type": "sp_session:MembershipProof",
                                    "type_name": "KeyOwnerProof"
                                }
                            ]
                        },
                        {
                            "lookup": "0401",
                            "name": "report_equivocation_unsigned",
                            "docs": [
                                "See [`Pallet::report_equivocation_unsigned`].",
                                "Report voter equivocation/misbehavior. This method will verify the",
                                "equivocation proof and validate the given key ownership proof",
                                "against the extracted offender. If both are valid, the offence",
                                "will be reported.",
                                "",
                                "This extrinsic must be called unsigned and it is expected that only",
                                "block authors will call it (validated in `ValidateUnsigned`), as such",
                                "if the block author is defined it will be defined as the equivocation",
                                "reporter."
                            ],
                            "args": [
                                {
                                    "name": "equivocation_proof",
                                    "type": [
                                        "sp_consensus_grandpa:EquivocationProof",
                                        "sp_finality_grandpa:EquivocationProof"
                                    ],
                                    "type_name": [
                                        "Box<EquivocationProof<Hash, BlockNumberFor>>",
                                        "Box<EquivocationProof<Hash, BlockNumber>>"
                                    ]
                                },
                                {
                                    "name": "key_owner_proof",
                                    "type": "sp_session:MembershipProof",
                                    "type_name": "KeyOwnerProof"
                                }
                            ]
                        },
                        {
                            "lookup": "0402",
                            "name": "note_stalled",
                            "docs": [
                                "See [`Pallet::note_stalled`].",
                                "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                                "",
                                "This will trigger a forced authority set change at the beginning of the next session, to",
                                "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                                "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                                "The block production rate (which may be slowed down because of finality lagging) should",
                                "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                                "authority will start voting on top of `best_finalized_block_number` for new finalized",
                                "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                                "block of all validators of the new authority set.",
                                "Only callable by root."
                            ],
                            "args": [
                                {
                                    "name": "delay",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                },
                                {
                                    "name": "best_finalized_block_number",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            81,
                            80,
                            77
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0400",
                            "name": "NewAuthorities",
                            "docs": [
                                "New authority set has been applied."
                            ],
                            "args": [
                                "Vec<Tuple:sp_consensus_grandpa:app:PublicU64>",
                                "Vec<Tuple:sp_finality_grandpa:app:PublicU64>"
                            ],
                            "args_name": [
                                "authority_set"
                            ],
                            "args_type_name": [
                                "AuthorityList"
                            ]
                        },
                        {
                            "lookup": "0401",
                            "name": "Paused",
                            "docs": [
                                "Current authority set has been paused."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0402",
                            "name": "Resumed",
                            "docs": [
                                "Current authority set has been resumed."
                            ],
                            "args": null
                        }
                    ],
                    "events_value": {
                        "type": [
                            30,
                            29
                        ]
                    },
                    "constants": [
                        {
                            "name": "MaxAuthorities",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": [
                                "a0860100",
                                "20000000"
                            ],
                            "docs": [
                                " Max Authorities in use"
                            ]
                        },
                        {
                            "name": "MaxNominators",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00010000",
                            "docs": [
                                " The maximum number of nominators for each validator."
                            ]
                        },
                        {
                            "name": "MaxSetIdSessionEntries",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "5400000000000000",
                            "docs": [
                                " The maximum number of entries to keep in the set id to session index mapping.",
                                "",
                                " Since the `SetIdSession` map is only used for validating equivocations this",
                                " value should relate to the bonding duration of whatever staking system is",
                                " being used (if any). If equivocation handling is not enabled then this value",
                                " can be zero."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "PauseFailed",
                            "doc": [
                                "Attempt to signal GRANDPA pause when the authority set isn't live",
                                "(either paused or already pending pause)."
                            ]
                        },
                        {
                            "name": "ResumeFailed",
                            "doc": [
                                "Attempt to signal GRANDPA resume when the authority set isn't paused",
                                "(either live or already pending resume)."
                            ]
                        },
                        {
                            "name": "ChangePending",
                            "doc": [
                                "Attempt to signal GRANDPA change with one already pending."
                            ]
                        },
                        {
                            "name": "TooSoon",
                            "doc": [
                                "Cannot signal forced change so soon after last."
                            ]
                        },
                        {
                            "name": "InvalidKeyOwnershipProof",
                            "doc": [
                                "A key ownership proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name": "InvalidEquivocationProof",
                            "doc": [
                                "An equivocation proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name": "DuplicateOffenceReport",
                            "doc": [
                                "A given equivocation report is valid but already previously reported."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            372,
                            371,
                            374,
                            379,
                            377,
                            376,
                            381,
                            300,
                            279,
                            273
                        ]
                    },
                    "index": 4
                },
                {
                    "name": "Balances",
                    "prefix": "Balances",
                    "storage": [
                        {
                            "name": "TotalIssuance",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The total units issued in the system."
                            ]
                        },
                        {
                            "name": "InactiveIssuance",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The total units of outstanding deactivated balance in the system."
                            ]
                        },
                        {
                            "name": "Account",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": [
                                        "pallet_balances:types:AccountData",
                                        "pallet_balances:AccountData"
                                    ],
                                    "keys_id": 0,
                                    "value_id": 5
                                }
                            },
                            "fallback": [
                                "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                                "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                            ],
                            "docs": [
                                " The Balances pallet example of storing the balance of an account.",
                                "",
                                " # Example",
                                "",
                                " ```nocompile",
                                "  impl pallet_balances::Config for Runtime {",
                                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                                "  }",
                                " ```",
                                "",
                                " You can also store the balance of an account in the `System` pallet.",
                                "",
                                " # Example",
                                "",
                                " ```nocompile",
                                "  impl pallet_balances::Config for Runtime {",
                                "   type AccountStore = System",
                                "  }",
                                " ```",
                                "",
                                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                                " `frame_system` data alongside the account data contrary to storing account balances in the",
                                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                                " NOTE: This is only used in the case that this pallet is used to store balances."
                            ]
                        },
                        {
                            "name": "Locks",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": [
                                        "Vec<pallet_balances:types:BalanceLock>",
                                        "Vec<pallet_balances:BalanceLock>"
                                    ],
                                    "keys_id": 0,
                                    "value_id": [
                                        373,
                                        372,
                                        375,
                                        380,
                                        378,
                                        377,
                                        382,
                                        301,
                                        280,
                                        274
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Any liquidity locks on some account balances.",
                                " NOTE: Should only be accessed when setting, changing and freeing a lock."
                            ]
                        },
                        {
                            "name": "Reserves",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": [
                                        "Vec<pallet_balances:types:ReserveData>",
                                        "Vec<pallet_balances:ReserveData>"
                                    ],
                                    "keys_id": 0,
                                    "value_id": [
                                        377,
                                        376,
                                        379,
                                        384,
                                        382,
                                        381,
                                        386,
                                        305,
                                        284,
                                        278
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Named reserves on some account balances."
                            ]
                        },
                        {
                            "name": "Holds",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": [
                                        "Vec<pallet_balances:types:IdAmount@381>",
                                        "Vec<pallet_balances:types:IdAmount@380>",
                                        "Vec<pallet_balances:types:IdAmount@383>",
                                        "Vec<pallet_balances:types:IdAmount>"
                                    ],
                                    "keys_id": 0,
                                    "value_id": [
                                        380,
                                        379,
                                        382,
                                        387
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Holds on account balances."
                            ]
                        },
                        {
                            "name": "Freezes",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": [
                                        "Vec<pallet_balances:types:IdAmount@386>",
                                        "Vec<pallet_balances:types:IdAmount@384>",
                                        "Vec<pallet_balances:types:IdAmount@387>",
                                        "Vec<pallet_balances:types:IdAmount>"
                                    ],
                                    "keys_id": 0,
                                    "value_id": [
                                        385,
                                        383,
                                        386,
                                        390
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Freeze locks on account balances."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0500",
                            "name": "transfer_allow_death",
                            "docs": [
                                "See [`Pallet::transfer_allow_death`].",
                                "Transfer some liquid free balance to another account.",
                                "",
                                "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                                "If the sender's account is below the existential deposit as a result",
                                "of the transfer, the account will be reaped.",
                                "The dispatch origin for this call must be `Signed` by the transactor."
                            ],
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0502",
                            "name": "force_transfer",
                            "docs": [
                                "See [`Pallet::force_transfer`].",
                                "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                                "may be specified.",
                                "Exactly as `transfer`, except the origin must be root and the source account may be",
                                "specified.",
                                "## Complexity",
                                "- Same as transfer, but additional read and write because the source account is not",
                                "  assumed to be in the overlay.",
                                "# <weight>",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "source",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "dest",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0503",
                            "name": "transfer_keep_alive",
                            "docs": [
                                "See [`Pallet::transfer_keep_alive`].",
                                "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                                "kill the origin account.",
                                "",
                                "99% of the time you want [`transfer_allow_death`] instead.",
                                "[`transfer_allow_death`]: struct.Pallet.html#method.transfer",
                                "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                                "origin account.",
                                "99% of the time you want [`transfer`] instead.",
                                "[`transfer`]: struct.Pallet.html#method.transfer"
                            ],
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0504",
                            "name": "transfer_all",
                            "docs": [
                                "See [`Pallet::transfer_all`].",
                                "Transfer the entire transferable balance from the caller account.",
                                "",
                                "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                                "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                                "transferred by this function. To ensure that this function results in a killed account,",
                                "you might need to prepare the account by removing any reference counters, storage",
                                "deposits, etc...",
                                "The dispatch origin of this call must be Signed.",
                                "- `dest`: The recipient of the transfer.",
                                "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                                "  of the funds the account has, causing the sender account to be killed (false), or",
                                "  transfer everything except at least the existential deposit, which will guarantee to",
                                "  keep the sender account alive (true).",
                                "  keep the sender account alive (true). ## Complexity",
                                "- O(1). Just like transfer, but reading the user's transferable balance first.",
                                "  keep the sender account alive (true). # <weight>",
                                "  #</weight>"
                            ],
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "0505",
                            "name": "force_unreserve",
                            "docs": [
                                "See [`Pallet::force_unreserve`].",
                                "Unreserve some balance from a user by force.",
                                "",
                                "Can only be called by ROOT."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "amount",
                                    "type": "U128",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0506",
                            "name": "upgrade_accounts",
                            "docs": [
                                "See [`Pallet::upgrade_accounts`].",
                                "Upgrade a specified account.",
                                "",
                                "- `origin`: Must be `Signed`.",
                                "- `who`: The account to be upgraded.",
                                "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                                "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                                "possibililty of churn)."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "0508",
                            "name": "force_set_balance",
                            "docs": [
                                "See [`Pallet::force_set_balance`].",
                                "Set the regular balance of a given account.",
                                "",
                                "The dispatch origin for this call is `root`."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "new_free",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0501",
                            "name": "set_balance_deprecated",
                            "docs": [
                                "See [`Pallet::set_balance_deprecated`].",
                                "Set the regular balance of a given account; it also takes a reserved balance but this",
                                "must be the same as the account's current reserved balance.",
                                "",
                                "The dispatch origin for this call is `root`.",
                                "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "new_free",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                },
                                {
                                    "name": "old_reserved",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": [
                                "0507",
                                "0500"
                            ],
                            "name": "transfer",
                            "docs": [
                                "See [`Pallet::transfer`].",
                                "Alias for `transfer_allow_death`, provided only for name-wise compatibility.",
                                "",
                                "WARNING: DEPRECATED! Will be released in approximately 3 months.",
                                "Transfer some liquid free balance to another account.",
                                "`transfer` will set the `FreeBalance` of the sender and receiver.",
                                "If the sender's account is below the existential deposit as a result",
                                "of the transfer, the account will be reaped.",
                                "The dispatch origin for this call must be `Signed` by the transactor.",
                                "## Complexity",
                                "- Dependent on arguments but not critical, given proper implementations for input config",
                                "  types. See related functions below.",
                                "- It contains a limited number of reads and writes internally and no complex",
                                "  computation.",
                                "Related functions:",
                                "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                                "  - Transferring balances to accounts that did not exist before will cause",
                                "    `T::OnNewAccount::on_new_account` to be called.",
                                "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                                "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                                "    that the transfer will not kill the origin account.",
                                "# <weight>",
                                "---------------------------------",
                                "- Origin account is already in memory, so no DB operations for them.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0501",
                            "name": "set_balance",
                            "docs": [
                                "Set the balances of a given account.",
                                "",
                                "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                                "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                                "If the new free or reserved balance is below the existential deposit,",
                                "it will reset the account nonce (`frame_system::AccountNonce`).",
                                "",
                                "The dispatch origin for this call is `root`."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "new_free",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                },
                                {
                                    "name": "new_reserved",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            93,
                            92,
                            89
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0500",
                            "name": "Endowed",
                            "docs": [
                                "An account was created with some free balance."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "free_balance"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0501",
                            "name": "DustLost",
                            "docs": [
                                "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                                "resulting in an outright loss."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0502",
                            "name": "Transfer",
                            "docs": [
                                "Transfer succeeded."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "from",
                                "to",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0503",
                            "name": "BalanceSet",
                            "docs": [
                                "A balance was set by root."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "free",
                                "reserved"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0504",
                            "name": "Reserved",
                            "docs": [
                                "Some balance was reserved (moved from free to reserved)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0505",
                            "name": "Unreserved",
                            "docs": [
                                "Some balance was unreserved (moved from reserved to free)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0506",
                            "name": "ReserveRepatriated",
                            "docs": [
                                "Some balance was moved from the reserve of the first account to the second account.",
                                "Final argument indicates the destination balance type."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128",
                                "frame_support:traits:tokens:misc:BalanceStatus"
                            ],
                            "args_name": [
                                "from",
                                "to",
                                "amount",
                                "destination_status"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "Balance",
                                "Status"
                            ]
                        },
                        {
                            "lookup": "0507",
                            "name": "Deposit",
                            "docs": [
                                "Some amount was deposited (e.g. for transaction fees)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0508",
                            "name": "Withdraw",
                            "docs": [
                                "Some amount was withdrawn from the account (e.g. for transaction fees)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0509",
                            "name": "Slashed",
                            "docs": [
                                "Some amount was removed from the account (e.g. for misbehavior)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050a",
                            "name": "Minted",
                            "docs": [
                                "Some amount was minted into an account."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050b",
                            "name": "Burned",
                            "docs": [
                                "Some amount was burned from an account."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050c",
                            "name": "Suspended",
                            "docs": [
                                "Some amount was suspended from an account (it can be restored later)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050d",
                            "name": "Restored",
                            "docs": [
                                "Some amount was restored into an account."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050e",
                            "name": "Upgraded",
                            "docs": [
                                "An account was upgraded."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "who"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "050f",
                            "name": "Issued",
                            "docs": [
                                "Total issuance was increased by `amount`, creating a credit to be balanced."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0510",
                            "name": "Rescinded",
                            "docs": [
                                "Total issuance was decreased by `amount`, creating a debt to be balanced."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0511",
                            "name": "Locked",
                            "docs": [
                                "Some balance was locked."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0512",
                            "name": "Unlocked",
                            "docs": [
                                "Some balance was unlocked."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0513",
                            "name": "Frozen",
                            "docs": [
                                "Some balance was frozen."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0514",
                            "name": "Thawed",
                            "docs": [
                                "Some balance was thawed."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            35,
                            34
                        ]
                    },
                    "constants": [
                        {
                            "name": "ExistentialDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "0010a5d4e80000000000000000000000",
                                "00a0724e180900000000000000000000"
                            ],
                            "docs": [
                                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                                "",
                                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                                " In case you have multiple sources of provider references, you may also get unexpected",
                                " behaviour if you set this to zero.",
                                "",
                                " Bottom line: Do yourself a favour and make it at least one!",
                                " The minimum amount required to keep an account open."
                            ]
                        },
                        {
                            "name": "MaxLocks",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "32000000",
                            "docs": [
                                " The maximum number of locks that should exist on an account.",
                                " Not strictly enforced, but used for weight estimation."
                            ]
                        },
                        {
                            "name": "MaxReserves",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": [
                                "32000000",
                                "00000000"
                            ],
                            "docs": [
                                " The maximum number of named reserves that can exist on an account."
                            ]
                        },
                        {
                            "name": "MaxHolds",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "02000000",
                            "docs": [
                                " The maximum number of holds that can exist on an account at any time."
                            ]
                        },
                        {
                            "name": "MaxFreezes",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": [
                                "08000000",
                                "00000000"
                            ],
                            "docs": [
                                " The maximum number of individual freeze locks that can exist on an account at any time."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "VestingBalance",
                            "doc": [
                                "Vesting balance too high to send value.",
                                "Vesting balance too high to send value"
                            ]
                        },
                        {
                            "name": "LiquidityRestrictions",
                            "doc": [
                                "Account liquidity restrictions prevent withdrawal.",
                                "Account liquidity restrictions prevent withdrawal"
                            ]
                        },
                        {
                            "name": "InsufficientBalance",
                            "doc": [
                                "Balance too low to send value."
                            ]
                        },
                        {
                            "name": "ExistentialDeposit",
                            "doc": [
                                "Value too low to create account due to existential deposit.",
                                "Value too low to create account due to existential deposit"
                            ]
                        },
                        {
                            "name": "Expendability",
                            "doc": [
                                "Transfer/payment would kill account."
                            ]
                        },
                        {
                            "name": "ExistingVestingSchedule",
                            "doc": [
                                "A vesting schedule already exists for this account.",
                                "A vesting schedule already exists for this account"
                            ]
                        },
                        {
                            "name": "DeadAccount",
                            "doc": [
                                "Beneficiary account must pre-exist.",
                                "Beneficiary account must pre-exist"
                            ]
                        },
                        {
                            "name": "TooManyReserves",
                            "doc": [
                                "Number of named reserves exceed `MaxReserves`.",
                                "Number of named reserves exceed MaxReserves"
                            ]
                        },
                        {
                            "name": "TooManyHolds",
                            "doc": [
                                "Number of holds exceed `MaxHolds`."
                            ]
                        },
                        {
                            "name": "TooManyFreezes",
                            "doc": [
                                "Number of freezes exceed `MaxFreezes`."
                            ]
                        },
                        {
                            "name": "KeepAlive",
                            "doc": [
                                "Transfer/payment would kill account"
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            390,
                            388,
                            386,
                            389,
                            391,
                            385,
                            384,
                            308,
                            287,
                            281
                        ]
                    },
                    "index": 5
                },
                {
                    "name": "Vesting",
                    "prefix": "Vesting",
                    "storage": [
                        {
                            "name": "Vesting",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Vec<pallet_vesting:vesting_info:VestingInfo>",
                                    "keys_id": 0,
                                    "value_id": [
                                        391,
                                        389,
                                        387,
                                        390,
                                        392,
                                        386,
                                        385,
                                        309,
                                        288,
                                        282
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Information regarding the vesting of a given account."
                            ]
                        },
                        {
                            "name": "StorageVersion",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_vesting:Releases",
                                "PlainTypeValue": [
                                    393,
                                    391,
                                    389,
                                    392,
                                    394,
                                    388,
                                    387,
                                    311,
                                    290,
                                    284
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Storage version of the pallet.",
                                "",
                                " New networks start with latest version, as determined by the genesis build."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0a00",
                            "name": "vest",
                            "docs": [
                                "See [`Pallet::vest`].",
                                "Unlock any vested funds of the sender account.",
                                "",
                                "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                                "locked under this pallet.",
                                "Emits either `VestingCompleted` or `VestingUpdated`.",
                                "## Complexity",
                                "- `O(1)`.",
                                "# <weight>",
                                "- DbWeight: 2 Reads, 2 Writes",
                                "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                                "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                                "# </weight>"
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0a01",
                            "name": "vest_other",
                            "docs": [
                                "See [`Pallet::vest_other`].",
                                "Unlock any vested funds of a `target` account.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                                "locked under this pallet.",
                                "Emits either `VestingCompleted` or `VestingUpdated`.",
                                "## Complexity",
                                "- `O(1)`.",
                                "# <weight>",
                                "- DbWeight: 3 Reads, 3 Writes",
                                "    - Reads: Vesting Storage, Balances Locks, Target Account",
                                "    - Writes: Vesting Storage, Balances Locks, Target Account",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0a02",
                            "name": "vested_transfer",
                            "docs": [
                                "See [`Pallet::vested_transfer`].",
                                "Create a vested transfer.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "- `target`: The account receiving the vested funds.",
                                "- `schedule`: The vesting schedule attached to the transfer.",
                                "Emits `VestingCreated`.",
                                "NOTE: This will unlock all schedules through the current block.",
                                "## Complexity",
                                "- `O(1)`.",
                                "# <weight>",
                                "- DbWeight: 3 Reads, 3 Writes",
                                "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                                "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "schedule",
                                    "type": "pallet_vesting:vesting_info:VestingInfo",
                                    "type_name": [
                                        "VestingInfo<BalanceOf, BlockNumberFor>",
                                        "VestingInfo<BalanceOf, BlockNumber>"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "0a03",
                            "name": "force_vested_transfer",
                            "docs": [
                                "See [`Pallet::force_vested_transfer`].",
                                "Force a vested transfer.",
                                "",
                                "The dispatch origin for this call must be _Root_.",
                                "- `source`: The account whose funds should be transferred.",
                                "- `target`: The account that should be transferred the vested funds.",
                                "- `schedule`: The vesting schedule attached to the transfer.",
                                "Emits `VestingCreated`.",
                                "NOTE: This will unlock all schedules through the current block.",
                                "## Complexity",
                                "- `O(1)`.",
                                "# <weight>",
                                "- DbWeight: 4 Reads, 4 Writes",
                                "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                                "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "source",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "schedule",
                                    "type": "pallet_vesting:vesting_info:VestingInfo",
                                    "type_name": [
                                        "VestingInfo<BalanceOf, BlockNumberFor>",
                                        "VestingInfo<BalanceOf, BlockNumber>"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "0a04",
                            "name": "merge_schedules",
                            "docs": [
                                "See [`Pallet::merge_schedules`].",
                                "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                                "the highest possible start and end blocks. If both schedules have already started the",
                                "current block will be used as the schedule start; with the caveat that if one schedule",
                                "is finished by the current block, the other will be treated as the new merged schedule,",
                                "unmodified.",
                                "",
                                "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                                "NOTE: This will unlock all schedules through the current block prior to merging.",
                                "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                                "and both will be removed.",
                                "Merged schedule attributes:",
                                "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                                "  current_block)`.",
                                "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                                "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                                "The dispatch origin for this call must be _Signed_.",
                                "- `schedule1_index`: index of the first schedule to merge.",
                                "- `schedule2_index`: index of the second schedule to merge."
                            ],
                            "args": [
                                {
                                    "name": "schedule1_index",
                                    "type": "U32",
                                    "type_name": "u32"
                                },
                                {
                                    "name": "schedule2_index",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            98,
                            97,
                            96,
                            94
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0a00",
                            "name": "VestingUpdated",
                            "docs": [
                                "The amount vested has been updated. This could indicate a change in funds available.",
                                "The balance given is the amount which is left unvested (and thus locked)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "unvested"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0a01",
                            "name": "VestingCompleted",
                            "docs": [
                                "An \\[account\\] has become fully vested."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "account"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            37,
                            36
                        ]
                    },
                    "constants": [
                        {
                            "name": "MinVestedTransfer",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00a0724e180900000000000000000000",
                                "00203d88792d00000000000000000000",
                                "0040e59c301200000000000000000000"
                            ],
                            "docs": [
                                " The minimum amount transferred to call `vested_transfer`."
                            ]
                        },
                        {
                            "name": "MaxVestingSchedules",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "1c000000",
                            "docs": null
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotVesting",
                            "doc": [
                                "The account given is not vesting."
                            ]
                        },
                        {
                            "name": "AtMaxVestingSchedules",
                            "doc": [
                                "The account already has `MaxVestingSchedules` count of schedules and thus",
                                "cannot add another one. Consider merging existing schedules in order to add another."
                            ]
                        },
                        {
                            "name": "AmountLow",
                            "doc": [
                                "Amount being transferred is too low to create a vesting schedule."
                            ]
                        },
                        {
                            "name": "ScheduleIndexOutOfBounds",
                            "doc": [
                                "An index was out of bounds of the vesting schedules."
                            ]
                        },
                        {
                            "name": "InvalidScheduleParams",
                            "doc": [
                                "Failed to create a new schedule because some parameter was invalid."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            394,
                            392,
                            390,
                            393,
                            395,
                            389,
                            388,
                            312,
                            291,
                            285
                        ]
                    },
                    "index": 10
                },
                {
                    "name": "TransactionPayment",
                    "prefix": "TransactionPayment",
                    "storage": [
                        {
                            "name": "NextFeeMultiplier",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": [
                                    395,
                                    393,
                                    391,
                                    394,
                                    396,
                                    390,
                                    389,
                                    313,
                                    292,
                                    286
                                ]
                            },
                            "fallback": "0x000064a7b3b6e00d0000000000000000",
                            "docs": null
                        },
                        {
                            "name": "StorageVersion",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_transaction_payment:Releases",
                                "PlainTypeValue": [
                                    396,
                                    394,
                                    392,
                                    395,
                                    397,
                                    391,
                                    390,
                                    314,
                                    293,
                                    287
                                ]
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "events": [
                        {
                            "lookup": "0600",
                            "name": "TransactionFeePaid",
                            "docs": [
                                "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                                "has been paid by `who`."
                            ],
                            "args": [
                                "AccountId",
                                "U128",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "actual_fee",
                                "tip"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf",
                                "BalanceOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            38,
                            37
                        ]
                    },
                    "constants": [
                        {
                            "name": "OperationalFeeMultiplier",
                            "type": "U8",
                            "type_value": 2,
                            "constants_value": "05",
                            "docs": [
                                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                                " `priority`",
                                "",
                                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                                " added to a tip component in regular `priority` calculations.",
                                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                                "",
                                " ```rust,ignore",
                                " // For `Normal`",
                                " let priority = priority_calc(tip);",
                                "",
                                " // For `Operational`",
                                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                                " let priority = priority_calc(tip + virtual_tip);",
                                " ```",
                                "",
                                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                                " sent with the transaction. So, not only does the transaction get a priority bump based",
                                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                                " transactions."
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 6
                },
                {
                    "name": "BagsList",
                    "prefix": "BagsList",
                    "storage": [
                        {
                            "name": "ListNodes",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_bags_list:list:Node",
                                    "keys_id": 0,
                                    "value_id": [
                                        397,
                                        395,
                                        393,
                                        396,
                                        398,
                                        392,
                                        391,
                                        315,
                                        294,
                                        288
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A single node, within some bag.",
                                "",
                                " Nodes store links forward and back within their respective bags."
                            ]
                        },
                        {
                            "name": "CounterForListNodes",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "ListBags",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U64"
                                    ],
                                    "value": "pallet_bags_list:list:Bag",
                                    "keys_id": [
                                        11,
                                        10
                                    ],
                                    "value_id": [
                                        398,
                                        396,
                                        394,
                                        397,
                                        399,
                                        393,
                                        392,
                                        316,
                                        295,
                                        289
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A bag stored in storage.",
                                "",
                                " Stores a `Bag` struct, which stores head and tail pointers to itself."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0b00",
                            "name": "rebag",
                            "docs": [
                                "See [`Pallet::rebag`].",
                                "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                                "changed its score that it should properly fall into a different bag than its current",
                                "one.",
                                "",
                                "Anyone can call this function about any potentially dislocated account.",
                                "Will always update the stored score of `dislocated` to the correct score, based on",
                                "`ScoreProvider`.",
                                "If `dislocated` does not exists, it returns an error."
                            ],
                            "args": [
                                {
                                    "name": "dislocated",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0b01",
                            "name": "put_in_front_of",
                            "docs": [
                                "See [`Pallet::put_in_front_of`].",
                                "Move the caller's Id directly in front of `lighter`.",
                                "",
                                "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
                                "the account going in front of `lighter`.",
                                "Only works if",
                                "- both nodes are within the same bag,",
                                "- and `origin` has a greater `Score` than `lighter`."
                            ],
                            "args": [
                                {
                                    "name": "lighter",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0b02",
                            "name": "put_in_front_of_other",
                            "docs": [
                                "See [`Pallet::put_in_front_of_other`]."
                            ],
                            "args": [
                                {
                                    "name": "heavier",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "lighter",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            100,
                            99,
                            98,
                            96
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0b00",
                            "name": "Rebagged",
                            "docs": [
                                "Moved an account from one bag to another."
                            ],
                            "args": [
                                "AccountId",
                                "U64",
                                "U64"
                            ],
                            "args_name": [
                                "who",
                                "from",
                                "to"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Score",
                                "Score"
                            ]
                        },
                        {
                            "lookup": "0b01",
                            "name": "ScoreUpdated",
                            "docs": [
                                "Updated the score of some account to the given amount."
                            ],
                            "args": [
                                "AccountId",
                                "U64"
                            ],
                            "args_name": [
                                "who",
                                "new_score"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Score"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            39,
                            38
                        ]
                    },
                    "constants": [
                        {
                            "name": "BagThresholds",
                            "type": "Vec<U64>",
                            "type_value": [
                                399,
                                397,
                                395,
                                398,
                                400,
                                394,
                                393,
                                317,
                                296,
                                290
                            ],
                            "constants_value": [
                                "210300a0724e1809000007a1dc61c70900007005739f830a00000df0a0044e0b00008cc4dfa1270c0000d3f8259c110d0000877b712e0d0e0000b6c26fab1b0f00007fbd457f3e100000940e7a317711000083230467c712000067ee82e430140000ef3c9e90b51500000fe1957657170000601d02c9181900008109c9e4fb1a000017ea4c54031d0000c7c4d7d2311f0000daca48508a210000f98d08f50f240000ab514926c6260000b332998ab0290000ae4bcc0ed32c0000a87445eb31300000d4baa4a9d13300007736e32ab73700005578e4ade73b00003e6686d668400000940839b540450000988128cf754a0000232c04270f500000f7b26e461456000053d523488d5c0000fb81e1e282630000fff82275fe6a000025bfbd110a730000f65d718db07b000044327c8dfd84000070ea4897fd8e000099cf4921be990000258b18a54da50000eecef2b2bbb100000a1cae0619bf000028dd3e9e77cd00007628f1d1eadc0000cdc4736e87ed0000a481d8d063ff00001b94af04981201002d8166e43d2701004729163c713d010060d0eeee4f550100ad83741ffa6e0100d907c25a928a0100598d0cc73da801008fc9a65524c80100edc8c6f870ea010041de56dd510f0200f1841fa9f836020024e69dbd9a610200e2fbe07f718f02004111cea5bac0020019a53489b8f5020015872181b22e0300f06fe941f56b030088606c44d3ad030055cc1c35a5f40300e507606bca4004004cb1e869a992040013deb768b0ea040087d87ee955490500922e295719af0500bad965b1831c0600366e1645289206007b9c9c72a510070035fc1083a5980700a62a828ddf2a0800d3db706d18c80800dcb2d4cb2371090072a90e3ce5260a006aa2486e51ea0a00bc9bde786fbc0b00faf78c3a5a9e0c00e7af40d741910d007d178a516d960e00736ed9423caf0f0026e7d5b428dd10008d5f4c1ec921120074f26286d27e1300360cf2d01af61400ec121b379b891600074170ef723b1800d55a4109ea0d1a00b8c1e57e74031c005f6f2683b51e1e0010fc390e8362200002681aafe9d12200f06358a630702500ecc4f24fde402800682f23e2bc472b0056658387df882e00ce9c69dba7083200567ddecfcbcb3500f88b1d055cd73900f2a8299bca303e00c89aa386f2dd42003c57c1721fe54700f8b8023b164d4d0038980c081e1d5300a8e0ee1b0a5d5900b866065b441560007c28a99fd84e6700d4a7dce780136f00b0947b6db26d7700a0996bbaab6880000074d7cb83108a00c05bce583a729400b8093252c99b9f00207582b3379cab0040e2dbbdad83b800987763b88a63c60088d46a537c4ed500c8d5c6cd9758e50010c933fe7497f600b0f82c654b220901801f5a6e11121d01a0ada60b9e81320120c240d7cc8d490140a424eda4556201f0e681b082fa7c01902d36b544a09901f006d4097c6db80140393823a08bd901904393af4627fd01605c0e9c5f70230220e5d99d759a4c02a0c38695f3dc78022080142a6f73a80200392400f99ddb02e0e44df972a11203e024b4efecc74d03e002ae6a08618d03e022c1d263c2d10340cd3eb50d481b044063b0b200556a0480e0eabea853bf0440b82c6672b61a05409026d864f87c05c02b5088c79de605c0e58242d4345806404b97a37656d2060059caf719a7550700de109486d7e207009656d4cfa57a0800d30eff53de1d0900249466cf5ccd0980c0bb3a840d8a0a8087db9878ee540b807c7386cc102f0c8046dea2299a190d809e0a7f4ec6150e805878afb7e8240f000db9d4686e48100013bc01d8df8111007a7115fee2d21200630ecf8e3d3d14002cb9995bd7c21500c6e545e4bc651700367f24192228190051763a52650c1b007fc88a7f12151d00f6ebc196e6441f001631e042d39e21004681d9da02262400d66a80a4dcdd26005c1f796909ca29002a795f6478ee2c007ed9c18c644f30008a5b12495af13300f01c398e3dd9370094f20575500c3c006c905e4e3a90400044c9b03f0f6b4500e0fde77158a34a001011eadd1c4050000c4974c2ea485600b48b14d0e1c55c00b48df018bebf6300c42614d3e33f6b0034691bfd6b5073004cd73df631fc7b00d8b6071ce24e8500d0cc6e8109558f00a8916ad4261c9a00e830cf88bcb2a500b888e0606428b200582ce96de48dbf0030a31ba545f5cd0068632427ec71dd00883b1c5bb118eeffffffffffffffff",
                                "240a0000000000000014000000000000001e00000000000000280000000000000032000000000000003c00000000000000e803000000000000d0070000000000001027000000000000"
                            ],
                            "docs": [
                                " The list of thresholds separating the various bags.",
                                "",
                                " Ids are separated into unsorted bags according to their score. This specifies the",
                                " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
                                " is less than or equal to its upper threshold.",
                                "",
                                " When ids are iterated, higher bags are iterated completely before lower bags. This means",
                                " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
                                " score, but peer ids within a particular bag are sorted in insertion order.",
                                "",
                                " # Expressing the constant",
                                "",
                                " This constant must be sorted in strictly increasing order. Duplicate items are not",
                                " permitted.",
                                "",
                                " There is an implied upper limit of `Score::MAX`; that value does not need to be",
                                " specified within the bag. For any two threshold lists, if one ends with",
                                " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
                                " lists will behave identically.",
                                "",
                                " # Calculation",
                                "",
                                " It is recommended to generate the set of thresholds in a geometric series, such that",
                                " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
                                " constant_ratio).max(threshold[k] + 1)` for all `k`.",
                                "",
                                " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
                                "",
                                " # Examples",
                                "",
                                " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
                                "   iteration is strictly in insertion order.",
                                " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
                                "   the procedure given above, then the constant ratio is equal to 2.",
                                " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
                                "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
                                " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
                                "   into bag 0, an id with score 2 will fall into bag 1, etc.",
                                "",
                                " # Migration",
                                "",
                                " In the event that this list ever changes, a copy of the old bags list must be retained.",
                                " With that `List::migrate` can be called, which will perform the appropriate migration."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "List",
                            "doc": [
                                "A error in the list interface implementation."
                            ],
                            "fields": [
                                {
                                    "type": "pallet_bags_list:list:ListError",
                                    "type_name": "ListError",
                                    "doc": null
                                }
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            400,
                            398,
                            396,
                            399,
                            401,
                            395,
                            394,
                            318,
                            297,
                            291
                        ]
                    },
                    "index": 11
                },
                {
                    "name": "ImOnline",
                    "prefix": "ImOnline",
                    "storage": [
                        {
                            "name": "HeartbeatAfter",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The block number after which it's ok to send heartbeats in the current",
                                " session.",
                                "",
                                " At the beginning of each session we set this to a value that should fall",
                                " roughly in the middle of the session duration. The idea is to first wait for",
                                " the validators to produce a block in the current session, so that the",
                                " heartbeat later on will not be necessary.",
                                "",
                                " This value will only be used as a fallback if we fail to get a proper session",
                                " progress estimate from `NextSessionRotation`, as those estimates should be",
                                " more accurate then the value we calculate for `HeartbeatAfter`."
                            ]
                        },
                        {
                            "name": "Keys",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": [
                                    "Vec<[U8; 32]>",
                                    "Vec<pallet_im_online:sr25519:app_sr25519:Public>"
                                ],
                                "PlainTypeValue": [
                                    402,
                                    400,
                                    398,
                                    401,
                                    403,
                                    397,
                                    396,
                                    320,
                                    299,
                                    293
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The current set of keys that may issue a heartbeat."
                            ]
                        },
                        {
                            "name": "ReceivedHeartbeats",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "U32"
                                    ],
                                    "value": [
                                        "Bool",
                                        "WrapperOpaque<pallet_im_online:BoundedOpaqueNetworkState>"
                                    ],
                                    "keys_id": [
                                        137,
                                        136,
                                        141,
                                        140,
                                        138
                                    ],
                                    "value_id": [
                                        54,
                                        53,
                                        405,
                                        399,
                                        398,
                                        403,
                                        322,
                                        301,
                                        295
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex`.",
                                " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                                " `WrapperOpaque<BoundedOpaqueNetworkState>`."
                            ]
                        },
                        {
                            "name": "AuthoredBlocks",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "U32",
                                    "keys_id": [
                                        404,
                                        402,
                                        400,
                                        403,
                                        410,
                                        408,
                                        327,
                                        306,
                                        300
                                    ],
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                                " number of blocks authored by the given authority."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0c00",
                            "name": "heartbeat",
                            "docs": [
                                "See [`Pallet::heartbeat`].",
                                "## Complexity:",
                                "- `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is length of",
                                "  `heartbeat.network_state.external_address`",
                                "  - `O(K)`: decoding of length `K`",
                                "  - `O(E)`: decoding/encoding of length `E`",
                                "# <weight>",
                                "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is",
                                "  length of `heartbeat.network_state.external_address`",
                                "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                                "  `ReceivedHeartbeats`",
                                "- DbWrites: `ReceivedHeartbeats`",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "heartbeat",
                                    "type": "pallet_im_online:Heartbeat",
                                    "type_name": [
                                        "Heartbeat<BlockNumberFor>",
                                        "Heartbeat<BlockNumber>"
                                    ]
                                },
                                {
                                    "name": "signature",
                                    "type": "[U8; 64]",
                                    "type_name": "<AuthorityId as RuntimeAppPublic>::Signature"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            101,
                            100,
                            99,
                            97
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0c00",
                            "name": "HeartbeatReceived",
                            "docs": [
                                "A new heartbeat was received from `AuthorityId`."
                            ],
                            "args": [
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "authority_id"
                            ],
                            "args_type_name": [
                                "AuthorityId"
                            ]
                        },
                        {
                            "lookup": "0c01",
                            "name": "AllGood",
                            "docs": [
                                "At the end of the session, no offence was committed."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0c02",
                            "name": "SomeOffline",
                            "docs": [
                                "At the end of the session, at least one validator was found to be offline."
                            ],
                            "args": [
                                "Vec<Tuple:AccountIdpallet_staking:Exposure>"
                            ],
                            "args_name": [
                                "offline"
                            ],
                            "args_type_name": [
                                "Vec<IdentificationTuple>"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            40,
                            39
                        ]
                    },
                    "constants": [
                        {
                            "name": "UnsignedPriority",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "ffffffffffffffff",
                            "docs": [
                                " A configuration for base priority of unsigned transactions.",
                                "",
                                " This is exposed so that it can be tuned for particular runtime, when",
                                " multiple pallets send unsigned transactions."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InvalidKey",
                            "doc": [
                                "Non existent public key."
                            ]
                        },
                        {
                            "name": "DuplicatedHeartbeat",
                            "doc": [
                                "Duplicated heartbeat."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            405,
                            403,
                            401,
                            404,
                            411,
                            409,
                            328,
                            307,
                            301
                        ]
                    },
                    "index": 12
                },
                {
                    "name": "Staking",
                    "prefix": "Staking",
                    "storage": [
                        {
                            "name": "ValidatorCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The ideal number of active validators."
                            ]
                        },
                        {
                            "name": "MinimumValidatorCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Minimum number of staking participants before emergency conditions are imposed."
                            ]
                        },
                        {
                            "name": "Invulnerables",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<AccountId>",
                                "PlainTypeValue": [
                                    97,
                                    96,
                                    111,
                                    109
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                                " easy to initialize and the performance hit is minimal (we expect no more than four",
                                " invulnerables) and restricted to testnets."
                            ]
                        },
                        {
                            "name": "Bonded",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "AccountId",
                                    "keys_id": 0,
                                    "value_id": 0
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Map from all locked \"stash\" accounts to the controller account.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                            ]
                        },
                        {
                            "name": "MinNominatorBond",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The minimum active bond to become and maintain the role of a nominator."
                            ]
                        },
                        {
                            "name": "MinValidatorBond",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The minimum active bond to become and maintain the role of a validator."
                            ]
                        },
                        {
                            "name": "MinimumActiveStake",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The minimum active nominator stake of the last successful election."
                            ]
                        },
                        {
                            "name": "MinCommission",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": [
                                    51,
                                    50,
                                    49
                                ]
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The minimum amount of commission that validators can set.",
                                "",
                                " If set to `0`, no limit exists."
                            ]
                        },
                        {
                            "name": "Ledger",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:StakingLedger",
                                    "keys_id": 0,
                                    "value_id": [
                                        406,
                                        404,
                                        402,
                                        405,
                                        412,
                                        410,
                                        329,
                                        308,
                                        302
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Map from all (unlocked) \"controller\" accounts to the info regarding the staking.",
                                "",
                                " Note: All the reads and mutations to this storage *MUST* be done through the methods exposed",
                                " by [`StakingLedger`] to ensure data and lock consistency."
                            ]
                        },
                        {
                            "name": "Payee",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:RewardDestination",
                                    "keys_id": 0,
                                    "value_id": [
                                        50,
                                        105,
                                        110,
                                        108,
                                        106
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Where the reward payment should be made. Keyed by stash.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                            ]
                        },
                        {
                            "name": "Validators",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:ValidatorPrefs",
                                    "keys_id": 0,
                                    "value_id": [
                                        52,
                                        51,
                                        50
                                    ]
                                }
                            },
                            "fallback": "0x0000",
                            "docs": [
                                " The map from (wannabe) validator stash key to the preferences of that validator.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                            ]
                        },
                        {
                            "name": "CounterForValidators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "MaxValidatorsCount",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The maximum validator count before we stop allowing new validators to join.",
                                "",
                                " When this value is not set, no limits are enforced."
                            ]
                        },
                        {
                            "name": "Nominators",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:Nominations",
                                    "keys_id": 0,
                                    "value_id": [
                                        411,
                                        409,
                                        407,
                                        410,
                                        417,
                                        415,
                                        334,
                                        313,
                                        307
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The map from nominator stash key to their nomination preferences, namely the validators that",
                                " they wish to support.",
                                "",
                                " Note that the keys of this storage map might become non-decodable in case the",
                                " account's [`NominationsQuota::MaxNominations`] configuration is decreased.",
                                " In this rare case, these nominators",
                                " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                                " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                                " nominators will effectively not-exist, until they re-submit their preferences such that it",
                                " is within the bounds of the newly set `Config::MaxNominations`.",
                                "",
                                " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                                " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                                " number of keys that exist.",
                                "",
                                " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                                " [`Call::chill_other`] dispatchable by anyone.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash.",
                                " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators"
                            ]
                        },
                        {
                            "name": "CounterForNominators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "MaxNominatorsCount",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The maximum nominator count before we stop allowing new validators to join.",
                                "",
                                " When this value is not set, no limits are enforced."
                            ]
                        },
                        {
                            "name": "CurrentEra",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The current era index.",
                                "",
                                " This is the latest planned era, depending on how the Session pallet queues the validator",
                                " set, it might be active or not."
                            ]
                        },
                        {
                            "name": "ActiveEra",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_staking:ActiveEraInfo",
                                "PlainTypeValue": [
                                    413,
                                    411,
                                    409,
                                    412,
                                    419,
                                    417,
                                    336,
                                    315,
                                    309
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The active era information, it holds index and start.",
                                "",
                                " The active era is the era being currently rewarded. Validator set of this era must be",
                                " equal to [`SessionInterface::validators`]."
                            ]
                        },
                        {
                            "name": "ErasStartSessionIndex",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U32",
                                    "keys_id": 4,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                                "",
                                " Note: This tracks the starting session (i.e. session index when era start being active)",
                                " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                            ]
                        },
                        {
                            "name": "ErasStakers",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:Exposure",
                                    "keys_id": [
                                        404,
                                        402,
                                        400,
                                        403,
                                        410,
                                        408,
                                        327,
                                        306,
                                        300
                                    ],
                                    "value_id": [
                                        45,
                                        44
                                    ]
                                }
                            },
                            "fallback": "0x000000",
                            "docs": [
                                " Exposure of validator at era.",
                                "",
                                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                                "",
                                " Is it removed after `HISTORY_DEPTH` eras.",
                                " If stakers hasn't been set or has been removed then empty exposure is returned."
                            ]
                        },
                        {
                            "name": "ErasStakersClipped",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:Exposure",
                                    "keys_id": [
                                        404,
                                        402,
                                        400,
                                        403,
                                        410,
                                        408,
                                        327,
                                        306,
                                        300
                                    ],
                                    "value_id": [
                                        45,
                                        44
                                    ]
                                }
                            },
                            "fallback": "0x000000",
                            "docs": [
                                " Clipped Exposure of validator at era.",
                                "",
                                " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                                " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                                " (Note: the field `total` and `own` of the exposure remains unchanged).",
                                " This is used to limit the i/o cost for the nominator payout.",
                                "",
                                " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                                "",
                                " Is it removed after `HISTORY_DEPTH` eras.",
                                " If stakers hasn't been set or has been removed then empty exposure is returned."
                            ]
                        },
                        {
                            "name": "ErasValidatorPrefs",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:ValidatorPrefs",
                                    "keys_id": [
                                        404,
                                        402,
                                        400,
                                        403,
                                        410,
                                        408,
                                        327,
                                        306,
                                        300
                                    ],
                                    "value_id": [
                                        52,
                                        51,
                                        50
                                    ]
                                }
                            },
                            "fallback": "0x0000",
                            "docs": [
                                " Similar to `ErasStakers`, this holds the preferences of validators.",
                                "",
                                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                                "",
                                " Is it removed after `HISTORY_DEPTH` eras."
                            ]
                        },
                        {
                            "name": "ErasValidatorReward",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U128",
                                    "keys_id": 4,
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                                "",
                                " Eras that haven't finished yet or has been removed doesn't have reward."
                            ]
                        },
                        {
                            "name": "ErasRewardPoints",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_staking:EraRewardPoints",
                                    "keys_id": 4,
                                    "value_id": [
                                        414,
                                        412,
                                        410,
                                        413,
                                        420,
                                        418,
                                        338,
                                        317,
                                        311
                                    ]
                                }
                            },
                            "fallback": "0x0000000000",
                            "docs": [
                                " Rewards for the last `HISTORY_DEPTH` eras.",
                                " If reward hasn't been set or has been removed then 0 reward is returned."
                            ]
                        },
                        {
                            "name": "ErasTotalStake",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U128",
                                    "keys_id": 4,
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The total amount staked for the last `HISTORY_DEPTH` eras.",
                                " If total hasn't been set or has been removed then 0 stake is returned."
                            ]
                        },
                        {
                            "name": "ForceEra",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_staking:Forcing",
                                "PlainTypeValue": [
                                    55,
                                    54,
                                    53
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Mode of era forcing."
                            ]
                        },
                        {
                            "name": "SlashRewardFraction",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": [
                                    51,
                                    50,
                                    49
                                ]
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The percentage of the slash that is distributed to reporters.",
                                "",
                                " The rest of the slashed value is handled by the `Slash`."
                            ]
                        },
                        {
                            "name": "CanceledSlashPayout",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The amount of currency given to reporters of a slash event which was",
                                " canceled by extraordinary circumstances (e.g. governance)."
                            ]
                        },
                        {
                            "name": "UnappliedSlashes",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<pallet_staking:UnappliedSlash>",
                                    "keys_id": 4,
                                    "value_id": [
                                        418,
                                        416,
                                        414,
                                        417,
                                        424,
                                        422,
                                        342,
                                        321,
                                        315
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " All unapplied slashes that are queued for later."
                            ]
                        },
                        {
                            "name": "BondedEras",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:U32U32>",
                                "PlainTypeValue": [
                                    337,
                                    336,
                                    339,
                                    344,
                                    343,
                                    342,
                                    347,
                                    266,
                                    245,
                                    242
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A mapping from still-bonded eras to the first session index of that era.",
                                "",
                                " Must contains information for eras for the range:",
                                " `[active_era - bounding_duration; active_era]`"
                            ]
                        },
                        {
                            "name": "ValidatorSlashInEra",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "Tuple:U32U128",
                                    "keys_id": [
                                        404,
                                        402,
                                        400,
                                        403,
                                        410,
                                        408,
                                        327,
                                        306,
                                        300
                                    ],
                                    "value_id": [
                                        420,
                                        418,
                                        416,
                                        419,
                                        426,
                                        424,
                                        346,
                                        325,
                                        319
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " All slashing events on validators, mapped by era to the highest slash proportion",
                                " and slash value of the era."
                            ]
                        },
                        {
                            "name": "NominatorSlashInEra",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "U128",
                                    "keys_id": [
                                        404,
                                        402,
                                        400,
                                        403,
                                        410,
                                        408,
                                        327,
                                        306,
                                        300
                                    ],
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " All slashing events on nominators, mapped by era to the highest slash value of the era."
                            ]
                        },
                        {
                            "name": "SlashingSpans",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:slashing:SlashingSpans",
                                    "keys_id": 0,
                                    "value_id": [
                                        421,
                                        419,
                                        417,
                                        420,
                                        427,
                                        425,
                                        347,
                                        326,
                                        320
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Slashing spans for stash accounts."
                            ]
                        },
                        {
                            "name": "SpanSlash",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "U32"
                                    ],
                                    "value": "pallet_staking:slashing:SpanRecord",
                                    "keys_id": [
                                        417,
                                        415,
                                        413,
                                        416,
                                        423,
                                        421,
                                        341,
                                        320,
                                        314
                                    ],
                                    "value_id": [
                                        422,
                                        420,
                                        418,
                                        421,
                                        428,
                                        426,
                                        348,
                                        327,
                                        321
                                    ]
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " Records information about the maximum slash of a stash within a slashing span,",
                                " as well as how much reward has been paid out."
                            ]
                        },
                        {
                            "name": "CurrentPlannedSession",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The last planned session scheduled by the session pallet.",
                                "",
                                " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                            ]
                        },
                        {
                            "name": "OffendingValidators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:U32Bool>",
                                "PlainTypeValue": [
                                    423,
                                    421,
                                    419,
                                    422,
                                    429,
                                    427,
                                    349,
                                    328,
                                    322
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Indices of validators that have offended in the active era and whether they are currently",
                                " disabled.",
                                "",
                                " This value should be a superset of disabled validators since not all offences lead to the",
                                " validator being disabled (if there was no slash). This is needed to track the percentage of",
                                " validators that have offended in the current era, ensuring a new era is forced if",
                                " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                                " whether a given validator has previously offended using binary search. It gets cleared when",
                                " the era ends."
                            ]
                        },
                        {
                            "name": "ChillThreshold",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U8",
                                "PlainTypeValue": [
                                    107,
                                    112,
                                    110,
                                    108
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The threshold for when users can start calling `chill_other` for other validators /",
                                " nominators. The threshold is compared to the actual number of validators / nominators",
                                " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0d00",
                            "name": "bond",
                            "docs": [
                                "See [`Pallet::bond`].",
                                "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                                "be the account that controls it.",
                                "",
                                "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                                "The dispatch origin for this call must be _Signed_ by the stash account.",
                                "Emits `Bonded`.",
                                "## Complexity",
                                "- Independent of the arguments. Moderate complexity.",
                                "- O(1).",
                                "- Three extra DB entries.",
                                "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                                "unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                                "# <weight>",
                                "------------------",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "payee",
                                    "type": "pallet_staking:RewardDestination",
                                    "type_name": "RewardDestination<AccountId>"
                                },
                                {
                                    "name": "controller",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0d01",
                            "name": "bond_extra",
                            "docs": [
                                "See [`Pallet::bond_extra`].",
                                "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                                "for staking.",
                                "",
                                "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                                "Use this if there are additional funds in your stash account that you wish to bond.",
                                "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                                "any limitation on the amount that can be added.",
                                "Emits `Bonded`.",
                                "## Complexity",
                                "- Independent of the arguments. Insignificant complexity.",
                                "- O(1).",
                                "# <weight>",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "max_additional",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0d02",
                            "name": "unbond",
                            "docs": [
                                "See [`Pallet::unbond`].",
                                "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                                "period ends. If this leaves an amount actively bonded less than",
                                "T::Currency::minimum_balance(), then it is increased to the full amount.",
                                "",
                                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                                "the funds out of management ready for transfer.",
                                "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
                                "can co-exists at the same time. If there are no unlocking chunks slots available",
                                "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).",
                                "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                                "they should call `chill` first in order to free up their bonded funds.",
                                "Emits `Unbonded`.",
                                "See also [`Call::withdraw_unbonded`]."
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0d03",
                            "name": "withdraw_unbonded",
                            "docs": [
                                "See [`Pallet::withdraw_unbonded`].",
                                "Remove any unlocked chunks from the `unlocking` queue from our management.",
                                "",
                                "This essentially frees up that balance to be used by the stash account to do",
                                "whatever it wants.",
                                "The dispatch origin for this call must be _Signed_ by the controller.",
                                "Emits `Withdrawn`.",
                                "See also [`Call::unbond`].",
                                "## Complexity",
                                "O(S) where S is the number of slashing spans to remove",
                                "NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                                "# <weight>",
                                "Complexity O(S) where S is the number of slashing spans to remove",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d04",
                            "name": "validate",
                            "docs": [
                                "See [`Pallet::validate`].",
                                "Declare the desire to validate for the origin controller.",
                                "",
                                "Effects will be felt at the beginning of the next era.",
                                "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                            ],
                            "args": [
                                {
                                    "name": "prefs",
                                    "type": "pallet_staking:ValidatorPrefs",
                                    "type_name": "ValidatorPrefs"
                                }
                            ]
                        },
                        {
                            "lookup": "0d05",
                            "name": "nominate",
                            "docs": [
                                "See [`Pallet::nominate`].",
                                "Declare the desire to nominate `targets` for the origin controller.",
                                "",
                                "Effects will be felt at the beginning of the next era.",
                                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                "## Complexity",
                                "- The transaction's complexity is proportional to the size of `targets` (N)",
                                "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
                                "- Both the reads and writes follow a similar pattern.",
                                "# <weight>",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "targets",
                                    "type": "Vec<sp_runtime:multiaddress:MultiAddress>",
                                    "type_name": "Vec<AccountIdLookupOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d06",
                            "name": "chill",
                            "docs": [
                                "See [`Pallet::chill`].",
                                "Declare no desire to either validate or nominate.",
                                "",
                                "Effects will be felt at the beginning of the next era.",
                                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                "## Complexity",
                                "- Independent of the arguments. Insignificant complexity.",
                                "- Contains one read.",
                                "- Writes are limited to the `origin` account key.",
                                "# <weight>",
                                "# </weight>"
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d07",
                            "name": "set_payee",
                            "docs": [
                                "See [`Pallet::set_payee`].",
                                "(Re-)set the payment target for a controller.",
                                "",
                                "Effects will be felt instantly (as soon as this function is completed successfully).",
                                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                "## Complexity",
                                "- O(1)",
                                "- Independent of the arguments. Insignificant complexity.",
                                "- Contains a limited number of reads.",
                                "- Writes are limited to the `origin` account key.",
                                "---------",
                                "# <weight>",
                                "- Weight: O(1)",
                                "- DB Weight:",
                                "    - Read: Ledger",
                                "    - Write: Payee",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "payee",
                                    "type": "pallet_staking:RewardDestination",
                                    "type_name": "RewardDestination<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d08",
                            "name": "set_controller",
                            "docs": [
                                "See [`Pallet::set_controller`].",
                                "(Re-)sets the controller of a stash to the stash itself. This function previously",
                                "accepted a `controller` argument to set the controller to an account other than the",
                                "stash itself. This functionality has now been removed, now only setting the controller",
                                "to the stash, if it is not already.",
                                "",
                                "Effects will be felt instantly (as soon as this function is completed successfully).",
                                "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                                "## Complexity",
                                "O(1)",
                                "- Independent of the arguments. Insignificant complexity.",
                                "- Contains a limited number of reads.",
                                "- Writes are limited to the `origin` account key.",
                                "(Re-)set the controller of a stash.",
                                "# <weight>",
                                "----------",
                                "Weight: O(1)",
                                "DB Weight:",
                                "- Read: Bonded, Ledger New Controller, Ledger Old Controller",
                                "- Write: Bonded, Ledger New Controller, Ledger Old Controller",
                                "# </weight>"
                            ],
                            "args": [
                                null,
                                [
                                    {
                                        "name": "controller",
                                        "type": "sp_runtime:multiaddress:MultiAddress",
                                        "type_name": "AccountIdLookupOf"
                                    }
                                ],
                                {
                                    "name": "controller",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0d09",
                            "name": "set_validator_count",
                            "docs": [
                                "See [`Pallet::set_validator_count`].",
                                "Sets the ideal number of validators.",
                                "",
                                "The dispatch origin must be Root.",
                                "## Complexity",
                                "O(1)",
                                "# <weight>",
                                "Weight: O(1)",
                                "Write: Validator Count",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "new",
                                    "type": "compact<U32>",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d0a",
                            "name": "increase_validator_count",
                            "docs": [
                                "See [`Pallet::increase_validator_count`].",
                                "Increments the ideal number of validators upto maximum of",
                                "`ElectionProviderBase::MaxWinners`.",
                                "",
                                "The dispatch origin must be Root.",
                                "## Complexity",
                                "Same as [`Self::set_validator_count`].",
                                "# <weight>",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "additional",
                                    "type": "compact<U32>",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d0b",
                            "name": "scale_validator_count",
                            "docs": [
                                "See [`Pallet::scale_validator_count`].",
                                "Scale up the ideal number of validators by a factor upto maximum of",
                                "`ElectionProviderBase::MaxWinners`.",
                                "",
                                "The dispatch origin must be Root.",
                                "## Complexity",
                                "Same as [`Self::set_validator_count`].",
                                "# <weight>",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "factor",
                                    "type": "U8",
                                    "type_name": "Percent"
                                }
                            ]
                        },
                        {
                            "lookup": "0d0c",
                            "name": "force_no_eras",
                            "docs": [
                                "See [`Pallet::force_no_eras`].",
                                "Force there to be no new eras indefinitely.",
                                "",
                                "The dispatch origin must be Root.",
                                "# Warning",
                                "The election process starts multiple blocks before the end of the era.",
                                "Thus the election process may be ongoing when this is called. In this case the",
                                "election will continue until the next era is triggered.",
                                "## Complexity",
                                "- No arguments.",
                                "- Weight: O(1)",
                                "# <weight>",
                                "- Write: ForceEra",
                                "# </weight>"
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d0d",
                            "name": "force_new_era",
                            "docs": [
                                "See [`Pallet::force_new_era`].",
                                "Force there to be a new era at the end of the next session. After this, it will be",
                                "reset to normal (non-forced) behaviour.",
                                "",
                                "The dispatch origin must be Root.",
                                "# Warning",
                                "The election process starts multiple blocks before the end of the era.",
                                "If this is called just before a new era is triggered, the election process may not",
                                "have enough blocks to get a result.",
                                "## Complexity",
                                "- No arguments.",
                                "- Weight: O(1)",
                                "# <weight>",
                                "- Write ForceEra",
                                "# </weight>"
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d0e",
                            "name": "set_invulnerables",
                            "docs": [
                                "See [`Pallet::set_invulnerables`].",
                                "Set the validators who cannot be slashed (if any).",
                                "",
                                "The dispatch origin must be Root."
                            ],
                            "args": [
                                {
                                    "name": "invulnerables",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d0f",
                            "name": "force_unstake",
                            "docs": [
                                "See [`Pallet::force_unstake`].",
                                "Force a current staker to become completely unstaked, immediately.",
                                "",
                                "The dispatch origin must be Root."
                            ],
                            "args": [
                                {
                                    "name": "stash",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d10",
                            "name": "force_new_era_always",
                            "docs": [
                                "See [`Pallet::force_new_era_always`].",
                                "Force there to be a new era at the end of sessions indefinitely.",
                                "",
                                "The dispatch origin must be Root.",
                                "# Warning",
                                "The election process starts multiple blocks before the end of the era.",
                                "If this is called just before a new era is triggered, the election process may not",
                                "have enough blocks to get a result."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d11",
                            "name": "cancel_deferred_slash",
                            "docs": [
                                "See [`Pallet::cancel_deferred_slash`].",
                                "Cancel enactment of a deferred slash.",
                                "",
                                "Can be called by the `T::AdminOrigin`.",
                                "Parameters: era and indices of the slashes for that era to kill."
                            ],
                            "args": [
                                {
                                    "name": "era",
                                    "type": "U32",
                                    "type_name": "EraIndex"
                                },
                                {
                                    "name": "slash_indices",
                                    "type": "Vec<U32>",
                                    "type_name": "Vec<u32>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d12",
                            "name": "payout_stakers",
                            "docs": [
                                "See [`Pallet::payout_stakers`].",
                                "Pay out all the stakers behind a single validator for a single era.",
                                "",
                                "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                                "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                                "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                                "The origin of this call must be _Signed_. Any account can call this function, even if",
                                "it is not one of the stakers.",
                                "## Complexity",
                                "- At most O(MaxNominatorRewardedPerValidator).",
                                "# <weight>",
                                "- Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                                "- Contains a limited number of reads and writes.",
                                "-----------",
                                "N is the Number of payouts for the validator (including the validator)",
                                "Weight:",
                                "- Reward Destination Staked: O(N)",
                                "- Reward Destination Controller (Creating): O(N)",
                                "  NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                                "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "validator_stash",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "era",
                                    "type": "U32",
                                    "type_name": "EraIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "0d13",
                            "name": "rebond",
                            "docs": [
                                "See [`Pallet::rebond`].",
                                "Rebond a portion of the stash scheduled to be unlocked.",
                                "",
                                "The dispatch origin must be signed by the controller.",
                                "## Complexity",
                                "- Time complexity: O(L), where L is unlocking chunks",
                                "- Bounded by `MaxUnlockingChunks`.",
                                "# <weight>",
                                "- Storage changes: Can't increase storage, only decrease it.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0d14",
                            "name": "reap_stash",
                            "docs": [
                                "See [`Pallet::reap_stash`].",
                                "Remove all data structures concerning a staker/stash once it is at a state where it can",
                                "be considered `dust` in the staking system. The requirements are:",
                                "",
                                "1. the `total_balance` of the stash is below existential deposit.",
                                "2. or, the `ledger.total` of the stash is below existential deposit.",
                                "The former can happen in cases like a slash; the latter when a fully unbonded account",
                                "is still receiving staking rewards in `RewardDestination::Staked`.",
                                "It can be called by anyone, as long as `stash` meets the above requirements.",
                                "Refunds the transaction fees upon successful execution."
                            ],
                            "args": [
                                {
                                    "name": "stash",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d15",
                            "name": "kick",
                            "docs": [
                                "See [`Pallet::kick`].",
                                "Remove the given nominations from the calling validator.",
                                "",
                                "Effects will be felt at the beginning of the next era.",
                                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                "- `who`: A list of nominator stash accounts who are nominating this validator which",
                                "  should no longer be nominating this validator.",
                                "Note: Making this call only makes sense if you first set the validator preferences to",
                                "block any further nominations."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "Vec<sp_runtime:multiaddress:MultiAddress>",
                                    "type_name": "Vec<AccountIdLookupOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d16",
                            "name": "set_staking_configs",
                            "docs": [
                                "See [`Pallet::set_staking_configs`].",
                                "Update the various staking configurations .",
                                "",
                                "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                                "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                                "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                                "  set to `None`, no limit is enforced.",
                                "* `max_validator_count`: The max number of users who can be a validator at once. When",
                                "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
                                "  should be filled in order for the `chill_other` transaction to work.",
                                "* `min_commission`: The minimum amount of commission that each validators must maintain.",
                                "  This is checked only upon calling `validate`. Existing validators are not affected.",
                                "RuntimeOrigin must be Root to call this function.",
                                "NOTE: Existing nominators and validators will not be affected by this update.",
                                "to kick people under the new limits, `chill_other` should be called."
                            ],
                            "args": [
                                {
                                    "name": "min_nominator_bond",
                                    "type": [
                                        "pallet_staking:pallet:pallet:ConfigOp@109",
                                        "pallet_staking:pallet:pallet:ConfigOp@114",
                                        "pallet_staking:pallet:pallet:ConfigOp@113",
                                        "pallet_staking:pallet:pallet:ConfigOp@111"
                                    ],
                                    "type_name": "ConfigOp<BalanceOf>"
                                },
                                {
                                    "name": "min_validator_bond",
                                    "type": [
                                        "pallet_staking:pallet:pallet:ConfigOp@109",
                                        "pallet_staking:pallet:pallet:ConfigOp@114",
                                        "pallet_staking:pallet:pallet:ConfigOp@113",
                                        "pallet_staking:pallet:pallet:ConfigOp@111"
                                    ],
                                    "type_name": "ConfigOp<BalanceOf>"
                                },
                                {
                                    "name": "max_nominator_count",
                                    "type": [
                                        "pallet_staking:pallet:pallet:ConfigOp@110",
                                        "pallet_staking:pallet:pallet:ConfigOp@115",
                                        "pallet_staking:pallet:pallet:ConfigOp@114",
                                        "pallet_staking:pallet:pallet:ConfigOp@112"
                                    ],
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "max_validator_count",
                                    "type": [
                                        "pallet_staking:pallet:pallet:ConfigOp@110",
                                        "pallet_staking:pallet:pallet:ConfigOp@115",
                                        "pallet_staking:pallet:pallet:ConfigOp@114",
                                        "pallet_staking:pallet:pallet:ConfigOp@112"
                                    ],
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "chill_threshold",
                                    "type": [
                                        "pallet_staking:pallet:pallet:ConfigOp@111",
                                        "pallet_staking:pallet:pallet:ConfigOp@116",
                                        "pallet_staking:pallet:pallet:ConfigOp@115",
                                        "pallet_staking:pallet:pallet:ConfigOp@113"
                                    ],
                                    "type_name": "ConfigOp<Percent>"
                                },
                                {
                                    "name": "min_commission",
                                    "type": [
                                        "pallet_staking:pallet:pallet:ConfigOp@112",
                                        "pallet_staking:pallet:pallet:ConfigOp@117",
                                        "pallet_staking:pallet:pallet:ConfigOp@116",
                                        "pallet_staking:pallet:pallet:ConfigOp@114"
                                    ],
                                    "type_name": "ConfigOp<Perbill>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d17",
                            "name": "chill_other",
                            "docs": [
                                "See [`Pallet::chill_other`].",
                                "Declare a `controller` to stop participating as either a validator or nominator.",
                                "",
                                "Effects will be felt at the beginning of the next era.",
                                "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                                "If the caller is the same as the controller being targeted, then no further checks are",
                                "enforced, and this function behaves just like `chill`.",
                                "If the caller is different than the controller being targeted, the following conditions",
                                "must be met:",
                                "* `controller` must belong to a nominator who has become non-decodable,",
                                "Or:",
                                "* A `ChillThreshold` must be set and checked which defines how close to the max",
                                "  nominators or validators we must reach before users can start chilling one-another.",
                                "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                                "  how close we are to the threshold.",
                                "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                                "  if this is a person that should be chilled because they have not met the threshold",
                                "  bond required.",
                                "This can be helpful if bond requirements are updated, and we need to remove old users",
                                "who do not satisfy these requirements."
                            ],
                            "args": [
                                {
                                    "name": "controller",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                }
                            ]
                        },
                        {
                            "lookup": "0d18",
                            "name": "force_apply_min_commission",
                            "docs": [
                                "See [`Pallet::force_apply_min_commission`].",
                                "Force a validator to have at least the minimum commission. This will not affect a",
                                "validator who already has a commission greater than or equal to the minimum. Any account",
                                "can call this."
                            ],
                            "args": [
                                {
                                    "name": "validator_stash",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                }
                            ]
                        },
                        {
                            "lookup": "0d19",
                            "name": "set_min_commission",
                            "docs": [
                                "See [`Pallet::set_min_commission`].",
                                "Sets the minimum amount of commission that each validators must maintain.",
                                "",
                                "This call has lower privilege requirements than `set_staking_config` and can be called",
                                "by the `T::AdminOrigin`. Root can always call this."
                            ],
                            "args": [
                                {
                                    "name": "new",
                                    "type": "U32",
                                    "type_name": "Perbill"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            105,
                            104,
                            109,
                            107
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0d00",
                            "name": "EraPaid",
                            "docs": [
                                "The era payout has been set; the first balance is the validator-payout; the second is",
                                "the remainder from the maximum amount of reward."
                            ],
                            "args": [
                                "U32",
                                "U128",
                                "U128"
                            ],
                            "args_name": [
                                "era_index",
                                "validator_payout",
                                "remainder"
                            ],
                            "args_type_name": [
                                "EraIndex",
                                "BalanceOf",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d01",
                            "name": "Rewarded",
                            "docs": [
                                "The nominator has been rewarded by this amount to this destination.",
                                "The nominator has been rewarded by this amount."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_staking:RewardDestination",
                                "U128"
                            ],
                            "args_name": [
                                "stash",
                                "dest",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "RewardDestination<AccountId>",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d02",
                            "name": "Slashed",
                            "docs": [
                                "A staker (validator or nominator) has been slashed by the given amount."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "staker",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d03",
                            "name": "SlashReported",
                            "docs": [
                                "A slash for the given validator, for the given percentage of their stake, at the given",
                                "era as been reported."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "validator",
                                "fraction",
                                "slash_era"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Perbill",
                                "EraIndex"
                            ]
                        },
                        {
                            "lookup": "0d04",
                            "name": "OldSlashingReportDiscarded",
                            "docs": [
                                "An old slashing report from a prior era was discarded because it could",
                                "not be processed."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "session_index"
                            ],
                            "args_type_name": [
                                "SessionIndex"
                            ]
                        },
                        {
                            "lookup": "0d05",
                            "name": "StakersElected",
                            "docs": [
                                "A new set of stakers was elected."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d06",
                            "name": "Bonded",
                            "docs": [
                                "An account has bonded this amount. \\[stash, amount\\]",
                                "",
                                "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                                "it will not be emitted for staking rewards when they are added to stake."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "stash",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d07",
                            "name": "Unbonded",
                            "docs": [
                                "An account has unbonded this amount."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "stash",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d08",
                            "name": "Withdrawn",
                            "docs": [
                                "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                                "from the unlocking queue."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "stash",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d09",
                            "name": "Kicked",
                            "docs": [
                                "A nominator has been kicked from a validator."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId"
                            ],
                            "args_name": [
                                "nominator",
                                "stash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0d0a",
                            "name": "StakingElectionFailed",
                            "docs": [
                                "The election failed. No new era is planned."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d0b",
                            "name": "Chilled",
                            "docs": [
                                "An account has stopped participating as either a validator or nominator."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "stash"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0d0c",
                            "name": "PayoutStarted",
                            "docs": [
                                "The stakers' rewards are getting paid."
                            ],
                            "args": [
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "era_index",
                                "validator_stash"
                            ],
                            "args_type_name": [
                                "EraIndex",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0d0d",
                            "name": "ValidatorPrefsSet",
                            "docs": [
                                "A validator has set their preferences."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_staking:ValidatorPrefs"
                            ],
                            "args_name": [
                                "stash",
                                "prefs"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "ValidatorPrefs"
                            ]
                        },
                        {
                            "lookup": "0d0e",
                            "name": "SnapshotVotersSizeExceeded",
                            "docs": [
                                "Voters size limit reached."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "size"
                            ],
                            "args_type_name": [
                                "u32"
                            ]
                        },
                        {
                            "lookup": "0d0f",
                            "name": "SnapshotTargetsSizeExceeded",
                            "docs": [
                                "Targets size limit reached."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "size"
                            ],
                            "args_type_name": [
                                "u32"
                            ]
                        },
                        {
                            "lookup": [
                                "0d10",
                                "0d0e"
                            ],
                            "name": "ForceEra",
                            "docs": [
                                "A new force era mode was set."
                            ],
                            "args": [
                                "pallet_staking:Forcing"
                            ],
                            "args_name": [
                                "mode"
                            ],
                            "args_type_name": [
                                "Forcing"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            49,
                            48
                        ]
                    },
                    "constants": [
                        {
                            "name": "HistoryDepth",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "54000000",
                            "docs": [
                                " Number of eras to keep in history.",
                                "",
                                " Following information is kept for eras in `[current_era -",
                                " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
                                " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
                                " `ErasTotalStake`, `ErasStartSessionIndex`,",
                                " `StakingLedger.claimed_rewards`.",
                                "",
                                " Must be more than the number of eras delayed by session.",
                                " I.e. active era must always be in history. I.e. `active_era >",
                                " current_era - history_depth` must be guaranteed.",
                                "",
                                " If migrating an existing pallet from storage value to config value,",
                                " this should be set to same value or greater as in storage.",
                                "",
                                " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
                                " item `StakingLedger.claimed_rewards`. Setting this value lower than",
                                " the existing value can lead to inconsistencies in the",
                                " `StakingLedger` and will need to be handled properly in a migration.",
                                " The test `reducing_history_depth_abrupt` shows this effect."
                            ]
                        },
                        {
                            "name": "SessionsPerEra",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "06000000",
                            "docs": [
                                " Number of sessions per era."
                            ]
                        },
                        {
                            "name": "BondingDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "0e000000",
                            "docs": [
                                " Number of eras that staked funds must remain bonded for."
                            ]
                        },
                        {
                            "name": "SlashDeferDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "0d000000",
                            "docs": [
                                " Number of eras that slashes are deferred by, after computation.",
                                "",
                                " This should be less than the bonding duration. Set to 0 if slashes",
                                " should be applied immediately, without opportunity for intervention."
                            ]
                        },
                        {
                            "name": "MaxNominatorRewardedPerValidator",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00010000",
                            "docs": [
                                " The maximum number of nominators rewarded for each validator.",
                                "",
                                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                                " claim their reward. This used to limit the i/o cost for the nominator payout."
                            ]
                        },
                        {
                            "name": "MaxUnlockingChunks",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "20000000",
                            "docs": [
                                " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
                                " have. Effectively determines how many unique eras a staker may be",
                                " unbonding in.",
                                "",
                                " Note: `MaxUnlockingChunks` is used as the upper bound for the",
                                " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
                                " lower than the existing value can lead to inconsistencies in the",
                                " `StakingLedger` and will need to be handled properly in a runtime",
                                " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
                                " this effect."
                            ]
                        },
                        {
                            "name": "MaxNominations",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "10000000",
                            "docs": [
                                " Maximum number of nominations per nominator."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotController",
                            "doc": [
                                "Not a controller account."
                            ]
                        },
                        {
                            "name": "NotStash",
                            "doc": [
                                "Not a stash account."
                            ]
                        },
                        {
                            "name": "AlreadyBonded",
                            "doc": [
                                "Stash is already bonded."
                            ]
                        },
                        {
                            "name": "AlreadyPaired",
                            "doc": [
                                "Controller is already paired."
                            ]
                        },
                        {
                            "name": "EmptyTargets",
                            "doc": [
                                "Targets cannot be empty."
                            ]
                        },
                        {
                            "name": "DuplicateIndex",
                            "doc": [
                                "Duplicate index."
                            ]
                        },
                        {
                            "name": "InvalidSlashIndex",
                            "doc": [
                                "Slash record index out of bounds."
                            ]
                        },
                        {
                            "name": "InsufficientBond",
                            "doc": [
                                "Cannot have a validator or nominator role, with value less than the minimum defined by",
                                "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                                "intention, `chill` first to remove one's role as validator/nominator."
                            ]
                        },
                        {
                            "name": "NoMoreChunks",
                            "doc": [
                                "Can not schedule more unlock chunks."
                            ]
                        },
                        {
                            "name": "NoUnlockChunk",
                            "doc": [
                                "Can not rebond without unlocking chunks."
                            ]
                        },
                        {
                            "name": "FundedTarget",
                            "doc": [
                                "Attempting to target a stash that still has funds."
                            ]
                        },
                        {
                            "name": "InvalidEraToReward",
                            "doc": [
                                "Invalid era to reward."
                            ]
                        },
                        {
                            "name": "InvalidNumberOfNominations",
                            "doc": [
                                "Invalid number of nominations."
                            ]
                        },
                        {
                            "name": "NotSortedAndUnique",
                            "doc": [
                                "Items are not sorted and unique."
                            ]
                        },
                        {
                            "name": "AlreadyClaimed",
                            "doc": [
                                "Rewards for this era have already been claimed for this validator."
                            ]
                        },
                        {
                            "name": "IncorrectHistoryDepth",
                            "doc": [
                                "Incorrect previous history depth input provided."
                            ]
                        },
                        {
                            "name": "IncorrectSlashingSpans",
                            "doc": [
                                "Incorrect number of slashing spans provided."
                            ]
                        },
                        {
                            "name": "BadState",
                            "doc": [
                                "Internal state has become somehow corrupted and the operation cannot continue."
                            ]
                        },
                        {
                            "name": "TooManyTargets",
                            "doc": [
                                "Too many nomination targets supplied."
                            ]
                        },
                        {
                            "name": "BadTarget",
                            "doc": [
                                "A nomination target was supplied that was blocked or otherwise not a validator."
                            ]
                        },
                        {
                            "name": "CannotChillOther",
                            "doc": [
                                "The user has enough bond and thus cannot be chilled forcefully by an external person."
                            ]
                        },
                        {
                            "name": "TooManyNominators",
                            "doc": [
                                "There are too many nominators in the system. Governance needs to adjust the staking",
                                "settings to keep things safe for the runtime."
                            ]
                        },
                        {
                            "name": "TooManyValidators",
                            "doc": [
                                "There are too many validator candidates in the system. Governance needs to adjust the",
                                "staking settings to keep things safe for the runtime."
                            ]
                        },
                        {
                            "name": "CommissionTooLow",
                            "doc": [
                                "Commission is too low. Must be at least `MinCommission`."
                            ]
                        },
                        {
                            "name": "BoundNotMet",
                            "doc": [
                                "Some bound is not met."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            425,
                            423,
                            421,
                            424,
                            431,
                            429,
                            351,
                            330,
                            324
                        ]
                    },
                    "index": 13
                },
                {
                    "name": "Session",
                    "prefix": "Session",
                    "storage": [
                        {
                            "name": "Validators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<AccountId>",
                                "PlainTypeValue": [
                                    97,
                                    96,
                                    111,
                                    109
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The current set of validators."
                            ]
                        },
                        {
                            "name": "CurrentIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Current index of the session."
                            ]
                        },
                        {
                            "name": "QueuedChanged",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": [
                                    54,
                                    53,
                                    52
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " True if the underlying economic identities or weighting behind the validators",
                                " has changed in the queued validator set."
                            ]
                        },
                        {
                            "name": "QueuedKeys",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:AccountIdvara_runtime:SessionKeys>",
                                "PlainTypeValue": [
                                    426,
                                    424,
                                    422,
                                    425,
                                    432,
                                    430,
                                    352,
                                    331,
                                    325
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The queued keys for the next session. When the next session begins, these keys",
                                " will be used to determine the validator's session keys."
                            ]
                        },
                        {
                            "name": "DisabledValidators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<U32>",
                                "PlainTypeValue": [
                                    108,
                                    113,
                                    112,
                                    110
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Indices of disabled validators.",
                                "",
                                " The vec is always kept sorted so that we can find whether a given validator is",
                                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                                " a new set of identities."
                            ]
                        },
                        {
                            "name": "NextKeys",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "vara_runtime:SessionKeys",
                                    "keys_id": 0,
                                    "value_id": [
                                        114,
                                        119,
                                        118,
                                        116
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The next session keys for a validator."
                            ]
                        },
                        {
                            "name": "KeyOwner",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "[U8; 4]",
                                        "Vec<U8>"
                                    ],
                                    "value": "AccountId",
                                    "keys_id": [
                                        428,
                                        426,
                                        424,
                                        427,
                                        434,
                                        432,
                                        354,
                                        333,
                                        327
                                    ],
                                    "value_id": 0
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0700",
                            "name": "set_keys",
                            "docs": [
                                "See [`Pallet::set_keys`].",
                                "Sets the session key(s) of the function caller to `keys`.",
                                "Allows an account to set its session key prior to becoming a validator.",
                                "This doesn't take effect until the next session.",
                                "",
                                "The dispatch origin of this function must be signed.",
                                "## Complexity",
                                "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                                "  fixed.",
                                "# <weight>",
                                "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                                "  `T::Keys::key_ids()` which is fixed.",
                                "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                                "- DbWrites: `origin account`, `NextKeys`",
                                "- DbReads per key id: `KeyOwner`",
                                "- DbWrites per key id: `KeyOwner`",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "keys",
                                    "type": "vara_runtime:SessionKeys",
                                    "type_name": "Keys"
                                },
                                {
                                    "name": "proof",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "0701",
                            "name": "purge_keys",
                            "docs": [
                                "See [`Pallet::purge_keys`].",
                                "Removes any session key(s) of the function caller.",
                                "",
                                "This doesn't take effect until the next session.",
                                "The dispatch origin of this function must be Signed and the account must be either be",
                                "convertible to a validator ID using the chain's typical addressing system (this usually",
                                "means being a controller account) or directly convertible into a validator ID (which",
                                "usually means being a stash account).",
                                "## Complexity",
                                "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                                "  `T::Keys::key_ids()` which is fixed.",
                                "# <weight>",
                                "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                                "  of `T::Keys::key_ids()` which is fixed.",
                                "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                                "- DbWrites: `NextKeys`, `origin account`",
                                "- DbWrites per key id: `KeyOwner`",
                                "# </weight>"
                            ],
                            "args": null
                        }
                    ],
                    "calls_value": {
                        "type": [
                            113,
                            118,
                            117,
                            115
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0700",
                            "name": "NewSession",
                            "docs": [
                                "New session has happened. Note that the argument is the session index, not the",
                                "block number as the type might suggest."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "session_index"
                            ],
                            "args_type_name": [
                                "SessionIndex"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            56,
                            55,
                            54
                        ]
                    },
                    "errors": [
                        {
                            "name": "InvalidProof",
                            "doc": [
                                "Invalid ownership proof."
                            ]
                        },
                        {
                            "name": "NoAssociatedValidatorId",
                            "doc": [
                                "No associated validator ID for account."
                            ]
                        },
                        {
                            "name": "DuplicatedKey",
                            "doc": [
                                "Registered duplicate key."
                            ]
                        },
                        {
                            "name": "NoKeys",
                            "doc": [
                                "No keys are associated with this account."
                            ]
                        },
                        {
                            "name": "NoAccount",
                            "doc": [
                                "Key setting account is not live, so it's impossible to associate keys."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            430,
                            428,
                            426,
                            429,
                            436,
                            434,
                            356,
                            335,
                            329
                        ]
                    },
                    "index": 7
                },
                {
                    "name": "Treasury",
                    "prefix": "Treasury",
                    "storage": [
                        {
                            "name": "ProposalCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Number of proposals that have been made."
                            ]
                        },
                        {
                            "name": "Proposals",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_treasury:Proposal",
                                    "keys_id": 4,
                                    "value_id": [
                                        431,
                                        429,
                                        427,
                                        430,
                                        437,
                                        435,
                                        357,
                                        336,
                                        330
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Proposals that have been made."
                            ]
                        },
                        {
                            "name": "Deactivated",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The amount which has been reported as inactive to Currency."
                            ]
                        },
                        {
                            "name": "Approvals",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<U32>",
                                "PlainTypeValue": [
                                    432,
                                    430,
                                    428,
                                    431,
                                    438,
                                    436,
                                    358,
                                    337,
                                    331
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Proposal indices that have been approved but not yet awarded."
                            ]
                        },
                        {
                            "name": "SpendCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The count of spends that have been made."
                            ]
                        },
                        {
                            "name": "Spends",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_treasury:SpendStatus",
                                    "keys_id": 4,
                                    "value_id": 433
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Spends that have been approved and being processed."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0e00",
                            "name": "propose_spend",
                            "docs": [
                                "See [`Pallet::propose_spend`].",
                                "Put forward a suggestion for spending. A deposit proportional to the value",
                                "is reserved and slashed if the proposal is rejected. It is returned once the",
                                "proposal is awarded.",
                                "",
                                "## Complexity",
                                "- O(1)",
                                "# <weight>",
                                "- Complexity: O(1)",
                                "- DbReads: `ProposalCount`, `origin account`",
                                "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "beneficiary",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0e01",
                            "name": "reject_proposal",
                            "docs": [
                                "See [`Pallet::reject_proposal`].",
                                "Reject a proposed spend. The original deposit will be slashed.",
                                "",
                                "May only be called from `T::RejectOrigin`.",
                                "## Complexity",
                                "- O(1)",
                                "# <weight>",
                                "- Complexity: O(1)",
                                "- DbReads: `Proposals`, `rejected proposer account`",
                                "- DbWrites: `Proposals`, `rejected proposer account`",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "proposal_id",
                                    "type": "compact<U32>",
                                    "type_name": "ProposalIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "0e02",
                            "name": "approve_proposal",
                            "docs": [
                                "See [`Pallet::approve_proposal`].",
                                "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                                "and the original deposit will be returned.",
                                "",
                                "May only be called from `T::ApproveOrigin`.",
                                "## Complexity",
                                " - O(1).",
                                "# <weight>",
                                "- Complexity: O(1).",
                                "- DbReads: `Proposals`, `Approvals`",
                                "- DbWrite: `Approvals`",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "proposal_id",
                                    "type": "compact<U32>",
                                    "type_name": "ProposalIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "0e03",
                            "name": "spend_local",
                            "docs": [
                                "See [`Pallet::spend_local`]."
                            ],
                            "args": [
                                {
                                    "name": "amount",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "beneficiary",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0e04",
                            "name": "remove_approval",
                            "docs": [
                                "See [`Pallet::remove_approval`].",
                                "Force a previously approved proposal to be removed from the approval queue.",
                                "The original deposit will no longer be returned.",
                                "",
                                "May only be called from `T::RejectOrigin`.",
                                "- `proposal_id`: The index of a proposal",
                                "## Complexity",
                                "- O(A) where `A` is the number of approvals",
                                "Errors:",
                                "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                                "i.e., the proposal has not been approved. This could also mean the proposal does not",
                                "exist altogether, thus there is no way it would have been approved in the first place.",
                                "# <weight>",
                                "- Complexity: O(A) where `A` is the number of approvals",
                                "- Db reads and writes: `Approvals`",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "proposal_id",
                                    "type": "compact<U32>",
                                    "type_name": "ProposalIndex"
                                }
                            ]
                        },
                        {
                            "lookup": [
                                "0e05",
                                "0e03"
                            ],
                            "name": "spend",
                            "docs": [
                                "See [`Pallet::spend`].",
                                "Propose and approve a spend of treasury funds.",
                                "",
                                "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                                "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                                "- `beneficiary`: The destination account for the transfer.",
                                "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                                "beneficiary."
                            ],
                            "args": [
                                {
                                    "name": "asset_kind",
                                    "type": "NULL",
                                    "type_name": "Box<AssetKind>"
                                },
                                {
                                    "name": "amount",
                                    "type": "compact<U128>",
                                    "type_name": [
                                        "AssetBalanceOf",
                                        "BalanceOf"
                                    ]
                                },
                                {
                                    "name": "beneficiary",
                                    "type": [
                                        "AccountId",
                                        "sp_runtime:multiaddress:MultiAddress"
                                    ],
                                    "type_name": [
                                        "Box<BeneficiaryLookupOf>",
                                        "AccountIdLookupOf"
                                    ]
                                },
                                {
                                    "name": "valid_from",
                                    "type": "option<U32>",
                                    "type_name": "Option<BlockNumberFor>"
                                }
                            ]
                        },
                        {
                            "lookup": "0e06",
                            "name": "payout",
                            "docs": [
                                "See [`Pallet::payout`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "SpendIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "0e07",
                            "name": "check_status",
                            "docs": [
                                "See [`Pallet::check_status`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "SpendIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "0e08",
                            "name": "void_spend",
                            "docs": [
                                "See [`Pallet::void_spend`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "SpendIndex"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            116,
                            121,
                            120,
                            118
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0e00",
                            "name": "Proposed",
                            "docs": [
                                "New proposal."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "proposal_index"
                            ],
                            "args_type_name": [
                                "ProposalIndex"
                            ]
                        },
                        {
                            "lookup": "0e01",
                            "name": "Spending",
                            "docs": [
                                "We have ended a spend period and will now allocate funds."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "budget_remaining"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e02",
                            "name": "Awarded",
                            "docs": [
                                "Some funds have been allocated."
                            ],
                            "args": [
                                "U32",
                                "U128",
                                "AccountId"
                            ],
                            "args_name": [
                                "proposal_index",
                                "award",
                                "account"
                            ],
                            "args_type_name": [
                                "ProposalIndex",
                                "BalanceOf",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0e03",
                            "name": "Rejected",
                            "docs": [
                                "A proposal was rejected; funds were slashed."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "proposal_index",
                                "slashed"
                            ],
                            "args_type_name": [
                                "ProposalIndex",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e04",
                            "name": "Burnt",
                            "docs": [
                                "Some of our funds have been burnt."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "burnt_funds"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e05",
                            "name": "Rollover",
                            "docs": [
                                "Spending has finished; this is the amount that rolls over until next spend."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "rollover_balance"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e06",
                            "name": "Deposit",
                            "docs": [
                                "Some funds have been deposited."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "value"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e07",
                            "name": "SpendApproved",
                            "docs": [
                                "A new spend proposal has been approved."
                            ],
                            "args": [
                                "U32",
                                "U128",
                                "AccountId"
                            ],
                            "args_name": [
                                "proposal_index",
                                "amount",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "ProposalIndex",
                                "BalanceOf",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0e08",
                            "name": "UpdatedInactive",
                            "docs": [
                                "The inactive funds of the pallet have been updated."
                            ],
                            "args": [
                                "U128",
                                "U128"
                            ],
                            "args_name": [
                                "reactivated",
                                "deactivated"
                            ],
                            "args_type_name": [
                                "BalanceOf",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e09",
                            "name": "AssetSpendApproved",
                            "docs": [
                                "A new asset spend proposal has been approved."
                            ],
                            "args": [
                                "U32",
                                "NULL",
                                "U128",
                                "AccountId",
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "index",
                                "asset_kind",
                                "amount",
                                "beneficiary",
                                "valid_from",
                                "expire_at"
                            ],
                            "args_type_name": [
                                "SpendIndex",
                                "AssetKind",
                                "AssetBalanceOf",
                                "Beneficiary",
                                "BlockNumberFor",
                                "BlockNumberFor"
                            ]
                        },
                        {
                            "lookup": "0e0a",
                            "name": "AssetSpendVoided",
                            "docs": [
                                "An approved spend was voided."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "SpendIndex"
                            ]
                        },
                        {
                            "lookup": "0e0b",
                            "name": "Paid",
                            "docs": [
                                "A payment happened."
                            ],
                            "args": [
                                "U32",
                                "NULL"
                            ],
                            "args_name": [
                                "index",
                                "payment_id"
                            ],
                            "args_type_name": [
                                "SpendIndex",
                                "<Paymaster as Pay>::Id"
                            ]
                        },
                        {
                            "lookup": "0e0c",
                            "name": "PaymentFailed",
                            "docs": [
                                "A payment failed and can be retried."
                            ],
                            "args": [
                                "U32",
                                "NULL"
                            ],
                            "args_name": [
                                "index",
                                "payment_id"
                            ],
                            "args_type_name": [
                                "SpendIndex",
                                "<Paymaster as Pay>::Id"
                            ]
                        },
                        {
                            "lookup": "0e0d",
                            "name": "SpendProcessed",
                            "docs": [
                                "A spend was processed and removed from the storage. It might have been successfully",
                                "paid or it may have expired."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "SpendIndex"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            57,
                            56,
                            55
                        ]
                    },
                    "constants": [
                        {
                            "name": "ProposalBond",
                            "type": "U32",
                            "type_value": [
                                435,
                                431,
                                429,
                                432,
                                439,
                                433,
                                437,
                                359,
                                338,
                                332
                            ],
                            "constants_value": "50c30000",
                            "docs": [
                                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                                " An accepted proposal gets these back. A rejected proposal does not."
                            ]
                        },
                        {
                            "name": "ProposalBondMinimum",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00a0724e180900000000000000000000",
                                "00203d88792d00000000000000000000",
                                "0040e59c301200000000000000000000"
                            ],
                            "docs": [
                                " Minimum amount of funds that should be placed in a deposit for making a proposal."
                            ]
                        },
                        {
                            "name": "ProposalBondMaximum",
                            "type": "option<U128>",
                            "type_value": [
                                275,
                                274,
                                433,
                                440,
                                434,
                                282,
                                205,
                                339,
                                333
                            ],
                            "constants_value": "00",
                            "docs": [
                                " Maximum amount of funds that should be placed in a deposit for making a proposal."
                            ]
                        },
                        {
                            "name": "SpendPeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80700000",
                            "docs": [
                                " Period between successive spends."
                            ]
                        },
                        {
                            "name": "Burn",
                            "type": "U32",
                            "type_value": [
                                435,
                                431,
                                429,
                                432,
                                439,
                                433,
                                437,
                                359,
                                338,
                                332
                            ],
                            "constants_value": [
                                "00000000",
                                "20a10700"
                            ],
                            "docs": [
                                " Percentage of spare funds (if any) that are burnt per spend period."
                            ]
                        },
                        {
                            "name": "PalletId",
                            "type": "[U8; 8]",
                            "type_value": [
                                436,
                                432,
                                430,
                                434,
                                441,
                                435,
                                438,
                                360,
                                340,
                                334
                            ],
                            "constants_value": "70792f7472737279",
                            "docs": [
                                " The treasury's pallet id, used for deriving its sovereign account ID."
                            ]
                        },
                        {
                            "name": "MaxApprovals",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " The maximum number of approvals that can wait in the spending queue.",
                                "",
                                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
                            ]
                        },
                        {
                            "name": "PayoutPeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "002f0d00",
                            "docs": [
                                " The period during which an approved treasury spend has to be claimed."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InsufficientProposersBalance",
                            "doc": [
                                "Proposer's balance is too low."
                            ]
                        },
                        {
                            "name": "InvalidIndex",
                            "doc": [
                                "No proposal, bounty or spend at that index.",
                                "No proposal or bounty at that index."
                            ]
                        },
                        {
                            "name": "TooManyApprovals",
                            "doc": [
                                "Too many approvals in the queue."
                            ]
                        },
                        {
                            "name": "InsufficientPermission",
                            "doc": [
                                "The spend origin is valid but the amount it is allowed to spend is lower than the",
                                "amount to be spent."
                            ]
                        },
                        {
                            "name": "ProposalNotApproved",
                            "doc": [
                                "Proposal has not been approved."
                            ]
                        },
                        {
                            "name": "FailedToConvertBalance",
                            "doc": [
                                "The balance of the asset kind is not convertible to the balance of the native asset."
                            ]
                        },
                        {
                            "name": "SpendExpired",
                            "doc": [
                                "The spend has expired and cannot be claimed."
                            ]
                        },
                        {
                            "name": "EarlyPayout",
                            "doc": [
                                "The spend is not yet eligible for payout."
                            ]
                        },
                        {
                            "name": "AlreadyAttempted",
                            "doc": [
                                "The payment has already been attempted."
                            ]
                        },
                        {
                            "name": "PayoutError",
                            "doc": [
                                "There was some issue with the mechanism of payment."
                            ]
                        },
                        {
                            "name": "NotAttempted",
                            "doc": [
                                "The payout was not yet attempted/claimed."
                            ]
                        },
                        {
                            "name": "Inconclusive",
                            "doc": [
                                "The payment has neither failed nor succeeded yet."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            437,
                            433,
                            431,
                            435,
                            442,
                            436,
                            439,
                            361,
                            341,
                            335
                        ]
                    },
                    "index": 14
                },
                {
                    "name": "Historical",
                    "prefix": "Historical",
                    "storage": [
                        {
                            "name": "HistoricalSessions",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Tuple:H256U32",
                                    "keys_id": 4,
                                    "value_id": [
                                        438,
                                        434,
                                        432,
                                        436,
                                        443,
                                        437,
                                        440,
                                        362,
                                        342,
                                        336
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Mapping from historical session indices to session-data root hash and validator count."
                            ]
                        },
                        {
                            "name": "StoredRange",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Tuple:U32U32",
                                "PlainTypeValue": [
                                    137,
                                    136,
                                    141,
                                    140,
                                    138
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The range of historical sessions we store. [first, last)"
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 15
                },
                {
                    "name": "Utility",
                    "prefix": "",
                    "storage": null,
                    "calls": [
                        {
                            "lookup": "0800",
                            "name": "batch",
                            "docs": [
                                "See [`Pallet::batch`].",
                                "Send a batch of dispatch calls.",
                                "",
                                "May be called from any origin except `None`.",
                                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                                "If origin is root then the calls are dispatched without checking origin filter. (This",
                                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                                "## Complexity",
                                "- O(C) where C is the number of calls to be batched.",
                                "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                                "event is deposited. If a call failed and the batch was interrupted, then the",
                                "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                                "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                                "event is deposited.",
                                "# <weight>",
                                "- Complexity: O(C) where C is the number of calls to be batched.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "calls",
                                    "type": "Vec<Call>",
                                    "type_name": "Vec<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0801",
                            "name": "as_derivative",
                            "docs": [
                                "See [`Pallet::as_derivative`].",
                                "Send a call through an indexed pseudonym of the sender.",
                                "",
                                "Filter from origin are passed along. The call will be dispatched with an origin which",
                                "use the same filter as the origin of this call.",
                                "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                                "because you expect `proxy` to have been used prior in the call stack and you do not want",
                                "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                                "in the Multisig pallet instead.",
                                "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                                "The dispatch origin for this call must be _Signed_."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0802",
                            "name": "batch_all",
                            "docs": [
                                "See [`Pallet::batch_all`].",
                                "Send a batch of dispatch calls and atomically execute them.",
                                "The whole transaction will rollback and fail if any of the calls failed.",
                                "",
                                "May be called from any origin except `None`.",
                                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                                "If origin is root then the calls are dispatched without checking origin filter. (This",
                                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                                "## Complexity",
                                "- O(C) where C is the number of calls to be batched.",
                                "# <weight>",
                                "- Complexity: O(C) where C is the number of calls to be batched.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "calls",
                                    "type": "Vec<Call>",
                                    "type_name": "Vec<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0803",
                            "name": "dispatch_as",
                            "docs": [
                                "See [`Pallet::dispatch_as`].",
                                "Dispatches a function call with a provided origin.",
                                "",
                                "The dispatch origin for this call must be _Root_.",
                                "## Complexity",
                                "- O(1).",
                                "# <weight>",
                                "- Limited storage reads.",
                                "- One DB write (event).",
                                "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "as_origin",
                                    "type": "vara_runtime:OriginCaller",
                                    "type_name": "Box<PalletsOrigin>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0804",
                            "name": "force_batch",
                            "docs": [
                                "See [`Pallet::force_batch`].",
                                "Send a batch of dispatch calls.",
                                "Unlike `batch`, it allows errors and won't interrupt.",
                                "",
                                "May be called from any origin except `None`.",
                                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                                "If origin is root then the calls are dispatch without checking origin filter. (This",
                                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                                "## Complexity",
                                "- O(C) where C is the number of calls to be batched.",
                                "# <weight>",
                                "- Complexity: O(C) where C is the number of calls to be batched.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "calls",
                                    "type": "Vec<Call>",
                                    "type_name": "Vec<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0805",
                            "name": "with_weight",
                            "docs": [
                                "See [`Pallet::with_weight`].",
                                "Dispatch a function call with a specified weight.",
                                "",
                                "This function does not check the weight of the call, and instead allows the",
                                "Root origin to specify the weight of the call.",
                                "The dispatch origin for this call must be _Root_."
                            ],
                            "args": [
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                },
                                {
                                    "name": "weight",
                                    "type": "sp_weights:weight_v2:Weight",
                                    "type_name": "Weight"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            118,
                            117,
                            122,
                            121,
                            188,
                            182,
                            180
                        ]
                    },
                    "events": [
                        {
                            "lookup": "0800",
                            "name": "BatchInterrupted",
                            "docs": [
                                "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                                "well as the error."
                            ],
                            "args": [
                                "U32",
                                "sp_runtime:DispatchError"
                            ],
                            "args_name": [
                                "index",
                                "error"
                            ],
                            "args_type_name": [
                                "u32",
                                "DispatchError"
                            ]
                        },
                        {
                            "lookup": "0801",
                            "name": "BatchCompleted",
                            "docs": [
                                "Batch of dispatches completed fully with no error."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0802",
                            "name": "BatchCompletedWithErrors",
                            "docs": [
                                "Batch of dispatches completed but has errors."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0803",
                            "name": "ItemCompleted",
                            "docs": [
                                "A single item within a Batch of dispatches has completed with no error."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0804",
                            "name": "ItemFailed",
                            "docs": [
                                "A single item within a Batch of dispatches has completed with error."
                            ],
                            "args": [
                                "sp_runtime:DispatchError"
                            ],
                            "args_name": [
                                "error"
                            ],
                            "args_type_name": [
                                "DispatchError"
                            ]
                        },
                        {
                            "lookup": "0805",
                            "name": "DispatchedAs",
                            "docs": [
                                "A call was dispatched."
                            ],
                            "args": [
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "result"
                            ],
                            "args_type_name": [
                                "DispatchResult"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            59,
                            58,
                            57,
                            56,
                            227,
                            209,
                            206
                        ]
                    },
                    "constants": [
                        {
                            "name": "batched_calls_limit",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "aa2a0000",
                            "docs": [
                                " The limit on the number of batched calls."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "TooManyCalls",
                            "doc": [
                                "Too many calls batched."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            439,
                            435,
                            433,
                            437,
                            444,
                            438,
                            441,
                            406,
                            399
                        ]
                    },
                    "index": 8
                },
                {
                    "name": "ConvictionVoting",
                    "prefix": "ConvictionVoting",
                    "storage": [
                        {
                            "name": "VotingFor",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "U16"
                                    ],
                                    "value": "pallet_conviction_voting:vote:Voting",
                                    "keys_id": [
                                        440,
                                        436,
                                        434,
                                        438,
                                        445,
                                        439,
                                        442,
                                        363,
                                        343,
                                        337
                                    ],
                                    "value_id": [
                                        441,
                                        437,
                                        435,
                                        439,
                                        446,
                                        440,
                                        443,
                                        364,
                                        344,
                                        338
                                    ]
                                }
                            },
                            "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " All voting for a particular voter in a particular voting class. We store the balance for the",
                                " number of votes that we have recorded."
                            ]
                        },
                        {
                            "name": "ClassLocksFor",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Vec<Tuple:U16U128>",
                                    "keys_id": 0,
                                    "value_id": [
                                        449,
                                        445,
                                        443,
                                        447,
                                        454,
                                        448,
                                        451,
                                        372,
                                        352,
                                        346
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                                " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                                " this list."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1000",
                            "name": "vote",
                            "docs": [
                                "See [`Pallet::vote`].",
                                "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                                "otherwise it is a vote to keep the status quo.",
                                "",
                                "The dispatch origin of this call must be _Signed_.",
                                "- `poll_index`: The index of the poll to vote for.",
                                "- `vote`: The vote configuration.",
                                "Weight: `O(R)` where R is the number of polls the voter has voted on."
                            ],
                            "args": [
                                {
                                    "name": "poll_index",
                                    "type": "compact<U32>",
                                    "type_name": "PollIndexOf"
                                },
                                {
                                    "name": "vote",
                                    "type": "pallet_conviction_voting:vote:AccountVote",
                                    "type_name": "AccountVote<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "1001",
                            "name": "delegate",
                            "docs": [
                                "See [`Pallet::delegate`].",
                                "Delegate the voting power (with some given conviction) of the sending account for a",
                                "particular class of polls.",
                                "",
                                "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                                "time appropriate for the conviction's lock period.",
                                "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                                "  - be delegating already; or",
                                "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                                "    through `reap_vote` or `unvote`).",
                                "- `to`: The account whose voting the `target` account's voting power will follow.",
                                "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
                                "  to this function are required.",
                                "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                                "  account is undelegated, the funds will be locked for the corresponding period.",
                                "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                                "  be more than the account's current balance.",
                                "Emits `Delegated`.",
                                "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                                "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                            ],
                            "args": [
                                {
                                    "name": "class",
                                    "type": "U16",
                                    "type_name": "ClassOf"
                                },
                                {
                                    "name": "to",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "conviction",
                                    "type": "pallet_conviction_voting:conviction:Conviction",
                                    "type_name": "Conviction"
                                },
                                {
                                    "name": "balance",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1002",
                            "name": "undelegate",
                            "docs": [
                                "See [`Pallet::undelegate`].",
                                "Undelegate the voting power of the sending account for a particular class of polls.",
                                "",
                                "Tokens may be unlocked following once an amount of time consistent with the lock period",
                                "of the conviction with which the delegation was issued has passed.",
                                "The dispatch origin of this call must be _Signed_ and the signing account must be",
                                "currently delegating.",
                                "- `class`: The class of polls to remove the delegation from.",
                                "Emits `Undelegated`.",
                                "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                                "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                            ],
                            "args": [
                                {
                                    "name": "class",
                                    "type": "U16",
                                    "type_name": "ClassOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1003",
                            "name": "unlock",
                            "docs": [
                                "See [`Pallet::unlock`].",
                                "Remove the lock caused by prior voting/delegating which has expired within a particular",
                                "class.",
                                "",
                                "The dispatch origin of this call must be _Signed_.",
                                "- `class`: The class of polls to unlock.",
                                "- `target`: The account to remove the lock on.",
                                "Weight: `O(R)` with R number of vote of target."
                            ],
                            "args": [
                                {
                                    "name": "class",
                                    "type": "U16",
                                    "type_name": "ClassOf"
                                },
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1004",
                            "name": "remove_vote",
                            "docs": [
                                "See [`Pallet::remove_vote`].",
                                "Remove a vote for a poll.",
                                "",
                                "If:",
                                "- the poll was cancelled, or",
                                "- the poll is ongoing, or",
                                "- the poll has ended such that",
                                "  - the vote of the account was in opposition to the result; or",
                                "  - there was no conviction to the account's vote; or",
                                "  - the account made a split vote",
                                "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                                "funds being available.",
                                "If, however, the poll has ended and:",
                                "- it finished corresponding to the vote of the account, and",
                                "- the account made a standard vote with conviction, and",
                                "- the lock period of the conviction is not over",
                                "...then the lock will be aggregated into the overall account's lock, which may involve",
                                "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                                "of both the amount locked and the time is it locked for).",
                                "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                                "registered for poll `index`.",
                                "- `index`: The index of poll of the vote to be removed.",
                                "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                                "  which have finished or are cancelled, this must be `Some`.",
                                "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                                "  Weight is calculated for the maximum number of vote."
                            ],
                            "args": [
                                {
                                    "name": "class",
                                    "type": "option<U16>",
                                    "type_name": "Option<ClassOf>"
                                },
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "PollIndexOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1005",
                            "name": "remove_other_vote",
                            "docs": [
                                "See [`Pallet::remove_other_vote`].",
                                "Remove a vote for a poll.",
                                "",
                                "If the `target` is equal to the signer, then this function is exactly equivalent to",
                                "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                                "either because the poll was cancelled, because the voter lost the poll or",
                                "because the conviction period is over.",
                                "The dispatch origin of this call must be _Signed_.",
                                "- `target`: The account of the vote to be removed; this account must have voted for poll",
                                "  `index`.",
                                "- `index`: The index of poll of the vote to be removed.",
                                "- `class`: The class of the poll.",
                                "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                                "  Weight is calculated for the maximum number of vote."
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "class",
                                    "type": "U16",
                                    "type_name": "ClassOf"
                                },
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "PollIndexOf"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            124,
                            123,
                            128,
                            127,
                            119
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1000",
                            "name": "Delegated",
                            "docs": [
                                "An account has delegated their vote to another account. \\[who, target\\]"
                            ],
                            "args": [
                                "AccountId",
                                "AccountId"
                            ],
                            "args_name": [
                                "",
                                ""
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1001",
                            "name": "Undelegated",
                            "docs": [
                                "An \\[account\\] has cancelled a previous delegation operation."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                ""
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            61,
                            60,
                            59,
                            56
                        ]
                    },
                    "constants": [
                        {
                            "name": "MaxVotes",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00020000",
                            "docs": [
                                " The maximum number of concurrent votes an account may have.",
                                "",
                                " Also used to compute weight, an overly large value can lead to extrinsics with large",
                                " weight estimation: see `delegate` for instance."
                            ]
                        },
                        {
                            "name": "VoteLockingPeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80130300",
                            "docs": [
                                " The minimum period of vote locking.",
                                "",
                                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                                " those successful voters are locked into the consequences that their votes entail."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotOngoing",
                            "doc": [
                                "Poll is not ongoing."
                            ]
                        },
                        {
                            "name": "NotVoter",
                            "doc": [
                                "The given account did not vote on the poll."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "The actor has no permission to conduct the action."
                            ]
                        },
                        {
                            "name": "NoPermissionYet",
                            "doc": [
                                "The actor has no permission to conduct the action right now but will do in the future."
                            ]
                        },
                        {
                            "name": "AlreadyDelegating",
                            "doc": [
                                "The account is already delegating."
                            ]
                        },
                        {
                            "name": "AlreadyVoting",
                            "doc": [
                                "The account currently has votes attached to it and the operation cannot succeed until",
                                "these are removed, either through `unvote` or `reap_vote`."
                            ]
                        },
                        {
                            "name": "InsufficientFunds",
                            "doc": [
                                "Too high a balance was provided that the account cannot afford."
                            ]
                        },
                        {
                            "name": "NotDelegating",
                            "doc": [
                                "The account is not currently delegating."
                            ]
                        },
                        {
                            "name": "Nonsense",
                            "doc": [
                                "Delegation to oneself makes no sense."
                            ]
                        },
                        {
                            "name": "MaxVotesReached",
                            "doc": [
                                "Maximum number of votes reached."
                            ]
                        },
                        {
                            "name": "ClassNeeded",
                            "doc": [
                                "The class must be supplied since it is not easily determinable from the state."
                            ]
                        },
                        {
                            "name": "BadClass",
                            "doc": [
                                "The class ID supplied is invalid."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            452,
                            448,
                            446,
                            450,
                            457,
                            451,
                            454,
                            375,
                            355,
                            349
                        ]
                    },
                    "index": 16
                },
                {
                    "name": "Referenda",
                    "prefix": "Referenda",
                    "storage": [
                        {
                            "name": "ReferendumCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The next free referendum index, aka the number of referenda started so far."
                            ]
                        },
                        {
                            "name": "ReferendumInfoFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": [
                                        "pallet_referenda:types:ReferendumInfo@453",
                                        "pallet_referenda:types:ReferendumInfo@449",
                                        "pallet_referenda:types:ReferendumInfo@447",
                                        "pallet_referenda:types:ReferendumInfo@451",
                                        "pallet_referenda:types:ReferendumInfo@458",
                                        "pallet_referenda:types:ReferendumInfo@452",
                                        "pallet_referenda:types:ReferendumInfo@455",
                                        "pallet_referenda:types:ReferendumInfo@376",
                                        "pallet_referenda:types:ReferendumInfo@356",
                                        "pallet_referenda:types:ReferendumInfo@350"
                                    ],
                                    "keys_id": 4,
                                    "value_id": [
                                        453,
                                        449,
                                        447,
                                        451,
                                        458,
                                        452,
                                        455,
                                        376,
                                        356,
                                        350
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Information concerning any given referendum."
                            ]
                        },
                        {
                            "name": "TrackQueue",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "Vec<Tuple:U32U128>",
                                    "keys_id": [
                                        63,
                                        62,
                                        61,
                                        58
                                    ],
                                    "value_id": [
                                        461,
                                        457,
                                        455,
                                        459,
                                        466,
                                        460,
                                        463,
                                        384,
                                        364,
                                        358
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                                " conviction-weighted approvals.",
                                "",
                                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                            ]
                        },
                        {
                            "name": "DecidingCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "U32",
                                    "keys_id": [
                                        63,
                                        62,
                                        61,
                                        58
                                    ],
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The number of referenda being decided currently."
                            ]
                        },
                        {
                            "name": "MetadataOf",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "H256",
                                    "keys_id": 4,
                                    "value_id": [
                                        12,
                                        11
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The metadata is a general information concerning the referendum.",
                                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                                " dump or IPFS hash of a JSON file.",
                                "",
                                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                                " large preimages.",
                                " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1100",
                            "name": "submit",
                            "docs": [
                                "See [`Pallet::submit`].",
                                "Propose a referendum on a privileged action.",
                                "",
                                "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                                "  available.",
                                "- `proposal_origin`: The origin from which the proposal should be executed.",
                                "- `proposal`: The proposal.",
                                "- `enactment_moment`: The moment that the proposal should be enacted.",
                                "Emits `Submitted`."
                            ],
                            "args": [
                                {
                                    "name": "proposal_origin",
                                    "type": "vara_runtime:OriginCaller",
                                    "type_name": "Box<PalletsOriginOf>"
                                },
                                {
                                    "name": "proposal",
                                    "type": "frame_support:traits:preimages:Bounded",
                                    "type_name": "BoundedCallOf"
                                },
                                {
                                    "name": "enactment_moment",
                                    "type": "frame_support:traits:schedule:DispatchTime",
                                    "type_name": [
                                        "DispatchTime<BlockNumberFor>",
                                        "DispatchTime<BlockNumber>"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "1101",
                            "name": "place_decision_deposit",
                            "docs": [
                                "See [`Pallet::place_decision_deposit`].",
                                "Post the Decision Deposit for a referendum.",
                                "",
                                "- `origin`: must be `Signed` and the account must have funds available for the",
                                "  referendum's track's Decision Deposit.",
                                "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                                "  posted.",
                                "Emits `DecisionDepositPlaced`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1102",
                            "name": "refund_decision_deposit",
                            "docs": [
                                "See [`Pallet::refund_decision_deposit`].",
                                "Refund the Decision Deposit for a closed referendum back to the depositor.",
                                "",
                                "- `origin`: must be `Signed` or `Root`.",
                                "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                                "  refunded.",
                                "Emits `DecisionDepositRefunded`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1103",
                            "name": "cancel",
                            "docs": [
                                "See [`Pallet::cancel`].",
                                "Cancel an ongoing referendum.",
                                "",
                                "- `origin`: must be the `CancelOrigin`.",
                                "- `index`: The index of the referendum to be cancelled.",
                                "Emits `Cancelled`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1104",
                            "name": "kill",
                            "docs": [
                                "See [`Pallet::kill`].",
                                "Cancel an ongoing referendum and slash the deposits.",
                                "",
                                "- `origin`: must be the `KillOrigin`.",
                                "- `index`: The index of the referendum to be cancelled.",
                                "Emits `Killed` and `DepositSlashed`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1105",
                            "name": "nudge_referendum",
                            "docs": [
                                "See [`Pallet::nudge_referendum`].",
                                "Advance a referendum onto its next logical state. Only used internally.",
                                "",
                                "- `origin`: must be `Root`.",
                                "- `index`: the referendum to be advanced."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1106",
                            "name": "one_fewer_deciding",
                            "docs": [
                                "See [`Pallet::one_fewer_deciding`].",
                                "Advance a track onto its next logical state. Only used internally.",
                                "",
                                "- `origin`: must be `Root`.",
                                "- `track`: the track to be advanced.",
                                "Action item for when there is now one fewer referendum in the deciding phase and the",
                                "`DecidingCount` is not yet updated. This means that we should either:",
                                "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                                "- decrement `DecidingCount`."
                            ],
                            "args": [
                                {
                                    "name": "track",
                                    "type": "U16",
                                    "type_name": "TrackIdOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1107",
                            "name": "refund_submission_deposit",
                            "docs": [
                                "See [`Pallet::refund_submission_deposit`].",
                                "Refund the Submission Deposit for a closed referendum back to the depositor.",
                                "",
                                "- `origin`: must be `Signed` or `Root`.",
                                "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                                "  refunded.",
                                "Emits `SubmissionDepositRefunded`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1108",
                            "name": "set_metadata",
                            "docs": [
                                "See [`Pallet::set_metadata`].",
                                "Set or clear metadata of a referendum.",
                                "",
                                "Parameters:",
                                "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                                "  metadata of a finished referendum.",
                                "- `index`:  The index of a referendum to set or clear metadata for.",
                                "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                },
                                {
                                    "name": "maybe_hash",
                                    "type": "option<H256>",
                                    "type_name": [
                                        "Option<Hash>",
                                        "Option<PreimageHash>"
                                    ]
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            129,
                            128,
                            133,
                            132,
                            124
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1100",
                            "name": "Submitted",
                            "docs": [
                                "A referendum has been submitted."
                            ],
                            "args": [
                                "U32",
                                "U16",
                                "frame_support:traits:preimages:Bounded"
                            ],
                            "args_name": [
                                "index",
                                "track",
                                "proposal"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "TrackIdOf",
                                "BoundedCallOf"
                            ]
                        },
                        {
                            "lookup": "1101",
                            "name": "DecisionDepositPlaced",
                            "docs": [
                                "The decision deposit has been placed."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1102",
                            "name": "DecisionDepositRefunded",
                            "docs": [
                                "The decision deposit has been refunded."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1103",
                            "name": "DepositSlashed",
                            "docs": [
                                "A deposit has been slashaed."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1104",
                            "name": "DecisionStarted",
                            "docs": [
                                "A referendum has moved into the deciding phase."
                            ],
                            "args": [
                                "U32",
                                "U16",
                                "frame_support:traits:preimages:Bounded",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "track",
                                "proposal",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "TrackIdOf",
                                "BoundedCallOf",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "1105",
                            "name": "ConfirmStarted",
                            "docs": null,
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1106",
                            "name": "ConfirmAborted",
                            "docs": null,
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1107",
                            "name": "Confirmed",
                            "docs": [
                                "A referendum has ended its confirmation phase and is ready for approval."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "1108",
                            "name": "Approved",
                            "docs": [
                                "A referendum has been approved and its proposal has been scheduled."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1109",
                            "name": "Rejected",
                            "docs": [
                                "A proposal has been rejected by referendum."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "110a",
                            "name": "TimedOut",
                            "docs": [
                                "A referendum has been timed out without being decided."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "110b",
                            "name": "Cancelled",
                            "docs": [
                                "A referendum has been cancelled."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "110c",
                            "name": "Killed",
                            "docs": [
                                "A referendum has been killed."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "110d",
                            "name": "SubmissionDepositRefunded",
                            "docs": [
                                "The submission deposit has been refunded."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "110e",
                            "name": "MetadataSet",
                            "docs": [
                                "Metadata for a referendum has been set."
                            ],
                            "args": [
                                "U32",
                                "H256"
                            ],
                            "args_name": [
                                "index",
                                "hash"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Hash",
                                "PreimageHash"
                            ]
                        },
                        {
                            "lookup": "110f",
                            "name": "MetadataCleared",
                            "docs": [
                                "Metadata for a referendum has been cleared."
                            ],
                            "args": [
                                "U32",
                                "H256"
                            ],
                            "args_name": [
                                "index",
                                "hash"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Hash",
                                "PreimageHash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            62,
                            61,
                            60,
                            57
                        ]
                    },
                    "constants": [
                        {
                            "name": "SubmissionDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00407a10f35a00000000000000000000",
                                "00406352bfc601000000000000000000",
                                "0080f420e6b500000000000000000000"
                            ],
                            "docs": [
                                " The minimum amount to be used as a deposit for a public referendum proposal."
                            ]
                        },
                        {
                            "name": "MaxQueued",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " Maximum size of the referendum queue for a single track."
                            ]
                        },
                        {
                            "name": "UndecidingTimeout",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00270600",
                            "docs": [
                                " The number of blocks after submission that a referendum must begin being decided by.",
                                " Once this passes, then anyone may cancel the referendum."
                            ]
                        },
                        {
                            "name": "AlarmInterval",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "01000000",
                            "docs": [
                                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                                " automatic referendum status changes. Explicit servicing instructions are unaffected."
                            ]
                        },
                        {
                            "name": "Tracks",
                            "type": "Vec<Tuple:U16pallet_referenda:types:TrackInfo>",
                            "type_value": [
                                464,
                                460,
                                458,
                                462,
                                469,
                                463,
                                466,
                                387,
                                367,
                                361
                            ],
                            "constants_value": [
                                "34000010726f6f7401000000000064a7b3b6e00d0000000000000000600900000027060080700000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d01004877686974656c69737465645f63616c6c65726400000000008a5d7845630100000000000000005802000000270600c8000000c800000002ec972510000000007b573c170000000042392f1200000000020e00840000000000d6e61f010000000039627902000000000a00347374616b696e675f61646d696e0a0000000000c52ebca2b10000000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0b00247472656173757265720a0000000000c16ff286230000000000000000006009000000270600100e0000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d0c004066656c6c6f77736869705f61646d696e0a0000000000c52ebca2b10000000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0d003467656e6572616c5f61646d696e0a0000000000c52ebca2b10000000000000000006009000000270600100e0000c80000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff1400507265666572656e64756d5f63616e63656c6c6572e803000000008a5d7845630100000000000000006009000080130300100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1500447265666572656e64756d5f6b696c6c6572e80300000000b2d3595bf00600000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1e0030736d616c6c5f746970706572c800000000a0724e1809000000000000000000001400000080130300c80000001400000000499149150065cd1d00ca9a3b02f9ba1800000000002a4d3100000000006b59e7ffffffffff1f00286269675f7469707065726400000000407a10f35a00000000000000000000c800000080130300b0040000c800000000499149150065cd1d00ca9a3b02694f3f000000000035967d0000000000e534c1ffffffffff200034736d616c6c5f7370656e646572320000000080c6a47e8d03000000000000000000c012000000270600403800008070000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff2100386d656469756d5f7370656e6465723200000000008d49fd1a07000000000000000000c0120000002706008070000080700000005b01f6300065cd1d00ca9a3b021161db0000000000bfd1aa010000000020972affffffffff22002c6269675f7370656e6465723200000000001a93fa350e000000000000000000c01200000027060000e10000807000000000ca9a3b0065cd1d00ca9a3b02413cb00100000000755d34030000000045d165feffffffff",
                                "34000010726f6f74010000000000f444829163450000000000000000600900000027060080700000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d01004877686974656c69737465645f63616c6c6572640000000000b2d3595bf00600000000000000005802000000270600c8000000c800000002ec972510000000007b573c170000000042392f1200000000020e00840000000000d6e61f010000000039627902000000000a00347374616b696e675f61646d696e0a0000000000d9e9ac2d780300000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0b00247472656173757265720a0000000000c52ebca2b10000000000000000006009000000270600100e0000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d0c004066656c6c6f77736869705f61646d696e0a0000000000d9e9ac2d780300000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0d003467656e6572616c5f61646d696e0a0000000000d9e9ac2d780300000000000000006009000000270600100e0000c80000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff1400507265666572656e64756d5f63616e63656c6c6572e80300000000b2d3595bf00600000000000000006009000080130300100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1500447265666572656e64756d5f6b696c6c6572e803000000007a22c1c8b12200000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1e0030736d616c6c5f746970706572c800000000203d88792d000000000000000000001400000080130300c80000001400000000499149150065cd1d00ca9a3b02f9ba1800000000002a4d3100000000006b59e7ffffffffff1f00286269675f7469707065726400000000406352bfc601000000000000000000c800000080130300b0040000c800000000499149150065cd1d00ca9a3b02694f3f000000000035967d0000000000e534c1ffffffffff200034736d616c6c5f7370656e646572320000000080e03779c311000000000000000000c012000000270600403800008070000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff2100386d656469756d5f7370656e646572320000000000c16ff28623000000000000000000c0120000002706008070000080700000005b01f6300065cd1d00ca9a3b021161db0000000000bfd1aa010000000020972affffffffff22002c6269675f7370656e64657232000000000082dfe40d47000000000000000000c01200000027060000e10000807000000000ca9a3b0065cd1d00ca9a3b02413cb00100000000755d34030000000045d165feffffffff",
                                "34000010726f6f74010000000000c84e676dc11b0000000000000000600900000027060080700000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d01004877686974656c69737465645f63616c6c657264000000000014bbf08ac60200000000000000005802000000270600c8000000c800000002ec972510000000007b573c170000000042392f1200000000020e00840000000000d6e61f010000000039627902000000000a00347374616b696e675f61646d696e0a00000000008a5d7845630100000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0b00247472656173757265720a000000000082dfe40d470000000000000000006009000000270600100e0000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d0c004066656c6c6f77736869705f61646d696e0a00000000008a5d7845630100000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0d003467656e6572616c5f61646d696e0a00000000008a5d7845630100000000000000006009000000270600100e0000c80000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff1400507265666572656e64756d5f63616e63656c6c6572e8030000000014bbf08ac60200000000000000006009000080130300100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1500447265666572656e64756d5f6b696c6c6572e8030000000064a7b3b6e00d00000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1e0030736d616c6c5f746970706572c80000000040e59c3012000000000000000000001400000080130300c80000001400000000499149150065cd1d00ca9a3b02f9ba1800000000002a4d3100000000006b59e7ffffffffff1f00286269675f746970706572640000000080f420e6b500000000000000000000c800000080130300b0040000c800000000499149150065cd1d00ca9a3b02694f3f000000000035967d0000000000e534c1ffffffffff200034736d616c6c5f7370656e6465723200000000008d49fd1a07000000000000000000c012000000270600403800008070000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff2100386d656469756d5f7370656e6465723200000000001a93fa350e000000000000000000c0120000002706008070000080700000005b01f6300065cd1d00ca9a3b021161db0000000000bfd1aa010000000020972affffffffff22002c6269675f7370656e6465723200000000003426f56b1c000000000000000000c01200000027060000e10000807000000000ca9a3b0065cd1d00ca9a3b02413cb00100000000755d34030000000045d165feffffffff",
                                "20000010726f6f74010000000000c84e676dc11b0000000000000000600900000027060080700000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d01004877686974656c69737465645f63616c6c657264000000000014bbf08ac60200000000000000005802000000270600c8000000c800000002ec972510000000007b573c170000000042392f1200000000020e00840000000000d6e61f010000000039627902000000000a00347374616b696e675f61646d696e0a00000000008a5d7845630100000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0b00247472656173757265720a000000000082dfe40d470000000000000000006009000000270600100e0000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d0c004066656c6c6f77736869705f61646d696e0a00000000008a5d7845630100000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0d003467656e6572616c5f61646d696e0a00000000008a5d7845630100000000000000006009000000270600100e0000c80000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff1400507265666572656e64756d5f63616e63656c6c6572e8030000000014bbf08ac60200000000000000006009000080130300100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1500447265666572656e64756d5f6b696c6c6572e8030000000064a7b3b6e00d00000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff"
                            ],
                            "docs": [
                                " Information concerning the different referendum tracks."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotOngoing",
                            "doc": [
                                "Referendum is not ongoing."
                            ]
                        },
                        {
                            "name": "HasDeposit",
                            "doc": [
                                "Referendum's decision deposit is already paid."
                            ]
                        },
                        {
                            "name": "BadTrack",
                            "doc": [
                                "The track identifier given was invalid."
                            ]
                        },
                        {
                            "name": "Full",
                            "doc": [
                                "There are already a full complement of referenda in progress for this track."
                            ]
                        },
                        {
                            "name": "QueueEmpty",
                            "doc": [
                                "The queue of the track is empty."
                            ]
                        },
                        {
                            "name": "BadReferendum",
                            "doc": [
                                "The referendum index provided is invalid in this context."
                            ]
                        },
                        {
                            "name": "NothingToDo",
                            "doc": [
                                "There was nothing to do in the advancement."
                            ]
                        },
                        {
                            "name": "NoTrack",
                            "doc": [
                                "No track exists for the proposal origin."
                            ]
                        },
                        {
                            "name": "Unfinished",
                            "doc": [
                                "Any deposit cannot be refunded until after the decision is over."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "The deposit refunder is not the depositor."
                            ]
                        },
                        {
                            "name": "NoDeposit",
                            "doc": [
                                "The deposit cannot be refunded since none was made."
                            ]
                        },
                        {
                            "name": "BadStatus",
                            "doc": [
                                "The referendum status is invalid for this operation."
                            ]
                        },
                        {
                            "name": "PreimageNotExist",
                            "doc": [
                                "The preimage does not exist."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            470,
                            466,
                            464,
                            468,
                            475,
                            469,
                            472,
                            393,
                            373,
                            367
                        ]
                    },
                    "index": 17
                },
                {
                    "name": "FellowshipCollective",
                    "prefix": "FellowshipCollective",
                    "storage": [
                        {
                            "name": "MemberCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "U32",
                                    "keys_id": [
                                        63,
                                        62,
                                        61,
                                        58
                                    ],
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The number of members in the collective who have at least the rank according to the index",
                                " of the vec."
                            ]
                        },
                        {
                            "name": "Members",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "U16",
                                    "keys_id": 0,
                                    "value_id": [
                                        471,
                                        467,
                                        465,
                                        469,
                                        476,
                                        470,
                                        473,
                                        394,
                                        374,
                                        368
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The current members of the collective."
                            ]
                        },
                        {
                            "name": "IdToIndex",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16",
                                        "AccountId"
                                    ],
                                    "value": "U32",
                                    "keys_id": [
                                        472,
                                        468,
                                        466,
                                        470,
                                        477,
                                        471,
                                        474,
                                        395,
                                        375,
                                        369
                                    ],
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The index of each ranks's member into the group of members who have at least that rank."
                            ]
                        },
                        {
                            "name": "IndexToId",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16",
                                        "U32"
                                    ],
                                    "value": "AccountId",
                                    "keys_id": [
                                        473,
                                        469,
                                        467,
                                        471,
                                        478,
                                        472,
                                        475,
                                        396,
                                        376,
                                        370
                                    ],
                                    "value_id": 0
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The members in the collective by index. All indices in the range `0..MemberCount` will",
                                " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
                            ]
                        },
                        {
                            "name": "Voting",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "pallet_ranked_collective:VoteRecord",
                                    "keys_id": [
                                        404,
                                        402,
                                        400,
                                        403,
                                        410,
                                        408,
                                        327,
                                        306,
                                        300
                                    ],
                                    "value_id": [
                                        282,
                                        280,
                                        285,
                                        284,
                                        283,
                                        286,
                                        209,
                                        193,
                                        191
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Votes on a given proposal, if it is ongoing."
                            ]
                        },
                        {
                            "name": "VotingCleanup",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": [
                                        474,
                                        470,
                                        468,
                                        472,
                                        479,
                                        473,
                                        476,
                                        397,
                                        377,
                                        371
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1200",
                            "name": "add_member",
                            "docs": [
                                "See [`Pallet::add_member`].",
                                "Introduce a new member.",
                                "",
                                "- `origin`: Must be the `AdminOrigin`.",
                                "- `who`: Account of non-member which will become a member.",
                                "- `rank`: The rank to give the new member.",
                                "Weight: `O(1)`"
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1201",
                            "name": "promote_member",
                            "docs": [
                                "See [`Pallet::promote_member`].",
                                "Increment the rank of an existing member by one.",
                                "",
                                "- `origin`: Must be the `AdminOrigin`.",
                                "- `who`: Account of existing member.",
                                "Weight: `O(1)`"
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1202",
                            "name": "demote_member",
                            "docs": [
                                "See [`Pallet::demote_member`].",
                                "Decrement the rank of an existing member by one. If the member is already at rank zero,",
                                "then they are removed entirely.",
                                "",
                                "- `origin`: Must be the `AdminOrigin`.",
                                "- `who`: Account of existing member of rank greater than zero.",
                                "Weight: `O(1)`, less if the member's index is highest in its rank."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1203",
                            "name": "remove_member",
                            "docs": [
                                "See [`Pallet::remove_member`].",
                                "Remove the member entirely.",
                                "",
                                "- `origin`: Must be the `AdminOrigin`.",
                                "- `who`: Account of existing member of rank greater than zero.",
                                "- `min_rank`: The rank of the member or greater.",
                                "Weight: `O(min_rank)`."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "min_rank",
                                    "type": "U16",
                                    "type_name": "Rank"
                                }
                            ]
                        },
                        {
                            "lookup": "1204",
                            "name": "vote",
                            "docs": [
                                "See [`Pallet::vote`].",
                                "Add an aye or nay vote for the sender to the given proposal.",
                                "",
                                "- `origin`: Must be `Signed` by a member account.",
                                "- `poll`: Index of a poll which is ongoing.",
                                "- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.",
                                "Transaction fees are be waived if the member is voting on any particular proposal",
                                "for the first time and the call is successful. Subsequent vote changes will charge a",
                                "fee.",
                                "Weight: `O(1)`, less if there was no previous vote on the poll by the member."
                            ],
                            "args": [
                                {
                                    "name": "poll",
                                    "type": "U32",
                                    "type_name": "PollIndexOf"
                                },
                                {
                                    "name": "aye",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "1205",
                            "name": "cleanup_poll",
                            "docs": [
                                "See [`Pallet::cleanup_poll`].",
                                "Remove votes from the given poll. It must have ended.",
                                "",
                                "- `origin`: Must be `Signed` by any account.",
                                "- `poll_index`: Index of a poll which is completed and for which votes continue to",
                                "  exist.",
                                "- `max`: Maximum number of vote items from remove in this call.",
                                "Transaction fees are waived if the operation is successful.",
                                "Weight `O(max)` (less if there are fewer items to remove than `max`)."
                            ],
                            "args": [
                                {
                                    "name": "poll_index",
                                    "type": "U32",
                                    "type_name": "PollIndexOf"
                                },
                                {
                                    "name": "max",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            132,
                            131,
                            136,
                            135,
                            130
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1200",
                            "name": "MemberAdded",
                            "docs": [
                                "A member `who` has been added."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "who"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1201",
                            "name": "RankChanged",
                            "docs": [
                                "The member `who`se rank has been changed to the given `rank`."
                            ],
                            "args": [
                                "AccountId",
                                "U16"
                            ],
                            "args_name": [
                                "who",
                                "rank"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Rank"
                            ]
                        },
                        {
                            "lookup": "1202",
                            "name": "MemberRemoved",
                            "docs": [
                                "The member `who` of given `rank` has been removed from the collective."
                            ],
                            "args": [
                                "AccountId",
                                "U16"
                            ],
                            "args_name": [
                                "who",
                                "rank"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Rank"
                            ]
                        },
                        {
                            "lookup": "1203",
                            "name": "Voted",
                            "docs": [
                                "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
                                "`tally`."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "pallet_ranked_collective:VoteRecord",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "who",
                                "poll",
                                "vote",
                                "tally"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PollIndexOf",
                                "VoteRecord",
                                "TallyOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            281,
                            279,
                            284,
                            283,
                            282,
                            285,
                            208,
                            192,
                            190
                        ]
                    },
                    "errors": [
                        {
                            "name": "AlreadyMember",
                            "doc": [
                                "Account is already a member."
                            ]
                        },
                        {
                            "name": "NotMember",
                            "doc": [
                                "Account is not a member."
                            ]
                        },
                        {
                            "name": "NotPolling",
                            "doc": [
                                "The given poll index is unknown or has closed."
                            ]
                        },
                        {
                            "name": "Ongoing",
                            "doc": [
                                "The given poll is still ongoing."
                            ]
                        },
                        {
                            "name": "NoneRemaining",
                            "doc": [
                                "There are no further records to be removed."
                            ]
                        },
                        {
                            "name": "Corruption",
                            "doc": [
                                "Unexpected error in state."
                            ]
                        },
                        {
                            "name": "RankTooLow",
                            "doc": [
                                "The member's rank is too low to vote."
                            ]
                        },
                        {
                            "name": "InvalidWitness",
                            "doc": [
                                "The information provided is incorrect."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "The origin is not sufficiently privileged to do the operation."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            475,
                            471,
                            469,
                            473,
                            480,
                            474,
                            477,
                            398,
                            378,
                            372
                        ]
                    },
                    "index": 18
                },
                {
                    "name": "FellowshipReferenda",
                    "prefix": "FellowshipReferenda",
                    "storage": [
                        {
                            "name": "ReferendumCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The next free referendum index, aka the number of referenda started so far."
                            ]
                        },
                        {
                            "name": "ReferendumInfoFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": [
                                        "pallet_referenda:types:ReferendumInfo@476",
                                        "pallet_referenda:types:ReferendumInfo@472",
                                        "pallet_referenda:types:ReferendumInfo@470",
                                        "pallet_referenda:types:ReferendumInfo@474",
                                        "pallet_referenda:types:ReferendumInfo@481",
                                        "pallet_referenda:types:ReferendumInfo@475",
                                        "pallet_referenda:types:ReferendumInfo@478",
                                        "pallet_referenda:types:ReferendumInfo@399",
                                        "pallet_referenda:types:ReferendumInfo@379",
                                        "pallet_referenda:types:ReferendumInfo@373"
                                    ],
                                    "keys_id": 4,
                                    "value_id": [
                                        476,
                                        472,
                                        470,
                                        474,
                                        481,
                                        475,
                                        478,
                                        399,
                                        379,
                                        373
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Information concerning any given referendum."
                            ]
                        },
                        {
                            "name": "TrackQueue",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "Vec<Tuple:U32U32>",
                                    "keys_id": [
                                        63,
                                        62,
                                        61,
                                        58
                                    ],
                                    "value_id": [
                                        478,
                                        474,
                                        472,
                                        476,
                                        483,
                                        477,
                                        480,
                                        401,
                                        381,
                                        375
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                                " conviction-weighted approvals.",
                                "",
                                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                            ]
                        },
                        {
                            "name": "DecidingCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "U32",
                                    "keys_id": [
                                        63,
                                        62,
                                        61,
                                        58
                                    ],
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The number of referenda being decided currently."
                            ]
                        },
                        {
                            "name": "MetadataOf",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "H256",
                                    "keys_id": 4,
                                    "value_id": [
                                        12,
                                        11
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The metadata is a general information concerning the referendum.",
                                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                                " dump or IPFS hash of a JSON file.",
                                "",
                                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                                " large preimages.",
                                " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1300",
                            "name": "submit",
                            "docs": [
                                "See [`Pallet::submit`].",
                                "Propose a referendum on a privileged action.",
                                "",
                                "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                                "  available.",
                                "- `proposal_origin`: The origin from which the proposal should be executed.",
                                "- `proposal`: The proposal.",
                                "- `enactment_moment`: The moment that the proposal should be enacted.",
                                "Emits `Submitted`."
                            ],
                            "args": [
                                {
                                    "name": "proposal_origin",
                                    "type": "vara_runtime:OriginCaller",
                                    "type_name": "Box<PalletsOriginOf>"
                                },
                                {
                                    "name": "proposal",
                                    "type": "frame_support:traits:preimages:Bounded",
                                    "type_name": "BoundedCallOf"
                                },
                                {
                                    "name": "enactment_moment",
                                    "type": "frame_support:traits:schedule:DispatchTime",
                                    "type_name": [
                                        "DispatchTime<BlockNumberFor>",
                                        "DispatchTime<BlockNumber>"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "1301",
                            "name": "place_decision_deposit",
                            "docs": [
                                "See [`Pallet::place_decision_deposit`].",
                                "Post the Decision Deposit for a referendum.",
                                "",
                                "- `origin`: must be `Signed` and the account must have funds available for the",
                                "  referendum's track's Decision Deposit.",
                                "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                                "  posted.",
                                "Emits `DecisionDepositPlaced`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1302",
                            "name": "refund_decision_deposit",
                            "docs": [
                                "See [`Pallet::refund_decision_deposit`].",
                                "Refund the Decision Deposit for a closed referendum back to the depositor.",
                                "",
                                "- `origin`: must be `Signed` or `Root`.",
                                "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                                "  refunded.",
                                "Emits `DecisionDepositRefunded`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1303",
                            "name": "cancel",
                            "docs": [
                                "See [`Pallet::cancel`].",
                                "Cancel an ongoing referendum.",
                                "",
                                "- `origin`: must be the `CancelOrigin`.",
                                "- `index`: The index of the referendum to be cancelled.",
                                "Emits `Cancelled`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1304",
                            "name": "kill",
                            "docs": [
                                "See [`Pallet::kill`].",
                                "Cancel an ongoing referendum and slash the deposits.",
                                "",
                                "- `origin`: must be the `KillOrigin`.",
                                "- `index`: The index of the referendum to be cancelled.",
                                "Emits `Killed` and `DepositSlashed`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1305",
                            "name": "nudge_referendum",
                            "docs": [
                                "See [`Pallet::nudge_referendum`].",
                                "Advance a referendum onto its next logical state. Only used internally.",
                                "",
                                "- `origin`: must be `Root`.",
                                "- `index`: the referendum to be advanced."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1306",
                            "name": "one_fewer_deciding",
                            "docs": [
                                "See [`Pallet::one_fewer_deciding`].",
                                "Advance a track onto its next logical state. Only used internally.",
                                "",
                                "- `origin`: must be `Root`.",
                                "- `track`: the track to be advanced.",
                                "Action item for when there is now one fewer referendum in the deciding phase and the",
                                "`DecidingCount` is not yet updated. This means that we should either:",
                                "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                                "- decrement `DecidingCount`."
                            ],
                            "args": [
                                {
                                    "name": "track",
                                    "type": "U16",
                                    "type_name": "TrackIdOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1307",
                            "name": "refund_submission_deposit",
                            "docs": [
                                "See [`Pallet::refund_submission_deposit`].",
                                "Refund the Submission Deposit for a closed referendum back to the depositor.",
                                "",
                                "- `origin`: must be `Signed` or `Root`.",
                                "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                                "  refunded.",
                                "Emits `SubmissionDepositRefunded`."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1308",
                            "name": "set_metadata",
                            "docs": [
                                "See [`Pallet::set_metadata`].",
                                "Set or clear metadata of a referendum.",
                                "",
                                "Parameters:",
                                "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                                "  metadata of a finished referendum.",
                                "- `index`:  The index of a referendum to set or clear metadata for.",
                                "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                },
                                {
                                    "name": "maybe_hash",
                                    "type": "option<H256>",
                                    "type_name": [
                                        "Option<Hash>",
                                        "Option<PreimageHash>"
                                    ]
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            133,
                            132,
                            137,
                            136,
                            131
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1300",
                            "name": "Submitted",
                            "docs": [
                                "A referendum has been submitted."
                            ],
                            "args": [
                                "U32",
                                "U16",
                                "frame_support:traits:preimages:Bounded"
                            ],
                            "args_name": [
                                "index",
                                "track",
                                "proposal"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "TrackIdOf",
                                "BoundedCallOf"
                            ]
                        },
                        {
                            "lookup": "1301",
                            "name": "DecisionDepositPlaced",
                            "docs": [
                                "The decision deposit has been placed."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1302",
                            "name": "DecisionDepositRefunded",
                            "docs": [
                                "The decision deposit has been refunded."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1303",
                            "name": "DepositSlashed",
                            "docs": [
                                "A deposit has been slashaed."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1304",
                            "name": "DecisionStarted",
                            "docs": [
                                "A referendum has moved into the deciding phase."
                            ],
                            "args": [
                                "U32",
                                "U16",
                                "frame_support:traits:preimages:Bounded",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "track",
                                "proposal",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "TrackIdOf",
                                "BoundedCallOf",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "1305",
                            "name": "ConfirmStarted",
                            "docs": null,
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1306",
                            "name": "ConfirmAborted",
                            "docs": null,
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1307",
                            "name": "Confirmed",
                            "docs": [
                                "A referendum has ended its confirmation phase and is ready for approval."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "1308",
                            "name": "Approved",
                            "docs": [
                                "A referendum has been approved and its proposal has been scheduled."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1309",
                            "name": "Rejected",
                            "docs": [
                                "A proposal has been rejected by referendum."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "130a",
                            "name": "TimedOut",
                            "docs": [
                                "A referendum has been timed out without being decided."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "130b",
                            "name": "Cancelled",
                            "docs": [
                                "A referendum has been cancelled."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "130c",
                            "name": "Killed",
                            "docs": [
                                "A referendum has been killed."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "130d",
                            "name": "SubmissionDepositRefunded",
                            "docs": [
                                "The submission deposit has been refunded."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "130e",
                            "name": "MetadataSet",
                            "docs": [
                                "Metadata for a referendum has been set."
                            ],
                            "args": [
                                "U32",
                                "H256"
                            ],
                            "args_name": [
                                "index",
                                "hash"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Hash",
                                "PreimageHash"
                            ]
                        },
                        {
                            "lookup": "130f",
                            "name": "MetadataCleared",
                            "docs": [
                                "Metadata for a referendum has been cleared."
                            ],
                            "args": [
                                "U32",
                                "H256"
                            ],
                            "args_name": [
                                "index",
                                "hash"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Hash",
                                "PreimageHash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            284,
                            282,
                            287,
                            286,
                            285,
                            288,
                            211,
                            195,
                            193
                        ]
                    },
                    "constants": [
                        {
                            "name": "SubmissionDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00000000000000000000000000000000",
                            "docs": [
                                " The minimum amount to be used as a deposit for a public referendum proposal."
                            ]
                        },
                        {
                            "name": "MaxQueued",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " Maximum size of the referendum queue for a single track."
                            ]
                        },
                        {
                            "name": "UndecidingTimeout",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80130300",
                            "docs": [
                                " The number of blocks after submission that a referendum must begin being decided by.",
                                " Once this passes, then anyone may cancel the referendum."
                            ]
                        },
                        {
                            "name": "AlarmInterval",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "01000000",
                            "docs": [
                                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                                " automatic referendum status changes. Explicit servicing instructions are unaffected."
                            ]
                        },
                        {
                            "name": "Tracks",
                            "type": "Vec<Tuple:U16pallet_referenda:types:TrackInfo>",
                            "type_value": [
                                464,
                                460,
                                458,
                                462,
                                469,
                                463,
                                466,
                                387,
                                367,
                                361
                            ],
                            "constants_value": [
                                "2800002863616e646964617465730a0000000080c6a47e8d03000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d01001c6d656d626572730a00000000407a10f35a00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d02002c70726f66696369656e74730a00000000407a10f35a00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d03001c66656c6c6f77730a00000000407a10f35a00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d04003873656e696f722066656c6c6f77730a00000000407a10f35a00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d05001c657870657274730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d06003873656e696f7220657870657274730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d07001c6d6173746572730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d08003873656e696f72206d6173746572730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d0900346772616e64206d6173746572730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d",
                                "2800002863616e646964617465730a0000000080e03779c311000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d01001c6d656d626572730a00000000406352bfc601000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d02002c70726f66696369656e74730a00000000406352bfc601000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d03001c66656c6c6f77730a00000000406352bfc601000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d04003873656e696f722066656c6c6f77730a00000000406352bfc601000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d05001c657870657274730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d06003873656e696f7220657870657274730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d07001c6d6173746572730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d08003873656e696f72206d6173746572730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d0900346772616e64206d6173746572730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d",
                                "2800002863616e646964617465730a00000000008d49fd1a07000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d01001c6d656d626572730a0000000080f420e6b500000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d02002c70726f66696369656e74730a0000000080f420e6b500000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d03001c66656c6c6f77730a0000000080f420e6b500000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d04003873656e696f722066656c6c6f77730a0000000080f420e6b500000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d05001c657870657274730a0000000040e59c301200000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d06003873656e696f7220657870657274730a0000000040e59c301200000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d07001c6d6173746572730a0000000040e59c301200000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d08003873656e696f72206d6173746572730a0000000040e59c301200000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d0900346772616e64206d6173746572730a0000000040e59c301200000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d",
                                "1000002863616e646964617465730a00000000008d49fd1a07000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d01001c66656c6c6f77730a0000000080f420e6b500000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d02001c657870657274730a0000000040e59c301200000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d03001c6d6173746572730a0000000040e59c301200000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d"
                            ],
                            "docs": [
                                " Information concerning the different referendum tracks."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotOngoing",
                            "doc": [
                                "Referendum is not ongoing."
                            ]
                        },
                        {
                            "name": "HasDeposit",
                            "doc": [
                                "Referendum's decision deposit is already paid."
                            ]
                        },
                        {
                            "name": "BadTrack",
                            "doc": [
                                "The track identifier given was invalid."
                            ]
                        },
                        {
                            "name": "Full",
                            "doc": [
                                "There are already a full complement of referenda in progress for this track."
                            ]
                        },
                        {
                            "name": "QueueEmpty",
                            "doc": [
                                "The queue of the track is empty."
                            ]
                        },
                        {
                            "name": "BadReferendum",
                            "doc": [
                                "The referendum index provided is invalid in this context."
                            ]
                        },
                        {
                            "name": "NothingToDo",
                            "doc": [
                                "There was nothing to do in the advancement."
                            ]
                        },
                        {
                            "name": "NoTrack",
                            "doc": [
                                "No track exists for the proposal origin."
                            ]
                        },
                        {
                            "name": "Unfinished",
                            "doc": [
                                "Any deposit cannot be refunded until after the decision is over."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "The deposit refunder is not the depositor."
                            ]
                        },
                        {
                            "name": "NoDeposit",
                            "doc": [
                                "The deposit cannot be refunded since none was made."
                            ]
                        },
                        {
                            "name": "BadStatus",
                            "doc": [
                                "The referendum status is invalid for this operation."
                            ]
                        },
                        {
                            "name": "PreimageNotExist",
                            "doc": [
                                "The preimage does not exist."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            479,
                            475,
                            473,
                            477,
                            484,
                            478,
                            481,
                            402,
                            382,
                            376
                        ]
                    },
                    "index": 19
                },
                {
                    "name": "Origins",
                    "prefix": "",
                    "storage": null,
                    "errors": null,
                    "errors_value": null,
                    "index": 20
                },
                {
                    "name": "Whitelist",
                    "prefix": "Whitelist",
                    "storage": [
                        {
                            "name": "WhitelistedCall",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": "NULL",
                                    "keys_id": [
                                        12,
                                        11
                                    ],
                                    "value_id": [
                                        58,
                                        60,
                                        59,
                                        91
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1500",
                            "name": "whitelist_call",
                            "docs": [
                                "See [`Pallet::whitelist_call`].",
                                null
                            ],
                            "args": [
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": [
                                        "Hash",
                                        "PreimageHash"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "1501",
                            "name": "remove_whitelisted_call",
                            "docs": [
                                "See [`Pallet::remove_whitelisted_call`].",
                                null
                            ],
                            "args": [
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": [
                                        "Hash",
                                        "PreimageHash"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "1502",
                            "name": "dispatch_whitelisted_call",
                            "docs": [
                                "See [`Pallet::dispatch_whitelisted_call`].",
                                null
                            ],
                            "args": [
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": [
                                        "Hash",
                                        "PreimageHash"
                                    ]
                                },
                                {
                                    "name": "call_encoded_len",
                                    "type": "U32",
                                    "type_name": "u32"
                                },
                                {
                                    "name": "call_weight_witness",
                                    "type": "sp_weights:weight_v2:Weight",
                                    "type_name": "Weight"
                                }
                            ]
                        },
                        {
                            "lookup": "1503",
                            "name": "dispatch_whitelisted_call_with_preimage",
                            "docs": [
                                "See [`Pallet::dispatch_whitelisted_call_with_preimage`].",
                                null
                            ],
                            "args": [
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            134,
                            133,
                            138,
                            137,
                            132
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1500",
                            "name": "CallWhitelisted",
                            "docs": null,
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "call_hash"
                            ],
                            "args_type_name": [
                                "Hash",
                                "PreimageHash"
                            ]
                        },
                        {
                            "lookup": "1501",
                            "name": "WhitelistedCallRemoved",
                            "docs": null,
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "call_hash"
                            ],
                            "args_type_name": [
                                "Hash",
                                "PreimageHash"
                            ]
                        },
                        {
                            "lookup": "1502",
                            "name": "WhitelistedCallDispatched",
                            "docs": null,
                            "args": [
                                "H256",
                                "Result<frame_support:dispatch:PostDispatchInfo,sp_runtime:DispatchErrorWithPostInfo>"
                            ],
                            "args_name": [
                                "call_hash",
                                "result"
                            ],
                            "args_type_name": [
                                "Hash",
                                "DispatchResultWithPostInfo",
                                "PreimageHash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            285,
                            283,
                            288,
                            287,
                            286,
                            289,
                            212,
                            196,
                            194
                        ]
                    },
                    "errors": [
                        {
                            "name": "UnavailablePreImage",
                            "doc": [
                                "The preimage of the call hash could not be loaded."
                            ]
                        },
                        {
                            "name": "UndecodableCall",
                            "doc": [
                                "The call could not be decoded."
                            ]
                        },
                        {
                            "name": "InvalidCallWeightWitness",
                            "doc": [
                                "The weight of the decoded call was higher than the witness."
                            ]
                        },
                        {
                            "name": "CallIsNotWhitelisted",
                            "doc": [
                                "The call was not whitelisted."
                            ]
                        },
                        {
                            "name": "CallAlreadyWhitelisted",
                            "doc": [
                                "The call was already whitelisted; No-Op."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            480,
                            476,
                            474,
                            478,
                            485,
                            479,
                            482,
                            403,
                            383,
                            377
                        ]
                    },
                    "index": 21
                },
                {
                    "name": "Scheduler",
                    "prefix": "Scheduler",
                    "storage": [
                        {
                            "name": "IncompleteSince",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Agenda",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<option<pallet_scheduler:Scheduled>>",
                                    "keys_id": 4,
                                    "value_id": [
                                        481,
                                        477,
                                        475,
                                        479,
                                        486,
                                        480,
                                        483,
                                        406,
                                        386,
                                        379
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Items to be executed, indexed by the block number that they should be executed on."
                            ]
                        },
                        {
                            "name": "Lookup",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "Tuple:U32U32",
                                    "keys_id": 1,
                                    "value_id": [
                                        137,
                                        136,
                                        141,
                                        140,
                                        138
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Lookup from a name to the block number and index of the task.",
                                "",
                                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                                " identities."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1600",
                            "name": "schedule",
                            "docs": [
                                "See [`Pallet::schedule`].",
                                "Anonymously schedule a task."
                            ],
                            "args": [
                                {
                                    "name": "when",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "option<Tuple:U32U32>",
                                    "type_name": [
                                        "Option<schedule::Period<BlockNumberFor>>",
                                        "Option<schedule::Period<BlockNumber>>"
                                    ]
                                },
                                {
                                    "name": "priority",
                                    "type": "U8",
                                    "type_name": "schedule::Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1601",
                            "name": "cancel",
                            "docs": [
                                "See [`Pallet::cancel`].",
                                "Cancel an anonymously scheduled task."
                            ],
                            "args": [
                                {
                                    "name": "when",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                },
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "1602",
                            "name": "schedule_named",
                            "docs": [
                                "See [`Pallet::schedule_named`].",
                                "Schedule a named task."
                            ],
                            "args": [
                                {
                                    "name": "id",
                                    "type": "[U8; 32]",
                                    "type_name": "TaskName"
                                },
                                {
                                    "name": "when",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "option<Tuple:U32U32>",
                                    "type_name": [
                                        "Option<schedule::Period<BlockNumberFor>>",
                                        "Option<schedule::Period<BlockNumber>>"
                                    ]
                                },
                                {
                                    "name": "priority",
                                    "type": "U8",
                                    "type_name": "schedule::Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1603",
                            "name": "cancel_named",
                            "docs": [
                                "See [`Pallet::cancel_named`].",
                                "Cancel a named scheduled task."
                            ],
                            "args": [
                                {
                                    "name": "id",
                                    "type": "[U8; 32]",
                                    "type_name": "TaskName"
                                }
                            ]
                        },
                        {
                            "lookup": "1604",
                            "name": "schedule_after",
                            "docs": [
                                "See [`Pallet::schedule_after`].",
                                "Anonymously schedule a task after a delay.",
                                "",
                                "# <weight>",
                                "Same as [`schedule`].",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "after",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "option<Tuple:U32U32>",
                                    "type_name": [
                                        "Option<schedule::Period<BlockNumberFor>>",
                                        "Option<schedule::Period<BlockNumber>>"
                                    ]
                                },
                                {
                                    "name": "priority",
                                    "type": "U8",
                                    "type_name": "schedule::Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1605",
                            "name": "schedule_named_after",
                            "docs": [
                                "See [`Pallet::schedule_named_after`].",
                                "Schedule a named task after a delay.",
                                "",
                                "# <weight>",
                                "Same as [`schedule_named`](Self::schedule_named).",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "id",
                                    "type": "[U8; 32]",
                                    "type_name": "TaskName"
                                },
                                {
                                    "name": "after",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "option<Tuple:U32U32>",
                                    "type_name": [
                                        "Option<schedule::Period<BlockNumberFor>>",
                                        "Option<schedule::Period<BlockNumber>>"
                                    ]
                                },
                                {
                                    "name": "priority",
                                    "type": "U8",
                                    "type_name": "schedule::Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            135,
                            134,
                            139,
                            138,
                            136
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1600",
                            "name": "Scheduled",
                            "docs": [
                                "Scheduled some task."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "when",
                                "index"
                            ],
                            "args_type_name": [
                                "BlockNumberFor",
                                "u32",
                                "BlockNumber"
                            ]
                        },
                        {
                            "lookup": "1601",
                            "name": "Canceled",
                            "docs": [
                                "Canceled some task."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "when",
                                "index"
                            ],
                            "args_type_name": [
                                "BlockNumberFor",
                                "u32",
                                "BlockNumber"
                            ]
                        },
                        {
                            "lookup": "1602",
                            "name": "Dispatched",
                            "docs": [
                                "Dispatched some task."
                            ],
                            "args": [
                                "Tuple:U32U32",
                                "option<[U8; 32]>",
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "task",
                                "id",
                                "result"
                            ],
                            "args_type_name": [
                                "TaskAddress<BlockNumberFor>",
                                "Option<TaskName>",
                                "DispatchResult",
                                "TaskAddress<BlockNumber>"
                            ]
                        },
                        {
                            "lookup": "1603",
                            "name": "CallUnavailable",
                            "docs": [
                                "The call for the provided hash was not found so the task has been aborted."
                            ],
                            "args": [
                                "Tuple:U32U32",
                                "option<[U8; 32]>"
                            ],
                            "args_name": [
                                "task",
                                "id"
                            ],
                            "args_type_name": [
                                "TaskAddress<BlockNumberFor>",
                                "Option<TaskName>",
                                "TaskAddress<BlockNumber>"
                            ]
                        },
                        {
                            "lookup": "1604",
                            "name": "PeriodicFailed",
                            "docs": [
                                "The given task was unable to be renewed since the agenda is full at that block."
                            ],
                            "args": [
                                "Tuple:U32U32",
                                "option<[U8; 32]>"
                            ],
                            "args_name": [
                                "task",
                                "id"
                            ],
                            "args_type_name": [
                                "TaskAddress<BlockNumberFor>",
                                "Option<TaskName>",
                                "TaskAddress<BlockNumber>"
                            ]
                        },
                        {
                            "lookup": "1605",
                            "name": "PermanentlyOverweight",
                            "docs": [
                                "The given task can never be executed since it is overweight."
                            ],
                            "args": [
                                "Tuple:U32U32",
                                "option<[U8; 32]>"
                            ],
                            "args_name": [
                                "task",
                                "id"
                            ],
                            "args_type_name": [
                                "TaskAddress<BlockNumberFor>",
                                "Option<TaskName>",
                                "TaskAddress<BlockNumber>"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            290,
                            288,
                            293,
                            292,
                            291,
                            294,
                            221,
                            205,
                            202
                        ]
                    },
                    "constants": [
                        {
                            "name": "MaximumWeight",
                            "type": "sp_weights:weight_v2:Weight",
                            "type_value": [
                                9,
                                8
                            ],
                            "constants_value": [
                                "070040b743ba13cccccccccccccccc",
                                "0755d5242d7c13cccccccccccccccc"
                            ],
                            "docs": [
                                " The maximum weight that may be scheduled per block for any dispatchables."
                            ]
                        },
                        {
                            "name": "MaxScheduledPerBlock",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00020000",
                            "docs": [
                                " The maximum number of scheduled calls in the queue for a single block.",
                                "",
                                " NOTE:",
                                " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
                                " higher limit under `runtime-benchmarks` feature."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "FailedToSchedule",
                            "doc": [
                                "Failed to schedule a call"
                            ]
                        },
                        {
                            "name": "NotFound",
                            "doc": [
                                "Cannot find the scheduled call."
                            ]
                        },
                        {
                            "name": "TargetBlockNumberInPast",
                            "doc": [
                                "Given target block number is in the past."
                            ]
                        },
                        {
                            "name": "RescheduleNoChange",
                            "doc": [
                                "Reschedule failed because it does not change scheduled time."
                            ]
                        },
                        {
                            "name": "Named",
                            "doc": [
                                "Attempt to use a non-named function on a named task."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            485,
                            481,
                            479,
                            483,
                            490,
                            484,
                            487,
                            410,
                            390,
                            383
                        ]
                    },
                    "index": 22
                },
                {
                    "name": "Preimage",
                    "prefix": "Preimage",
                    "storage": [
                        {
                            "name": "StatusFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": [
                                        "pallet_preimage:OldRequestStatus",
                                        "pallet_preimage:RequestStatus"
                                    ],
                                    "keys_id": [
                                        12,
                                        11
                                    ],
                                    "value_id": [
                                        486,
                                        482,
                                        480,
                                        484,
                                        491,
                                        485,
                                        488,
                                        411,
                                        391,
                                        384
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The request status of a given hash."
                            ]
                        },
                        {
                            "name": "RequestStatusFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": "pallet_preimage:RequestStatus",
                                    "keys_id": 12,
                                    "value_id": [
                                        488,
                                        484
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The request status of a given hash."
                            ]
                        },
                        {
                            "name": "PreimageFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "H256",
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": [
                                        438,
                                        434,
                                        432,
                                        436,
                                        443,
                                        437,
                                        440,
                                        362,
                                        342,
                                        336
                                    ],
                                    "value_id": [
                                        492,
                                        488,
                                        482,
                                        486,
                                        493,
                                        487,
                                        490,
                                        413,
                                        393,
                                        386
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1700",
                            "name": "note_preimage",
                            "docs": [
                                "See [`Pallet::note_preimage`].",
                                "Register a preimage on-chain.",
                                "",
                                "If the preimage was previously requested, no fees or deposits are taken for providing",
                                "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                            ],
                            "args": [
                                {
                                    "name": "bytes",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "1701",
                            "name": "unnote_preimage",
                            "docs": [
                                "See [`Pallet::unnote_preimage`].",
                                "Clear an unrequested preimage from the runtime storage.",
                                "",
                                "If `len` is provided, then it will be a much cheaper operation.",
                                "- `hash`: The hash of the preimage to be removed from the store.",
                                "- `len`: The length of the preimage of `hash`."
                            ],
                            "args": [
                                {
                                    "name": "hash",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "1702",
                            "name": "request_preimage",
                            "docs": [
                                "See [`Pallet::request_preimage`].",
                                "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                                "",
                                "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                                "a user may have paid, and take the control of the preimage out of their hands."
                            ],
                            "args": [
                                {
                                    "name": "hash",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "1703",
                            "name": "unrequest_preimage",
                            "docs": [
                                "See [`Pallet::unrequest_preimage`].",
                                "Clear a previously made request for a preimage.",
                                "",
                                "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                            ],
                            "args": [
                                {
                                    "name": "hash",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "1704",
                            "name": "ensure_updated",
                            "docs": [
                                "See [`Pallet::ensure_updated`]."
                            ],
                            "args": [
                                {
                                    "name": "hashes",
                                    "type": "Vec<H256>",
                                    "type_name": "Vec<Hash>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            138,
                            137,
                            142,
                            141,
                            139
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1700",
                            "name": "Noted",
                            "docs": [
                                "A preimage has been noted."
                            ],
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "hash"
                            ],
                            "args_type_name": [
                                "Hash"
                            ]
                        },
                        {
                            "lookup": "1701",
                            "name": "Requested",
                            "docs": [
                                "A preimage has been requested."
                            ],
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "hash"
                            ],
                            "args_type_name": [
                                "Hash"
                            ]
                        },
                        {
                            "lookup": "1702",
                            "name": "Cleared",
                            "docs": [
                                "A preimage has ben cleared."
                            ],
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "hash"
                            ],
                            "args_type_name": [
                                "Hash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            292,
                            290,
                            295,
                            294,
                            293,
                            296,
                            223,
                            207,
                            204
                        ]
                    },
                    "errors": [
                        {
                            "name": "TooBig",
                            "doc": [
                                "Preimage is too large to store on-chain."
                            ]
                        },
                        {
                            "name": "AlreadyNoted",
                            "doc": [
                                "Preimage has already been noted on-chain."
                            ]
                        },
                        {
                            "name": "NotAuthorized",
                            "doc": [
                                "The user is not authorized to perform this action."
                            ]
                        },
                        {
                            "name": "NotNoted",
                            "doc": [
                                "The preimage cannot be removed since it has not yet been noted."
                            ]
                        },
                        {
                            "name": "Requested",
                            "doc": [
                                "A preimage may not be removed when there are outstanding requests."
                            ]
                        },
                        {
                            "name": "NotRequested",
                            "doc": [
                                "The preimage request cannot be removed since no outstanding requests exist."
                            ]
                        },
                        {
                            "name": "TooMany",
                            "doc": [
                                "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
                            ]
                        },
                        {
                            "name": "TooFew",
                            "doc": [
                                "Too few hashes were requested to be upgraded (i.e. zero)."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            493,
                            489,
                            483,
                            487,
                            494,
                            488,
                            491,
                            414,
                            394,
                            387
                        ]
                    },
                    "index": 23
                },
                {
                    "name": "Identity",
                    "prefix": "Identity",
                    "storage": [
                        {
                            "name": "IdentityOf",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_identity:types:Registration",
                                    "keys_id": 0,
                                    "value_id": [
                                        494,
                                        490,
                                        484,
                                        488,
                                        495,
                                        489,
                                        492,
                                        415,
                                        395,
                                        388
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Information that is pertinent to identify the entity behind an account.",
                                "",
                                "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
                            ]
                        },
                        {
                            "name": "SuperOf",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Tuple:AccountIdpallet_identity:types:Data",
                                    "keys_id": 0,
                                    "value_id": [
                                        178,
                                        177,
                                        176,
                                        181,
                                        180
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                                " context. If the account is not some other account's sub-identity, then just `None`."
                            ]
                        },
                        {
                            "name": "SubsOf",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": [
                                        "Tuple:U128bounded_collections:bounded_vec:BoundedVec@499",
                                        "Tuple:U128bounded_collections:bounded_vec:BoundedVec@495",
                                        "Tuple:U128bounded_collections:bounded_vec:BoundedVec@489",
                                        "Tuple:U128bounded_collections:bounded_vec:BoundedVec@493",
                                        "Tuple:U128bounded_collections:bounded_vec:BoundedVec@500",
                                        "Tuple:U128bounded_collections:bounded_vec:BoundedVec@494",
                                        "Tuple:U128bounded_collections:bounded_vec:BoundedVec@497",
                                        "Tuple:U128bounded_collections:bounded_vec:BoundedVec@420",
                                        "Tuple:U128bounded_collections:bounded_vec:BoundedVec@400",
                                        "Tuple:U128Vec<AccountId>"
                                    ],
                                    "keys_id": 0,
                                    "value_id": [
                                        498,
                                        494,
                                        488,
                                        492,
                                        499,
                                        493,
                                        496,
                                        419,
                                        399,
                                        392
                                    ]
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000",
                            "docs": [
                                " Alternative \"sub\" identities of this account.",
                                "",
                                " The first item is the deposit, the second is a vector of the accounts.",
                                "",
                                "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
                            ]
                        },
                        {
                            "name": "Registrars",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<option<pallet_identity:types:RegistrarInfo>>",
                                "PlainTypeValue": [
                                    500,
                                    496,
                                    490,
                                    494,
                                    501,
                                    495,
                                    498,
                                    421,
                                    401,
                                    394
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The set of registrars. Not expected to get very big as can only be added through a",
                                " special origin (likely a council motion).",
                                "",
                                " The index into this can be cast to `RegistrarIndex` to get a valid value."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1800",
                            "name": "add_registrar",
                            "docs": [
                                "See [`Pallet::add_registrar`].",
                                "Add a registrar to the system.",
                                "",
                                "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                                "- `account`: the account of the registrar.",
                                "Emits `RegistrarAdded` if successful.",
                                "## Complexity",
                                "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                                "# <weight>",
                                "- One storage mutation (codec `O(R)`).",
                                "- One event.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "account",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1801",
                            "name": "set_identity",
                            "docs": [
                                "See [`Pallet::set_identity`].",
                                "Set an account's identity information and reserve the appropriate deposit.",
                                "",
                                "If the account already has identity information, the deposit is taken as part payment",
                                "for the new deposit.",
                                "The dispatch origin for this call must be _Signed_.",
                                "- `info`: The identity information.",
                                "Emits `IdentitySet` if successful.",
                                "## Complexity",
                                "- `O(X + X' + R)`",
                                "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                                "  - where `R` judgements-count (registrar-count-bounded)",
                                "# <weight>",
                                "- One balance reserve operation.",
                                "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                                "- One event.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "info",
                                    "type": [
                                        "pallet_identity:simple:IdentityInfo",
                                        "pallet_identity:types:IdentityInfo"
                                    ],
                                    "type_name": [
                                        "Box<IdentityInformation>",
                                        "Box<IdentityInfo<MaxAdditionalFields>>"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "1802",
                            "name": "set_subs",
                            "docs": [
                                "See [`Pallet::set_subs`].",
                                "Set the sub-accounts of the sender.",
                                "",
                                "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                                "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                                "identity.",
                                "- `subs`: The identity's (new) sub-accounts.",
                                "## Complexity",
                                "- `O(P + S)`",
                                "  - where `P` old-subs-count (hard- and deposit-bounded).",
                                "  - where `S` subs-count (hard- and deposit-bounded).",
                                "# <weight>",
                                "- At most one balance operations.",
                                "- DB:",
                                "  - `P + S` storage mutations (codec complexity `O(1)`)",
                                "  - One storage read (codec complexity `O(P)`).",
                                "  - One storage write (codec complexity `O(S)`).",
                                "  - One storage-exists (`IdentityOf::contains_key`).",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "subs",
                                    "type": "Vec<Tuple:AccountIdpallet_identity:types:Data>",
                                    "type_name": "Vec<(AccountId, Data)>"
                                }
                            ]
                        },
                        {
                            "lookup": "1803",
                            "name": "clear_identity",
                            "docs": [
                                "See [`Pallet::clear_identity`].",
                                "Clear an account's identity info and all sub-accounts and return all deposits.",
                                "",
                                "Payment: All reserved balances on the account are returned.",
                                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                                "identity.",
                                "Emits `IdentityCleared` if successful.",
                                "## Complexity",
                                "- `O(R + S + X)`",
                                "  - where `R` registrar-count (governance-bounded).",
                                "  - where `S` subs-count (hard- and deposit-bounded).",
                                "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                                "# <weight>",
                                "- One balance-unreserve operation.",
                                "- `2` storage reads and `S + 2` storage deletions.",
                                "- One event.",
                                "# </weight>"
                            ],
                            "args": null
                        },
                        {
                            "lookup": "1804",
                            "name": "request_judgement",
                            "docs": [
                                "See [`Pallet::request_judgement`].",
                                "Request a judgement from a registrar.",
                                "",
                                "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                                "given.",
                                "The dispatch origin for this call must be _Signed_ and the sender must have a",
                                "registered identity.",
                                "- `reg_index`: The index of the registrar whose judgement is requested.",
                                "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                                "```nocompile",
                                "Self::registrars().get(reg_index).unwrap().fee",
                                "```",
                                "Emits `JudgementRequested` if successful.",
                                "## Complexity",
                                "- `O(R + X)`.",
                                "  - where `R` registrar-count (governance-bounded).",
                                "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                                "# <weight>",
                                "- One balance-reserve operation.",
                                "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                                "- One event.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "reg_index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "max_fee",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1805",
                            "name": "cancel_request",
                            "docs": [
                                "See [`Pallet::cancel_request`].",
                                "Cancel a previous request.",
                                "",
                                "Payment: A previously reserved deposit is returned on success.",
                                "The dispatch origin for this call must be _Signed_ and the sender must have a",
                                "registered identity.",
                                "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                                "Emits `JudgementUnrequested` if successful.",
                                "## Complexity",
                                "- `O(R + X)`.",
                                "  - where `R` registrar-count (governance-bounded).",
                                "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                                "# <weight>",
                                "- One balance-reserve operation.",
                                "- One storage mutation `O(R + X)`.",
                                "- One event",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "reg_index",
                                    "type": "U32",
                                    "type_name": "RegistrarIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1806",
                            "name": "set_fee",
                            "docs": [
                                "See [`Pallet::set_fee`].",
                                "Set the fee required for a judgement to be requested from a registrar.",
                                "",
                                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                                "of the registrar whose index is `index`.",
                                "- `index`: the index of the registrar whose fee is to be set.",
                                "- `fee`: the new fee.",
                                "## Complexity",
                                "- `O(R)`.",
                                "  - where `R` registrar-count (governance-bounded).",
                                "# <weight>",
                                "- One storage mutation `O(R)`.",
                                "0x2d2042656e63686d61726b3a20372e333135202b2052202a20302e33323920c2b57320286d696e207371756172657320616e616c7973697329",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "fee",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1807",
                            "name": "set_account_id",
                            "docs": [
                                "See [`Pallet::set_account_id`].",
                                "Change the account associated with a registrar.",
                                "",
                                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                                "of the registrar whose index is `index`.",
                                "- `index`: the index of the registrar whose fee is to be set.",
                                "- `new`: the new account ID.",
                                "## Complexity",
                                "- `O(R)`.",
                                "  - where `R` registrar-count (governance-bounded).",
                                "# <weight>",
                                "- One storage mutation `O(R)`.",
                                "0x2d2042656e63686d61726b3a20382e383233202b2052202a20302e333220c2b57320286d696e207371756172657320616e616c7973697329",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "new",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1808",
                            "name": "set_fields",
                            "docs": [
                                "See [`Pallet::set_fields`].",
                                "Set the field information for a registrar.",
                                "",
                                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                                "of the registrar whose index is `index`.",
                                "- `index`: the index of the registrar whose fee is to be set.",
                                "- `fields`: the fields that the registrar concerns themselves with.",
                                "## Complexity",
                                "- `O(R)`.",
                                "  - where `R` registrar-count (governance-bounded).",
                                "# <weight>",
                                "- One storage mutation `O(R)`.",
                                "0x2d2042656e63686d61726b3a20372e343634202b2052202a20302e33323520c2b57320286d696e207371756172657320616e616c7973697329",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "fields",
                                    "type": "U64",
                                    "type_name": [
                                        "IdentityFields<<IdentityInformation as IdentityInformationProvider> ::IdentityField,>",
                                        "IdentityFields"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "1809",
                            "name": "provide_judgement",
                            "docs": [
                                "See [`Pallet::provide_judgement`].",
                                "Provide a judgement for an account's identity.",
                                "",
                                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                                "of the registrar whose index is `reg_index`.",
                                "- `reg_index`: the index of the registrar whose judgement is being made.",
                                "- `target`: the account whose identity the judgement is upon. This must be an account",
                                "  with a registered identity.",
                                "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                                "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
                                "Emits `JudgementGiven` if successful.",
                                "## Complexity",
                                "- `O(R + X)`.",
                                "  - where `R` registrar-count (governance-bounded).",
                                "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                                "# <weight>",
                                "- One balance-transfer operation.",
                                "- Up to one account-lookup operation.",
                                "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                                "- One event.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "reg_index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "judgement",
                                    "type": "pallet_identity:types:Judgement",
                                    "type_name": "Judgement<BalanceOf>"
                                },
                                {
                                    "name": "identity",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "180a",
                            "name": "kill_identity",
                            "docs": [
                                "See [`Pallet::kill_identity`].",
                                "Remove an account's identity and sub-account information and slash the deposits.",
                                "",
                                "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                                "`Slash`. Verification request deposits are not returned; they should be cancelled",
                                "manually using `cancel_request`.",
                                "The dispatch origin for this call must match `T::ForceOrigin`.",
                                "- `target`: the account whose identity the judgement is upon. This must be an account",
                                "  with a registered identity.",
                                "Emits `IdentityKilled` if successful.",
                                "## Complexity",
                                "- `O(R + S + X)`",
                                "  - where `R` registrar-count (governance-bounded).",
                                "  - where `S` subs-count (hard- and deposit-bounded).",
                                "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                                "# <weight>",
                                "- `O(R + S + X)`.",
                                "- One balance-reserve operation.",
                                "- `S + 2` storage mutations.",
                                "- One event.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "180b",
                            "name": "add_sub",
                            "docs": [
                                "See [`Pallet::add_sub`].",
                                "Add the given account to the sender's subs.",
                                "",
                                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                                "to the sender.",
                                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                                "sub identity of `sub`."
                            ],
                            "args": [
                                {
                                    "name": "sub",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "data",
                                    "type": "pallet_identity:types:Data",
                                    "type_name": "Data"
                                }
                            ]
                        },
                        {
                            "lookup": "180c",
                            "name": "rename_sub",
                            "docs": [
                                "See [`Pallet::rename_sub`].",
                                "Alter the associated name of the given sub-account.",
                                "",
                                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                                "sub identity of `sub`."
                            ],
                            "args": [
                                {
                                    "name": "sub",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "data",
                                    "type": "pallet_identity:types:Data",
                                    "type_name": "Data"
                                }
                            ]
                        },
                        {
                            "lookup": "180d",
                            "name": "remove_sub",
                            "docs": [
                                "See [`Pallet::remove_sub`].",
                                "Remove the given account from the sender's subs.",
                                "",
                                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                                "to the sender.",
                                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                                "sub identity of `sub`."
                            ],
                            "args": [
                                {
                                    "name": "sub",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "180e",
                            "name": "quit_sub",
                            "docs": [
                                "See [`Pallet::quit_sub`].",
                                "Remove the sender as a sub-account.",
                                "",
                                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                                "to the sender (*not* the original depositor).",
                                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                                "super-identity.",
                                "NOTE: This should not normally be used, but is provided in the case that the non-",
                                "controller of an account is maliciously registered as a sub-account."
                            ],
                            "args": null
                        }
                    ],
                    "calls_value": {
                        "type": [
                            140,
                            139,
                            138,
                            143,
                            142
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1800",
                            "name": "IdentitySet",
                            "docs": [
                                "A name was set or reset (which will remove all judgements)."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "who"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1801",
                            "name": "IdentityCleared",
                            "docs": [
                                "A name was cleared, and the given balance returned."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1802",
                            "name": "IdentityKilled",
                            "docs": [
                                "A name was removed and the given balance slashed."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1803",
                            "name": "JudgementRequested",
                            "docs": [
                                "A judgement was asked from a registrar."
                            ],
                            "args": [
                                "AccountId",
                                "U32"
                            ],
                            "args_name": [
                                "who",
                                "registrar_index"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "RegistrarIndex"
                            ]
                        },
                        {
                            "lookup": "1804",
                            "name": "JudgementUnrequested",
                            "docs": [
                                "A judgement request was retracted."
                            ],
                            "args": [
                                "AccountId",
                                "U32"
                            ],
                            "args_name": [
                                "who",
                                "registrar_index"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "RegistrarIndex"
                            ]
                        },
                        {
                            "lookup": "1805",
                            "name": "JudgementGiven",
                            "docs": [
                                "A judgement was given by a registrar."
                            ],
                            "args": [
                                "AccountId",
                                "U32"
                            ],
                            "args_name": [
                                "target",
                                "registrar_index"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "RegistrarIndex"
                            ]
                        },
                        {
                            "lookup": "1806",
                            "name": "RegistrarAdded",
                            "docs": [
                                "A registrar was added."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "registrar_index"
                            ],
                            "args_type_name": [
                                "RegistrarIndex"
                            ]
                        },
                        {
                            "lookup": "1807",
                            "name": "SubIdentityAdded",
                            "docs": [
                                "A sub-identity was added to an identity and the deposit paid."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "sub",
                                "main",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1808",
                            "name": "SubIdentityRemoved",
                            "docs": [
                                "A sub-identity was removed from an identity and the deposit freed."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "sub",
                                "main",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1809",
                            "name": "SubIdentityRevoked",
                            "docs": [
                                "A sub-identity was cleared, and the given deposit repatriated from the",
                                "main identity account to the sub-identity account."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "sub",
                                "main",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "BalanceOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            293,
                            291,
                            296,
                            295,
                            294,
                            297,
                            224,
                            208,
                            205
                        ]
                    },
                    "constants": [
                        {
                            "name": "BasicDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00407a10f35a00000000000000000000",
                                "00406352bfc601000000000000000000",
                                "0080f420e6b500000000000000000000"
                            ],
                            "docs": [
                                " The amount held on deposit for a registered identity"
                            ]
                        },
                        {
                            "name": "FieldDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00901ec4bc1600000000000000000000",
                                "00d098d4af7100000000000000000000",
                                "00203d88792d00000000000000000000"
                            ],
                            "docs": [
                                " The amount held on deposit per additional field for a registered identity."
                            ]
                        },
                        {
                            "name": "SubAccountDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "0040e59c301200000000000000000000",
                                "00407a10f35a00000000000000000000",
                                "0080ca39612400000000000000000000"
                            ],
                            "docs": [
                                " The amount held on deposit for a registered subaccount. This should account for the fact",
                                " that one storage item's value will increase by the size of an account ID, and there will",
                                " be another trie item whose value is the size of an account ID plus 32 bytes."
                            ]
                        },
                        {
                            "name": "MaxSubAccounts",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " The maximum number of sub-accounts allowed per identified account."
                            ]
                        },
                        {
                            "name": "MaxAdditionalFields",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                                " required to access an identity, but can be pretty high."
                            ]
                        },
                        {
                            "name": "MaxRegistrars",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "14000000",
                            "docs": [
                                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                                " of, e.g., updating judgements."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "TooManySubAccounts",
                            "doc": [
                                "Too many subs-accounts."
                            ]
                        },
                        {
                            "name": "NotFound",
                            "doc": [
                                "Account isn't found."
                            ]
                        },
                        {
                            "name": "NotNamed",
                            "doc": [
                                "Account isn't named."
                            ]
                        },
                        {
                            "name": "EmptyIndex",
                            "doc": [
                                "Empty index."
                            ]
                        },
                        {
                            "name": "FeeChanged",
                            "doc": [
                                "Fee is changed."
                            ]
                        },
                        {
                            "name": "NoIdentity",
                            "doc": [
                                "No identity found."
                            ]
                        },
                        {
                            "name": "StickyJudgement",
                            "doc": [
                                "Sticky judgement."
                            ]
                        },
                        {
                            "name": "JudgementGiven",
                            "doc": [
                                "Judgement given."
                            ]
                        },
                        {
                            "name": "InvalidJudgement",
                            "doc": [
                                "Invalid judgement."
                            ]
                        },
                        {
                            "name": "InvalidIndex",
                            "doc": [
                                "The index is invalid."
                            ]
                        },
                        {
                            "name": "InvalidTarget",
                            "doc": [
                                "The target is invalid."
                            ]
                        },
                        {
                            "name": "TooManyFields",
                            "doc": [
                                "Too many additional fields."
                            ]
                        },
                        {
                            "name": "TooManyRegistrars",
                            "doc": [
                                "Maximum amount of registrars reached. Cannot add any more."
                            ]
                        },
                        {
                            "name": "AlreadyClaimed",
                            "doc": [
                                "Account ID is already named."
                            ]
                        },
                        {
                            "name": "NotSub",
                            "doc": [
                                "Sender is not a sub-account."
                            ]
                        },
                        {
                            "name": "NotOwned",
                            "doc": [
                                "Sub-account isn't owned by sender."
                            ]
                        },
                        {
                            "name": "JudgementForDifferentIdentity",
                            "doc": [
                                "The provided judgement was for a different identity."
                            ]
                        },
                        {
                            "name": "JudgementPaymentFailed",
                            "doc": [
                                "Error that occurs when there is an issue paying for judgement."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            504,
                            500,
                            494,
                            498,
                            505,
                            499,
                            502,
                            425,
                            405,
                            398
                        ]
                    },
                    "index": 24
                },
                {
                    "name": "Proxy",
                    "prefix": "Proxy",
                    "storage": [
                        {
                            "name": "Proxies",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": [
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@506U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@502U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@496U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@500U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@507U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@501U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@504U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@427U128"
                                    ],
                                    "keys_id": 0,
                                    "value_id": [
                                        505,
                                        501,
                                        495,
                                        499,
                                        506,
                                        500,
                                        503,
                                        426
                                    ]
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000",
                            "docs": [
                                " The set of account proxies. Maps the account which has delegated to the accounts",
                                " which are being delegated to, together with the amount held on deposit."
                            ]
                        },
                        {
                            "name": "Announcements",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": [
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@510U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@506U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@500U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@504U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@511U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@505U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@508U128",
                                        "Tuple:bounded_collections:bounded_vec:BoundedVec@431U128"
                                    ],
                                    "keys_id": 0,
                                    "value_id": [
                                        509,
                                        505,
                                        499,
                                        503,
                                        510,
                                        504,
                                        507,
                                        430
                                    ]
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000",
                            "docs": [
                                " The announcements made by the proxy (key)."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1900",
                            "name": "proxy",
                            "docs": [
                                "See [`Pallet::proxy`].",
                                "Dispatch the given `call` from an account that the sender is authorised for through",
                                "`add_proxy`.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "Parameters:",
                                "- `real`: The account that the proxy will make a call on behalf of.",
                                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                                "- `call`: The call to be made by the `real` account."
                            ],
                            "args": [
                                {
                                    "name": "real",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "force_proxy_type",
                                    "type": "option<vara_runtime:ProxyType>",
                                    "type_name": "Option<ProxyType>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1901",
                            "name": "add_proxy",
                            "docs": [
                                "See [`Pallet::add_proxy`].",
                                "Register a proxy account for the sender that is able to make calls on its behalf.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "Parameters:",
                                "- `proxy`: The account that the `caller` would like to make a proxy.",
                                "- `proxy_type`: The permissions allowed for this proxy account.",
                                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                                "zero."
                            ],
                            "args": [
                                {
                                    "name": "delegate",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "proxy_type",
                                    "type": "vara_runtime:ProxyType",
                                    "type_name": "ProxyType"
                                },
                                {
                                    "name": "delay",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "1902",
                            "name": "remove_proxy",
                            "docs": [
                                "See [`Pallet::remove_proxy`].",
                                "Unregister a proxy account for the sender.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "Parameters:",
                                "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                                "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                            ],
                            "args": [
                                {
                                    "name": "delegate",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "proxy_type",
                                    "type": "vara_runtime:ProxyType",
                                    "type_name": "ProxyType"
                                },
                                {
                                    "name": "delay",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "1903",
                            "name": "remove_proxies",
                            "docs": [
                                "See [`Pallet::remove_proxies`].",
                                "Unregister all proxy accounts for the sender.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "WARNING: This may be called on accounts created by `pure`, however if done, then",
                                "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                            ],
                            "args": null
                        },
                        {
                            "lookup": "1904",
                            "name": "create_pure",
                            "docs": [
                                "See [`Pallet::create_pure`].",
                                "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                                "initialize it with a proxy of `proxy_type` for `origin` sender.",
                                "",
                                "Requires a `Signed` origin.",
                                "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                                "new account. This will almost always be the most permissive `ProxyType` possible to",
                                "allow for maximum flexibility.",
                                "- `index`: A disambiguation index, in case this is called multiple times in the same",
                                "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                                "want to use `0`.",
                                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                                "zero.",
                                "Fails with `Duplicate` if this has already been called in this transaction, from the",
                                "same sender, with the same parameters.",
                                "Fails if there are insufficient funds to pay for deposit."
                            ],
                            "args": [
                                {
                                    "name": "proxy_type",
                                    "type": "vara_runtime:ProxyType",
                                    "type_name": "ProxyType"
                                },
                                {
                                    "name": "delay",
                                    "type": "U32",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                },
                                {
                                    "name": "index",
                                    "type": "U16",
                                    "type_name": "u16"
                                }
                            ]
                        },
                        {
                            "lookup": "1905",
                            "name": "kill_pure",
                            "docs": [
                                "See [`Pallet::kill_pure`].",
                                "Removes a previously spawned pure proxy.",
                                "",
                                "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                                "inaccessible.",
                                "Requires a `Signed` origin, and the sender account must have been created by a call to",
                                "`pure` with corresponding parameters.",
                                "- `spawner`: The account that originally called `pure` to create this account.",
                                "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                                "- `proxy_type`: The proxy type originally passed to `pure`.",
                                "- `height`: The height of the chain when the call to `pure` was processed.",
                                "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                                "Fails with `NoPermission` in case the caller is not a previously created pure",
                                "account whose `pure` call has corresponding parameters."
                            ],
                            "args": [
                                {
                                    "name": "spawner",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "proxy_type",
                                    "type": "vara_runtime:ProxyType",
                                    "type_name": "ProxyType"
                                },
                                {
                                    "name": "index",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "height",
                                    "type": "compact<U32>",
                                    "type_name": [
                                        "BlockNumberFor",
                                        "BlockNumber"
                                    ]
                                },
                                {
                                    "name": "ext_index",
                                    "type": "compact<U32>",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "1906",
                            "name": "announce",
                            "docs": [
                                "See [`Pallet::announce`].",
                                "Publish the hash of a proxy-call that will be made in the future.",
                                "",
                                "This must be called some number of blocks before the corresponding `proxy` is attempted",
                                "if the delay associated with the proxy relationship is greater than zero.",
                                "No more than `MaxPending` announcements may be made at any one time.",
                                "This will take a deposit of `AnnouncementDepositFactor` as well as",
                                "`AnnouncementDepositBase` if there are no other pending announcements.",
                                "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                                "Parameters:",
                                "- `real`: The account that the proxy will make a call on behalf of.",
                                "- `call_hash`: The hash of the call to be made by the `real` account."
                            ],
                            "args": [
                                {
                                    "name": "real",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": "CallHashOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1907",
                            "name": "remove_announcement",
                            "docs": [
                                "See [`Pallet::remove_announcement`].",
                                "Remove a given announcement.",
                                "",
                                "May be called by a proxy account to remove a call they previously announced and return",
                                "the deposit.",
                                "The dispatch origin for this call must be _Signed_.",
                                "Parameters:",
                                "- `real`: The account that the proxy will make a call on behalf of.",
                                "- `call_hash`: The hash of the call to be made by the `real` account."
                            ],
                            "args": [
                                {
                                    "name": "real",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": "CallHashOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1908",
                            "name": "reject_announcement",
                            "docs": [
                                "See [`Pallet::reject_announcement`].",
                                "Remove the given announcement of a delegate.",
                                "",
                                "May be called by a target (proxied) account to remove a call that one of their delegates",
                                "(`delegate`) has announced they want to execute. The deposit is returned.",
                                "The dispatch origin for this call must be _Signed_.",
                                "Parameters:",
                                "- `delegate`: The account that previously announced the call.",
                                "- `call_hash`: The hash of the call to be made."
                            ],
                            "args": [
                                {
                                    "name": "delegate",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": "CallHashOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1909",
                            "name": "proxy_announced",
                            "docs": [
                                "See [`Pallet::proxy_announced`].",
                                "Dispatch the given `call` from an account that the sender is authorized for through",
                                "`add_proxy`.",
                                "",
                                "Removes any corresponding announcement(s).",
                                "The dispatch origin for this call must be _Signed_.",
                                "Parameters:",
                                "- `real`: The account that the proxy will make a call on behalf of.",
                                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                                "- `call`: The call to be made by the `real` account."
                            ],
                            "args": [
                                {
                                    "name": "delegate",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "real",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "force_proxy_type",
                                    "type": "option<vara_runtime:ProxyType>",
                                    "type_name": "Option<ProxyType>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            182,
                            181,
                            180,
                            185,
                            184
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1900",
                            "name": "ProxyExecuted",
                            "docs": [
                                "A proxy was executed correctly, with the given."
                            ],
                            "args": [
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "result"
                            ],
                            "args_type_name": [
                                "DispatchResult"
                            ]
                        },
                        {
                            "lookup": "1901",
                            "name": "PureCreated",
                            "docs": [
                                "A pure account has been created by new proxy with given",
                                "disambiguation index and proxy type."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "vara_runtime:ProxyType",
                                "U16"
                            ],
                            "args_name": [
                                "pure",
                                "who",
                                "proxy_type",
                                "disambiguation_index"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "ProxyType",
                                "u16"
                            ]
                        },
                        {
                            "lookup": "1902",
                            "name": "Announced",
                            "docs": [
                                "An announcement was placed to make a call in the future."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "H256"
                            ],
                            "args_name": [
                                "real",
                                "proxy",
                                "call_hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "CallHashOf"
                            ]
                        },
                        {
                            "lookup": "1903",
                            "name": "ProxyAdded",
                            "docs": [
                                "A proxy was added."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "vara_runtime:ProxyType",
                                "U32"
                            ],
                            "args_name": [
                                "delegator",
                                "delegatee",
                                "proxy_type",
                                "delay"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "ProxyType",
                                "BlockNumberFor",
                                "BlockNumber"
                            ]
                        },
                        {
                            "lookup": "1904",
                            "name": "ProxyRemoved",
                            "docs": [
                                "A proxy was removed."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "vara_runtime:ProxyType",
                                "U32"
                            ],
                            "args_name": [
                                "delegator",
                                "delegatee",
                                "proxy_type",
                                "delay"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "ProxyType",
                                "BlockNumberFor",
                                "BlockNumber"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            294,
                            292,
                            297,
                            296,
                            295,
                            298,
                            225
                        ]
                    },
                    "constants": [
                        {
                            "name": "ProxyDepositBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "001843d5ba0500000000000000000000",
                                "00784f2aa61c00000000000000000000",
                                "003086aa750b00000000000000000000"
                            ],
                            "docs": [
                                " The base amount of currency needed to reserve for creating a proxy.",
                                "",
                                " This is held for an additional storage item whose value size is",
                                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
                            ]
                        },
                        {
                            "name": "ProxyDepositFactor",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "0070f70b021200000000000000000000",
                                "0030d53b0a5a00000000000000000000",
                                "00e0ee17042400000000000000000000"
                            ],
                            "docs": [
                                " The amount of currency needed per proxy added.",
                                "",
                                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                                " into account `32 + proxy_type.encode().len()` bytes of data."
                            ]
                        },
                        {
                            "name": "MaxProxies",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "20000000",
                            "docs": [
                                " The maximum amount of proxies allowed for a single account."
                            ]
                        },
                        {
                            "name": "MaxPending",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "20000000",
                            "docs": [
                                " The maximum amount of time-delayed announcements that are allowed to be pending."
                            ]
                        },
                        {
                            "name": "AnnouncementDepositBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "001843d5ba0500000000000000000000",
                                "00784f2aa61c00000000000000000000",
                                "003086aa750b00000000000000000000"
                            ],
                            "docs": [
                                " The base amount of currency needed to reserve for creating an announcement.",
                                "",
                                " This is held when a new storage item holding a `Balance` is created (typically 16",
                                " bytes)."
                            ]
                        },
                        {
                            "name": "AnnouncementDepositFactor",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00e0ee17042400000000000000000000",
                                "0060aa7714b400000000000000000000",
                                "00c0dd2f084800000000000000000000"
                            ],
                            "docs": [
                                " The amount of currency needed per announcement made.",
                                "",
                                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                                " into a pre-existing storage value."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "TooMany",
                            "doc": [
                                "There are too many proxies registered or too many announcements pending."
                            ]
                        },
                        {
                            "name": "NotFound",
                            "doc": [
                                "Proxy registration not found."
                            ]
                        },
                        {
                            "name": "NotProxy",
                            "doc": [
                                "Sender is not a proxy of the account to be proxied."
                            ]
                        },
                        {
                            "name": "Unproxyable",
                            "doc": [
                                "A call which is incompatible with the proxy type's filter was attempted."
                            ]
                        },
                        {
                            "name": "Duplicate",
                            "doc": [
                                "Account is already a proxy."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "Call may not be made by proxy because it may escalate its privileges."
                            ]
                        },
                        {
                            "name": "Unannounced",
                            "doc": [
                                "Announcement, if made at all, was made too recently."
                            ]
                        },
                        {
                            "name": "NoSelfProxy",
                            "doc": [
                                "Cannot add self as proxy."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            513,
                            509,
                            503,
                            507,
                            514,
                            508,
                            511,
                            434
                        ]
                    },
                    "index": 25
                },
                {
                    "name": "Multisig",
                    "prefix": "Multisig",
                    "storage": [
                        {
                            "name": "Multisigs",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "[U8; 32]"
                                    ],
                                    "value": "pallet_multisig:Multisig",
                                    "keys_id": [
                                        514,
                                        510,
                                        504,
                                        508,
                                        515,
                                        509,
                                        512,
                                        435
                                    ],
                                    "value_id": [
                                        515,
                                        511,
                                        505,
                                        509,
                                        516,
                                        510,
                                        513,
                                        436
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The set of open multisig operations."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1a00",
                            "name": "as_multi_threshold_1",
                            "docs": [
                                "See [`Pallet::as_multi_threshold_1`].",
                                "Immediately dispatch a multi-signature call using a single approval from the caller.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "- `other_signatories`: The accounts (other than the sender) who are part of the",
                                "multi-signature, but do not participate in the approval process.",
                                "- `call`: The call to be executed.",
                                "Result is equivalent to the dispatched result.",
                                "## Complexity",
                                "O(Z + C) where Z is the length of the call and C its execution weight."
                            ],
                            "args": [
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1a01",
                            "name": "as_multi",
                            "docs": [
                                "See [`Pallet::as_multi`].",
                                "Register approval for a dispatch to be made from a deterministic composite account if",
                                "approved by a total of `threshold - 1` of `other_signatories`.",
                                "",
                                "If there are enough, then dispatch the call.",
                                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                                "is cancelled.",
                                "The dispatch origin for this call must be _Signed_.",
                                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                                "dispatch. May not be empty.",
                                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                                "transaction index) of the first approval transaction.",
                                "- `call`: The call to be executed.",
                                "NOTE: Unless this is the final approval, you will generally want to use",
                                "`approve_as_multi` instead, since it only requires a hash of the call.",
                                "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                                "on success, result is `Ok` and the result from the interior call, if it was executed,",
                                "may be found in the deposited `MultisigExecuted` event.",
                                "## Complexity",
                                "- `O(S + Z + Call)`.",
                                "- Up to one balance-reserve or unreserve operation.",
                                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                                "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                                "- One encode & hash, both of complexity `O(S)`.",
                                "- Up to one binary search and insert (`O(logS + S)`).",
                                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                                "- One event.",
                                "- The weight of the `call`.",
                                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                            ],
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                },
                                {
                                    "name": "maybe_timepoint",
                                    "type": "option<pallet_multisig:Timepoint>",
                                    "type_name": [
                                        "Option<Timepoint<BlockNumberFor>>",
                                        "Option<Timepoint<BlockNumber>>"
                                    ]
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                },
                                {
                                    "name": "max_weight",
                                    "type": "sp_weights:weight_v2:Weight",
                                    "type_name": "Weight"
                                }
                            ]
                        },
                        {
                            "lookup": "1a02",
                            "name": "approve_as_multi",
                            "docs": [
                                "See [`Pallet::approve_as_multi`].",
                                "Register approval for a dispatch to be made from a deterministic composite account if",
                                "approved by a total of `threshold - 1` of `other_signatories`.",
                                "",
                                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                                "is cancelled.",
                                "The dispatch origin for this call must be _Signed_.",
                                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                                "dispatch. May not be empty.",
                                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                                "transaction index) of the first approval transaction.",
                                "- `call_hash`: The hash of the call to be executed.",
                                "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                                "## Complexity",
                                "- `O(S)`.",
                                "- Up to one balance-reserve or unreserve operation.",
                                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                                "- One encode & hash, both of complexity `O(S)`.",
                                "- Up to one binary search and insert (`O(logS + S)`).",
                                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                                "- One event.",
                                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                            ],
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                },
                                {
                                    "name": "maybe_timepoint",
                                    "type": "option<pallet_multisig:Timepoint>",
                                    "type_name": [
                                        "Option<Timepoint<BlockNumberFor>>",
                                        "Option<Timepoint<BlockNumber>>"
                                    ]
                                },
                                {
                                    "name": "call_hash",
                                    "type": "[U8; 32]",
                                    "type_name": "[u8; 32]"
                                },
                                {
                                    "name": "max_weight",
                                    "type": "sp_weights:weight_v2:Weight",
                                    "type_name": "Weight"
                                }
                            ]
                        },
                        {
                            "lookup": "1a03",
                            "name": "cancel_as_multi",
                            "docs": [
                                "See [`Pallet::cancel_as_multi`].",
                                "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                                "for this operation will be unreserved on success.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                                "dispatch. May not be empty.",
                                "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                                "transaction for this dispatch.",
                                "- `call_hash`: The hash of the call to be executed.",
                                "## Complexity",
                                "- `O(S)`.",
                                "- Up to one balance-reserve or unreserve operation.",
                                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                                "- One encode & hash, both of complexity `O(S)`.",
                                "- One event.",
                                "- I/O: 1 read `O(S)`, one remove.",
                                "- Storage: removes one item."
                            ],
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                },
                                {
                                    "name": "timepoint",
                                    "type": "pallet_multisig:Timepoint",
                                    "type_name": [
                                        "Timepoint<BlockNumberFor>",
                                        "Timepoint<BlockNumber>"
                                    ]
                                },
                                {
                                    "name": "call_hash",
                                    "type": "[U8; 32]",
                                    "type_name": "[u8; 32]"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            185,
                            184,
                            183,
                            188,
                            187
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1a00",
                            "name": "NewMultisig",
                            "docs": [
                                "A new multisig operation has begun."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "approving",
                                "multisig",
                                "call_hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "CallHash"
                            ]
                        },
                        {
                            "lookup": "1a01",
                            "name": "MultisigApproval",
                            "docs": [
                                "A multisig operation has been approved by someone."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_multisig:Timepoint",
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "approving",
                                "timepoint",
                                "multisig",
                                "call_hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Timepoint<BlockNumberFor>",
                                "AccountId",
                                "CallHash",
                                "Timepoint<BlockNumber>"
                            ]
                        },
                        {
                            "lookup": "1a02",
                            "name": "MultisigExecuted",
                            "docs": [
                                "A multisig operation has been executed."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_multisig:Timepoint",
                                "AccountId",
                                "[U8; 32]",
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "approving",
                                "timepoint",
                                "multisig",
                                "call_hash",
                                "result"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Timepoint<BlockNumberFor>",
                                "AccountId",
                                "CallHash",
                                "DispatchResult",
                                "Timepoint<BlockNumber>"
                            ]
                        },
                        {
                            "lookup": "1a03",
                            "name": "MultisigCancelled",
                            "docs": [
                                "A multisig operation has been cancelled."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_multisig:Timepoint",
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "cancelling",
                                "timepoint",
                                "multisig",
                                "call_hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Timepoint<BlockNumberFor>",
                                "AccountId",
                                "CallHash",
                                "Timepoint<BlockNumber>"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            295,
                            293,
                            298,
                            297,
                            296,
                            299,
                            226
                        ]
                    },
                    "constants": [
                        {
                            "name": "DepositBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "001836b4623100000000000000000000",
                                "00780e85edf600000000000000000000",
                                "00306c68c56200000000000000000000"
                            ],
                            "docs": [
                                " The base amount of currency needed to reserve for creating a multisig execution or to",
                                " store a dispatch call for later.",
                                "",
                                " This is held for an additional storage item whose value size is",
                                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                                " `32 + sizeof(AccountId)` bytes."
                            ]
                        },
                        {
                            "name": "DepositFactor",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00002e59761100000000000000000000",
                                "0000e6bd4f5700000000000000000000",
                                "00005cb2ec2200000000000000000000"
                            ],
                            "docs": [
                                " The amount of currency needed per unit threshold when creating a multisig execution.",
                                "",
                                " This is held for adding 32 bytes more into a pre-existing storage value."
                            ]
                        },
                        {
                            "name": "MaxSignatories",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " The maximum amount of signatories allowed in the multisig."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "MinimumThreshold",
                            "doc": [
                                "Threshold must be 2 or greater."
                            ]
                        },
                        {
                            "name": "AlreadyApproved",
                            "doc": [
                                "Call is already approved by this signatory."
                            ]
                        },
                        {
                            "name": "NoApprovalsNeeded",
                            "doc": [
                                "Call doesn't need any (more) approvals."
                            ]
                        },
                        {
                            "name": "TooFewSignatories",
                            "doc": [
                                "There are too few signatories in the list."
                            ]
                        },
                        {
                            "name": "TooManySignatories",
                            "doc": [
                                "There are too many signatories in the list."
                            ]
                        },
                        {
                            "name": "SignatoriesOutOfOrder",
                            "doc": [
                                "The signatories were provided out of order; they should be ordered."
                            ]
                        },
                        {
                            "name": "SenderInSignatories",
                            "doc": [
                                "The sender was contained in the other signatories; it shouldn't be."
                            ]
                        },
                        {
                            "name": "NotFound",
                            "doc": [
                                "Multisig operation not found when attempting to cancel."
                            ]
                        },
                        {
                            "name": "NotOwner",
                            "doc": [
                                "Only the account that originally created the multisig is able to cancel it."
                            ]
                        },
                        {
                            "name": "NoTimepoint",
                            "doc": [
                                "No timepoint was given, yet the multisig operation is already underway."
                            ]
                        },
                        {
                            "name": "WrongTimepoint",
                            "doc": [
                                "A different timepoint was given to the multisig operation that is underway."
                            ]
                        },
                        {
                            "name": "UnexpectedTimepoint",
                            "doc": [
                                "A timepoint was given, yet no multisig operation is underway."
                            ]
                        },
                        {
                            "name": "MaxWeightTooLow",
                            "doc": [
                                "The maximum weight information provided was too low."
                            ]
                        },
                        {
                            "name": "AlreadyStored",
                            "doc": [
                                "The data to be stored is already stored."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            517,
                            513,
                            507,
                            511,
                            518,
                            512,
                            515,
                            438
                        ]
                    },
                    "index": 26
                },
                {
                    "name": "ElectionProviderMultiPhase",
                    "prefix": "ElectionProviderMultiPhase",
                    "storage": [
                        {
                            "name": "Round",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x01000000",
                            "docs": [
                                " Internal counter for the number of rounds.",
                                "",
                                " This is useful for de-duplication of transactions submitted to the pool, and general",
                                " diagnostics of the pallet.",
                                "",
                                " This is merely incremented once per every time that an upstream `elect` is called."
                            ]
                        },
                        {
                            "name": "CurrentPhase",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_election_provider_multi_phase:Phase",
                                "PlainTypeValue": [
                                    298,
                                    296,
                                    297,
                                    302,
                                    301,
                                    300,
                                    303
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Current phase."
                            ]
                        },
                        {
                            "name": "QueuedSolution",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_election_provider_multi_phase:ReadySolution",
                                "PlainTypeValue": [
                                    518,
                                    514,
                                    508,
                                    512,
                                    519,
                                    513,
                                    516
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
                                "",
                                " Always sorted by score."
                            ]
                        },
                        {
                            "name": "Snapshot",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_election_provider_multi_phase:RoundSnapshot",
                                "PlainTypeValue": [
                                    520,
                                    516,
                                    510,
                                    514,
                                    521,
                                    515,
                                    518
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Snapshot data of the round.",
                                "",
                                " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                            ]
                        },
                        {
                            "name": "DesiredTargets",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Desired number of targets to elect for this round.",
                                "",
                                " Only exists when [`Snapshot`] is present."
                            ]
                        },
                        {
                            "name": "SnapshotMetadata",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_election_provider_multi_phase:SolutionOrSnapshotSize",
                                "PlainTypeValue": [
                                    242,
                                    241,
                                    240,
                                    245,
                                    244
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The metadata of the [`RoundSnapshot`]",
                                "",
                                " Only exists when [`Snapshot`] is present."
                            ]
                        },
                        {
                            "name": "SignedSubmissionNextIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The next index to be assigned to an incoming signed submission.",
                                "",
                                " Every accepted submission is assigned a unique index; that index is bound to that particular",
                                " submission for the duration of the election. On election finalization, the next index is",
                                " reset to 0.",
                                "",
                                " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                                " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                                " because iteration is slow. Instead, we store the value here."
                            ]
                        },
                        {
                            "name": "SignedSubmissionIndices",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:sp_npos_elections:ElectionScoreU32U32>",
                                "PlainTypeValue": [
                                    523,
                                    519,
                                    513,
                                    517,
                                    524,
                                    518,
                                    521
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                                " value in `SignedSubmissions`.",
                                "",
                                " We never need to process more than a single signed submission at a time. Signed submissions",
                                " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                                " them one at a time instead of reading and decoding all of them at once."
                            ]
                        },
                        {
                            "name": "SignedSubmissionsMap",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_election_provider_multi_phase:signed:SignedSubmission",
                                    "keys_id": 4,
                                    "value_id": [
                                        526,
                                        522,
                                        516,
                                        520,
                                        527,
                                        521,
                                        524
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Unchecked, signed solutions.",
                                "",
                                " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                                " allowing us to keep only a single one in memory at a time.",
                                "",
                                " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                                " affect; we shouldn't need a cryptographically secure hasher."
                            ]
                        },
                        {
                            "name": "MinimumUntrustedScore",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "sp_npos_elections:ElectionScore",
                                "PlainTypeValue": [
                                    241,
                                    240,
                                    239,
                                    244,
                                    243
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The minimum score that each 'untrusted' solution must attain in order to be considered",
                                " feasible.",
                                "",
                                " Can be set via `set_minimum_untrusted_score`."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1b00",
                            "name": "submit_unsigned",
                            "docs": [
                                "See [`Pallet::submit_unsigned`].",
                                "Submit a solution for the unsigned phase.",
                                "",
                                "The dispatch origin fo this call must be __none__.",
                                "This submission is checked on the fly. Moreover, this unsigned solution is only",
                                "validated when submitted to the pool from the **local** node. Effectively, this means",
                                "that only active validators can submit this transaction when authoring a block (similar",
                                "to an inherent).",
                                "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                                "panic if the solution submitted by the validator is invalid in any way, effectively",
                                "putting their authoring reward at risk.",
                                "No deposit or reward is associated with this submission."
                            ],
                            "args": [
                                {
                                    "name": "raw_solution",
                                    "type": "pallet_election_provider_multi_phase:RawSolution",
                                    "type_name": "Box<RawSolution<SolutionOf<MinerConfig>>>"
                                },
                                {
                                    "name": "witness",
                                    "type": "pallet_election_provider_multi_phase:SolutionOrSnapshotSize",
                                    "type_name": "SolutionOrSnapshotSize"
                                }
                            ]
                        },
                        {
                            "lookup": "1b01",
                            "name": "set_minimum_untrusted_score",
                            "docs": [
                                "See [`Pallet::set_minimum_untrusted_score`].",
                                "Set a new value for `MinimumUntrustedScore`.",
                                "",
                                "Dispatch origin must be aligned with `T::ForceOrigin`.",
                                "This check can be turned off by setting the value to `None`."
                            ],
                            "args": [
                                {
                                    "name": "maybe_next_score",
                                    "type": "option<sp_npos_elections:ElectionScore>",
                                    "type_name": "Option<ElectionScore>"
                                }
                            ]
                        },
                        {
                            "lookup": "1b02",
                            "name": "set_emergency_election_result",
                            "docs": [
                                "See [`Pallet::set_emergency_election_result`].",
                                "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                                "call to `ElectionProvider::elect`.",
                                "",
                                "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                                "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                                "feasibility check itself can in principle cause the election process to fail (due to",
                                "memory/weight constrains)."
                            ],
                            "args": [
                                {
                                    "name": "supports",
                                    "type": "Vec<Tuple:AccountIdsp_npos_elections:Support>",
                                    "type_name": "Supports<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "1b03",
                            "name": "submit",
                            "docs": [
                                "See [`Pallet::submit`].",
                                "Submit a solution for the signed phase.",
                                "",
                                "The dispatch origin fo this call must be __signed__.",
                                "The solution is potentially queued, based on the claimed score and processed at the end",
                                "of the signed phase.",
                                "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                                "might be rewarded, slashed, or get all or a part of the deposit back."
                            ],
                            "args": [
                                {
                                    "name": "raw_solution",
                                    "type": "pallet_election_provider_multi_phase:RawSolution",
                                    "type_name": "Box<RawSolution<SolutionOf<MinerConfig>>>"
                                }
                            ]
                        },
                        {
                            "lookup": "1b04",
                            "name": "governance_fallback",
                            "docs": [
                                "See [`Pallet::governance_fallback`].",
                                "Trigger the governance fallback.",
                                "",
                                "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
                                "calling [`Call::set_emergency_election_result`]."
                            ],
                            "args": [
                                {
                                    "name": "maybe_max_voters",
                                    "type": "option<U32>",
                                    "type_name": "Option<u32>"
                                },
                                {
                                    "name": "maybe_max_targets",
                                    "type": "option<U32>",
                                    "type_name": "Option<u32>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            188,
                            187,
                            186,
                            191,
                            190
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1b00",
                            "name": "SolutionStored",
                            "docs": [
                                "A solution was stored with the given compute.",
                                "",
                                "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
                                "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
                                "Otherwise, the solution was stored either during the unsigned phase or by",
                                "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
                                "room for this one."
                            ],
                            "args": [
                                "pallet_election_provider_multi_phase:ElectionCompute",
                                "option<AccountId>",
                                "Bool"
                            ],
                            "args_name": [
                                "compute",
                                "origin",
                                "prev_ejected"
                            ],
                            "args_type_name": [
                                "ElectionCompute",
                                "Option<AccountId>",
                                "bool"
                            ]
                        },
                        {
                            "lookup": "1b01",
                            "name": "ElectionFinalized",
                            "docs": [
                                "The election has been finalized, with the given computation and score."
                            ],
                            "args": [
                                "pallet_election_provider_multi_phase:ElectionCompute",
                                "sp_npos_elections:ElectionScore"
                            ],
                            "args_name": [
                                "compute",
                                "score"
                            ],
                            "args_type_name": [
                                "ElectionCompute",
                                "ElectionScore"
                            ]
                        },
                        {
                            "lookup": "1b02",
                            "name": "ElectionFailed",
                            "docs": [
                                "An election failed.",
                                "",
                                "Not much can be said about which computes failed in the process."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "1b03",
                            "name": "Rewarded",
                            "docs": [
                                "An account has been rewarded for their signed submission being finalized."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "value"
                            ],
                            "args_type_name": [
                                "<T as frame_system::Config>::AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1b04",
                            "name": "Slashed",
                            "docs": [
                                "An account has been slashed for submitting an invalid signed submission."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "value"
                            ],
                            "args_type_name": [
                                "<T as frame_system::Config>::AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1b05",
                            "name": "PhaseTransitioned",
                            "docs": [
                                "There was a phase transition in a given round."
                            ],
                            "args": [
                                "pallet_election_provider_multi_phase:Phase",
                                "pallet_election_provider_multi_phase:Phase",
                                "U32"
                            ],
                            "args_name": [
                                "from",
                                "to",
                                "round"
                            ],
                            "args_type_name": [
                                "Phase<BlockNumberFor>",
                                "Phase<BlockNumberFor>",
                                "u32",
                                "Phase<BlockNumber>"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            296,
                            294,
                            299,
                            298,
                            297,
                            300
                        ]
                    },
                    "constants": [
                        {
                            "name": "UnsignedPhase",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "58020000",
                            "docs": [
                                " Duration of the unsigned phase."
                            ]
                        },
                        {
                            "name": "SignedPhase",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "58020000",
                            "docs": [
                                " Duration of the signed phase."
                            ]
                        },
                        {
                            "name": "BetterSignedThreshold",
                            "type": "U32",
                            "type_value": [
                                51,
                                50,
                                49
                            ],
                            "constants_value": "00000000",
                            "docs": [
                                " The minimum amount of improvement to the solution score that defines a solution as",
                                " \"better\" in the Signed phase."
                            ]
                        },
                        {
                            "name": "BetterUnsignedThreshold",
                            "type": "U32",
                            "type_value": [
                                51,
                                50,
                                49
                            ],
                            "constants_value": "a0860100",
                            "docs": [
                                " The minimum amount of improvement to the solution score that defines a solution as",
                                " \"better\" in the Unsigned phase."
                            ]
                        },
                        {
                            "name": "OffchainRepeat",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "25000000",
                            "docs": [
                                " The repeat threshold of the offchain worker.",
                                "",
                                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                                " to submit the worker's solution."
                            ]
                        },
                        {
                            "name": "MinerTxPriority",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "feffffffffffff7f",
                            "docs": [
                                " The priority of the unsigned transaction submitted in the unsigned-phase"
                            ]
                        },
                        {
                            "name": "SignedMaxSubmissions",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "0a000000",
                            "docs": [
                                " Maximum number of signed submissions that can be queued.",
                                "",
                                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                                " update this value during an election, you _must_ ensure that",
                                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                                " attempts to submit new solutions may cause a runtime panic."
                            ]
                        },
                        {
                            "name": "SignedMaxWeight",
                            "type": "sp_weights:weight_v2:Weight",
                            "type_value": [
                                9,
                                8
                            ],
                            "constants_value": [
                                "071059531a3313ec51b81e85eb5138",
                                "07d05cdf1a3313ec51b81e85eb5138",
                                "0728545c1c3313ec51b81e85eb5138",
                                "07d2765a092213ec51b81e85eb5138"
                            ],
                            "docs": [
                                " Maximum weight of a signed solution.",
                                "",
                                " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
                                " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
                                " this value."
                            ]
                        },
                        {
                            "name": "SignedMaxRefunds",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "03000000",
                            "docs": [
                                " The maximum amount of unchecked solutions to refund the call fee for."
                            ]
                        },
                        {
                            "name": "SignedRewardBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00a0724e180900000000000000000000",
                                "00203d88792d00000000000000000000",
                                "0040e59c301200000000000000000000"
                            ],
                            "docs": [
                                " Base reward for a signed solution"
                            ]
                        },
                        {
                            "name": "SignedDepositByte",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00e87648170000000000000000000000",
                                "0088526a740000000000000000000000",
                                "00d0ed902e0000000000000000000000"
                            ],
                            "docs": [
                                " Per-byte deposit for a signed solution."
                            ]
                        },
                        {
                            "name": "SignedDepositWeight",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00000000000000000000000000000000",
                            "docs": [
                                " Per-weight deposit for a signed solution."
                            ]
                        },
                        {
                            "name": "MaxWinners",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "e8030000",
                            "docs": [
                                " The maximum number of winners that can be elected by this `ElectionProvider`",
                                " implementation.",
                                "",
                                " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
                            ]
                        },
                        {
                            "name": "MinerMaxLength",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00001200",
                            "docs": null
                        },
                        {
                            "name": "MinerMaxWeight",
                            "type": "sp_weights:weight_v2:Weight",
                            "type_value": [
                                9,
                                8
                            ],
                            "constants_value": [
                                "071059531a3313ec51b81e85eb5138",
                                "07d05cdf1a3313ec51b81e85eb5138",
                                "0728545c1c3313ec51b81e85eb5138",
                                "07d2765a092213ec51b81e85eb5138"
                            ],
                            "docs": null
                        },
                        {
                            "name": "MinerMaxVotesPerVoter",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "10000000",
                            "docs": null
                        },
                        {
                            "name": "MinerMaxWinners",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "e8030000",
                            "docs": null
                        },
                        {
                            "name": "SignedDepositBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00a0724e180900000000000000000000",
                                "00203d88792d00000000000000000000",
                                "0040e59c301200000000000000000000"
                            ],
                            "docs": [
                                " Base deposit for a signed solution."
                            ]
                        },
                        {
                            "name": "MaxElectingVoters",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "409c0000",
                            "docs": [
                                " The maximum number of electing voters to put in the snapshot. At the moment, snapshots",
                                " are only over a single block, but once multi-block elections are introduced they will",
                                " take place over multiple blocks."
                            ]
                        },
                        {
                            "name": "MaxElectableTargets",
                            "type": "U16",
                            "type_value": [
                                62,
                                61
                            ],
                            "constants_value": "1027",
                            "docs": [
                                " The maximum number of electable targets to put in the snapshot."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "PreDispatchEarlySubmission",
                            "doc": [
                                "Submission was too early."
                            ]
                        },
                        {
                            "name": "PreDispatchWrongWinnerCount",
                            "doc": [
                                "Wrong number of winners presented."
                            ]
                        },
                        {
                            "name": "PreDispatchWeakSubmission",
                            "doc": [
                                "Submission was too weak, score-wise."
                            ]
                        },
                        {
                            "name": "SignedQueueFull",
                            "doc": [
                                "The queue was full, and the solution was not better than any of the existing ones."
                            ]
                        },
                        {
                            "name": "SignedCannotPayDeposit",
                            "doc": [
                                "The origin failed to pay the deposit."
                            ]
                        },
                        {
                            "name": "SignedInvalidWitness",
                            "doc": [
                                "Witness data to dispatchable is invalid."
                            ]
                        },
                        {
                            "name": "SignedTooMuchWeight",
                            "doc": [
                                "The signed submission consumes too much weight"
                            ]
                        },
                        {
                            "name": "OcwCallWrongEra",
                            "doc": [
                                "OCW submitted solution for wrong round"
                            ]
                        },
                        {
                            "name": "MissingSnapshotMetadata",
                            "doc": [
                                "Snapshot metadata should exist but didn't."
                            ]
                        },
                        {
                            "name": "InvalidSubmissionIndex",
                            "doc": [
                                "`Self::insert_submission` returned an invalid index."
                            ]
                        },
                        {
                            "name": "CallNotAllowed",
                            "doc": [
                                "The call is not allowed at this point."
                            ]
                        },
                        {
                            "name": "FallbackFailed",
                            "doc": [
                                "The fallback failed"
                            ]
                        },
                        {
                            "name": "BoundNotMet",
                            "doc": [
                                "Some bound not met"
                            ]
                        },
                        {
                            "name": "TooManyWinners",
                            "doc": [
                                "Submitted solution has too many winners"
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            527,
                            523,
                            517,
                            521,
                            528,
                            522,
                            525
                        ]
                    },
                    "index": 27
                },
                {
                    "name": "Offences",
                    "prefix": "Offences",
                    "storage": [
                        {
                            "name": "Reports",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": "sp_staking:offence:OffenceDetails",
                                    "keys_id": [
                                        12,
                                        11
                                    ],
                                    "value_id": [
                                        528,
                                        524,
                                        518,
                                        522,
                                        529,
                                        523,
                                        526
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The primary structure that holds all offence records keyed by report identifiers."
                            ]
                        },
                        {
                            "name": "ConcurrentReportsIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "[U8; 16]",
                                        "Vec<U8>"
                                    ],
                                    "value": "Vec<H256>",
                                    "keys_id": [
                                        529,
                                        525,
                                        519,
                                        523,
                                        530,
                                        524,
                                        527
                                    ],
                                    "value_id": [
                                        139,
                                        138,
                                        335,
                                        338,
                                        343,
                                        342,
                                        341,
                                        346
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A vector of reports of the same kind that happened at the same time slot."
                            ]
                        },
                        {
                            "name": "ReportsByKindIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "[U8; 16]"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 162,
                                    "value_id": 12
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Enumerates all reports of a kind along with the time they happened.",
                                "",
                                " All reports are sorted by the time of offence.",
                                "",
                                " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                                " different types are not supported at the moment so we are doing the manual serialization."
                            ]
                        }
                    ],
                    "events": [
                        {
                            "lookup": "1c00",
                            "name": "Offence",
                            "docs": [
                                "There is an offence reported of the given `kind` happened at the `session_index` and",
                                "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                                "\\[kind, timeslot\\]."
                            ],
                            "args": [
                                "[U8; 16]",
                                "Vec<U8>"
                            ],
                            "args_name": [
                                "kind",
                                "timeslot"
                            ],
                            "args_type_name": [
                                "Kind",
                                "OpaqueTimeSlot"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            300,
                            298,
                            299,
                            304,
                            303,
                            302,
                            305
                        ]
                    },
                    "errors": null,
                    "errors_value": null,
                    "index": 28
                },
                {
                    "name": "Bounties",
                    "prefix": "Bounties",
                    "storage": [
                        {
                            "name": "BountyCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Number of bounty proposals that have been made."
                            ]
                        },
                        {
                            "name": "Bounties",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_bounties:Bounty",
                                    "keys_id": 4,
                                    "value_id": [
                                        530,
                                        526,
                                        520,
                                        524,
                                        531,
                                        525,
                                        528
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Bounties that have been made."
                            ]
                        },
                        {
                            "name": "BountyDescriptions",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": [
                                        532,
                                        528,
                                        522,
                                        526,
                                        533,
                                        527,
                                        530
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The description of each bounty."
                            ]
                        },
                        {
                            "name": "BountyApprovals",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<U32>",
                                "PlainTypeValue": [
                                    432,
                                    430,
                                    428,
                                    431,
                                    438,
                                    436
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Bounty indices that have been approved but not yet funded."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1d00",
                            "name": "propose_bounty",
                            "docs": [
                                "See [`Pallet::propose_bounty`].",
                                "Propose a new bounty.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                                "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                                "or slashed when rejected.",
                                "- `curator`: The curator account whom will manage this bounty.",
                                "- `fee`: The curator fee.",
                                "- `value`: The total payment amount of this bounty, curator fee included.",
                                "- `description`: The description of this bounty."
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "description",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "1d01",
                            "name": "approve_bounty",
                            "docs": [
                                "See [`Pallet::approve_bounty`].",
                                "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                                "and the original deposit will be returned.",
                                "",
                                "May only be called from `T::SpendOrigin`.",
                                "## Complexity",
                                "- O(1)."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d02",
                            "name": "propose_curator",
                            "docs": [
                                "See [`Pallet::propose_curator`].",
                                "Assign a curator to a funded bounty.",
                                "",
                                "May only be called from `T::SpendOrigin`.",
                                "## Complexity",
                                "- O(1)."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "curator",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "fee",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1d03",
                            "name": "unassign_curator",
                            "docs": [
                                "See [`Pallet::unassign_curator`].",
                                "Unassign curator from a bounty.",
                                "",
                                "This function can only be called by the `RejectOrigin` a signed origin.",
                                "If this function is called by the `RejectOrigin`, we assume that the curator is",
                                "malicious or inactive. As a result, we will slash the curator when possible.",
                                "If the origin is the curator, we take this as a sign they are unable to do their job and",
                                "they willingly give up. We could slash them, but for now we allow them to recover their",
                                "deposit and exit without issue. (We may want to change this if it is abused.)",
                                "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                                "anyone in the community to call out that a curator is not doing their due diligence, and",
                                "we should pick a new curator. In this case the curator should also be slashed.",
                                "## Complexity",
                                "- O(1)."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d04",
                            "name": "accept_curator",
                            "docs": [
                                "See [`Pallet::accept_curator`].",
                                "Accept the curator role for a bounty.",
                                "A deposit will be reserved from curator and refund upon successful payout.",
                                "",
                                "May only be called from the curator.",
                                "## Complexity",
                                "- O(1)."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d05",
                            "name": "award_bounty",
                            "docs": [
                                "See [`Pallet::award_bounty`].",
                                "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                                "after a delay.",
                                "",
                                "The dispatch origin for this call must be the curator of this bounty.",
                                "- `bounty_id`: Bounty ID to award.",
                                "- `beneficiary`: The beneficiary account whom will receive the payout.",
                                "## Complexity",
                                "- O(1)."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "beneficiary",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1d06",
                            "name": "claim_bounty",
                            "docs": [
                                "See [`Pallet::claim_bounty`].",
                                "Claim the payout from an awarded bounty after payout delay.",
                                "",
                                "The dispatch origin for this call must be the beneficiary of this bounty.",
                                "- `bounty_id`: Bounty ID to claim.",
                                "## Complexity",
                                "- O(1)."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d07",
                            "name": "close_bounty",
                            "docs": [
                                "See [`Pallet::close_bounty`].",
                                "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                                "the curator deposit will be unreserved if possible.",
                                "",
                                "Only `T::RejectOrigin` is able to cancel a bounty.",
                                "- `bounty_id`: Bounty ID to cancel.",
                                "## Complexity",
                                "- O(1)."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d08",
                            "name": "extend_bounty_expiry",
                            "docs": [
                                "See [`Pallet::extend_bounty_expiry`].",
                                "Extend the expiry time of an active bounty.",
                                "",
                                "The dispatch origin for this call must be the curator of this bounty.",
                                "- `bounty_id`: Bounty ID to extend.",
                                "- `remark`: additional information.",
                                "## Complexity",
                                "- O(1)."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "remark",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            249,
                            248,
                            253,
                            252
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1d00",
                            "name": "BountyProposed",
                            "docs": [
                                "New bounty proposal."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1d01",
                            "name": "BountyRejected",
                            "docs": [
                                "A bounty proposal was rejected; funds were slashed."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "bond"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1d02",
                            "name": "BountyBecameActive",
                            "docs": [
                                "A bounty proposal is funded and became active."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1d03",
                            "name": "BountyAwarded",
                            "docs": [
                                "A bounty is awarded to a beneficiary."
                            ],
                            "args": [
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "index",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1d04",
                            "name": "BountyClaimed",
                            "docs": [
                                "A bounty is claimed by beneficiary."
                            ],
                            "args": [
                                "U32",
                                "U128",
                                "AccountId"
                            ],
                            "args_name": [
                                "index",
                                "payout",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BalanceOf",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1d05",
                            "name": "BountyCanceled",
                            "docs": [
                                "A bounty is cancelled."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1d06",
                            "name": "BountyExtended",
                            "docs": [
                                "A bounty expiry is extended."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1d07",
                            "name": "BountyApproved",
                            "docs": [
                                "A bounty is approved."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1d08",
                            "name": "CuratorProposed",
                            "docs": [
                                "A bounty curator is proposed."
                            ],
                            "args": [
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "bounty_id",
                                "curator"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1d09",
                            "name": "CuratorUnassigned",
                            "docs": [
                                "A bounty curator is unassigned."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "bounty_id"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1d0a",
                            "name": "CuratorAccepted",
                            "docs": [
                                "A bounty curator is accepted."
                            ],
                            "args": [
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "bounty_id",
                                "curator"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "AccountId"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            301,
                            299,
                            300,
                            305,
                            304,
                            303,
                            306
                        ]
                    },
                    "constants": [
                        {
                            "name": "BountyDepositBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00a0724e180900000000000000000000",
                                "00203d88792d00000000000000000000",
                                "0040e59c301200000000000000000000"
                            ],
                            "docs": [
                                " The amount held on deposit for placing a bounty proposal."
                            ]
                        },
                        {
                            "name": "BountyDepositPayoutDelay",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80700000",
                            "docs": [
                                " The delay period for which a bounty beneficiary need to wait before claim the payout."
                            ]
                        },
                        {
                            "name": "BountyUpdatePeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00270600",
                            "docs": [
                                " Bounty duration in blocks."
                            ]
                        },
                        {
                            "name": "CuratorDepositMultiplier",
                            "type": "U32",
                            "type_value": [
                                435,
                                431,
                                429,
                                432,
                                439,
                                433,
                                437
                            ],
                            "constants_value": "20a10700",
                            "docs": [
                                " The curator deposit is calculated as a percentage of the curator fee.",
                                "",
                                " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                                " `CuratorDepositMin`."
                            ]
                        },
                        {
                            "name": "CuratorDepositMax",
                            "type": "option<U128>",
                            "type_value": [
                                275,
                                274,
                                433,
                                440,
                                434,
                                282
                            ],
                            "constants_value": [
                                "010080c6a47e8d03000000000000000000",
                                "010080e03779c311000000000000000000",
                                "0100008d49fd1a07000000000000000000"
                            ],
                            "docs": [
                                " Maximum amount of funds that should be placed in a deposit for making a proposal."
                            ]
                        },
                        {
                            "name": "CuratorDepositMin",
                            "type": "option<U128>",
                            "type_value": [
                                275,
                                274,
                                433,
                                440,
                                434,
                                282
                            ],
                            "constants_value": [
                                "0100a0724e180900000000000000000000",
                                "0100203d88792d00000000000000000000",
                                "010040e59c301200000000000000000000"
                            ],
                            "docs": [
                                " Minimum amount of funds that should be placed in a deposit for making a proposal."
                            ]
                        },
                        {
                            "name": "BountyValueMinimum",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00203d88792d00000000000000000000",
                                "00a031a95fe300000000000000000000",
                                "00407a10f35a00000000000000000000"
                            ],
                            "docs": [
                                " Minimum value for a bounty."
                            ]
                        },
                        {
                            "name": "DataDepositPerByte",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00e87648170000000000000000000000",
                                "0088526a740000000000000000000000",
                                "00d0ed902e0000000000000000000000"
                            ],
                            "docs": [
                                " The amount held on deposit per byte within the tip report reason or bounty description."
                            ]
                        },
                        {
                            "name": "MaximumReasonLength",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "2c010000",
                            "docs": [
                                " Maximum acceptable reason length.",
                                "",
                                " Benchmarks depend on this value, be sure to update weights file when changing this value"
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InsufficientProposersBalance",
                            "doc": [
                                "Proposer's balance is too low."
                            ]
                        },
                        {
                            "name": "InvalidIndex",
                            "doc": [
                                "No proposal or bounty at that index."
                            ]
                        },
                        {
                            "name": "ReasonTooBig",
                            "doc": [
                                "The reason given is just too big."
                            ]
                        },
                        {
                            "name": "UnexpectedStatus",
                            "doc": [
                                "The bounty status is unexpected."
                            ]
                        },
                        {
                            "name": "RequireCurator",
                            "doc": [
                                "Require bounty curator."
                            ]
                        },
                        {
                            "name": "InvalidValue",
                            "doc": [
                                "Invalid bounty value."
                            ]
                        },
                        {
                            "name": "InvalidFee",
                            "doc": [
                                "Invalid bounty fee."
                            ]
                        },
                        {
                            "name": "PendingPayout",
                            "doc": [
                                "A bounty payout is pending.",
                                "To cancel the bounty, you must unassign and slash the curator."
                            ]
                        },
                        {
                            "name": "Premature",
                            "doc": [
                                "The bounties cannot be claimed/closed because it's still in the countdown period."
                            ]
                        },
                        {
                            "name": "HasActiveChildBounty",
                            "doc": [
                                "The bounty cannot be closed because it has active child bounties."
                            ]
                        },
                        {
                            "name": "TooManyQueued",
                            "doc": [
                                "Too many approvals are already queued."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            533,
                            529,
                            523,
                            527,
                            534,
                            528,
                            531
                        ]
                    },
                    "index": 29
                },
                {
                    "name": "ChildBounties",
                    "prefix": "ChildBounties",
                    "storage": [
                        {
                            "name": "ChildBountyCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Number of total child bounties."
                            ]
                        },
                        {
                            "name": "ParentChildBounties",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U32",
                                    "keys_id": 4,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Number of child bounties per parent bounty.",
                                " Map of parent bounty index to number of child bounties."
                            ]
                        },
                        {
                            "name": "ChildBounties",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "U32"
                                    ],
                                    "value": "pallet_child_bounties:ChildBounty",
                                    "keys_id": [
                                        137,
                                        136,
                                        141,
                                        140
                                    ],
                                    "value_id": [
                                        534,
                                        530,
                                        524,
                                        528,
                                        535,
                                        529,
                                        532
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Child bounties that have been added."
                            ]
                        },
                        {
                            "name": "ChildBountyDescriptions",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": [
                                        532,
                                        528,
                                        522,
                                        526,
                                        533,
                                        527,
                                        530
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The description of each child-bounty."
                            ]
                        },
                        {
                            "name": "ChildrenCuratorFees",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U128",
                                    "keys_id": 4,
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The cumulative child-bounty curator fee for each parent bounty."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1e00",
                            "name": "add_child_bounty",
                            "docs": [
                                "See [`Pallet::add_child_bounty`].",
                                "Add a new child-bounty.",
                                "",
                                "The dispatch origin for this call must be the curator of parent",
                                "bounty and the parent bounty must be in \"active\" state.",
                                "Child-bounty gets added successfully & fund gets transferred from",
                                "parent bounty to child-bounty account, if parent bounty has enough",
                                "funds, else the call fails.",
                                "Upper bound to maximum number of active  child bounties that can be",
                                "added are managed via runtime trait config",
                                "[`Config::MaxActiveChildBountyCount`].",
                                "If the call is success, the status of child-bounty is updated to",
                                "\"Added\".",
                                "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.",
                                "- `value`: Value for executing the proposal.",
                                "- `description`: Text description for the child-bounty."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "description",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "1e01",
                            "name": "propose_curator",
                            "docs": [
                                "See [`Pallet::propose_curator`].",
                                "Propose curator for funded child-bounty.",
                                "",
                                "The dispatch origin for this call must be curator of parent bounty.",
                                "Parent bounty must be in active state, for this child-bounty call to",
                                "work.",
                                "Child-bounty must be in \"Added\" state, for processing the call. And",
                                "state of child-bounty is moved to \"CuratorProposed\" on successful",
                                "call completion.",
                                "- `parent_bounty_id`: Index of parent bounty.",
                                "- `child_bounty_id`: Index of child bounty.",
                                "- `curator`: Address of child-bounty curator.",
                                "- `fee`: payment fee to child-bounty curator for execution."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "curator",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "fee",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1e02",
                            "name": "accept_curator",
                            "docs": [
                                "See [`Pallet::accept_curator`].",
                                "Accept the curator role for the child-bounty.",
                                "",
                                "The dispatch origin for this call must be the curator of this",
                                "child-bounty.",
                                "A deposit will be reserved from the curator and refund upon",
                                "successful payout or cancellation.",
                                "Fee for curator is deducted from curator fee of parent bounty.",
                                "Parent bounty must be in active state, for this child-bounty call to",
                                "work.",
                                "Child-bounty must be in \"CuratorProposed\" state, for processing the",
                                "call. And state of child-bounty is moved to \"Active\" on successful",
                                "call completion.",
                                "- `parent_bounty_id`: Index of parent bounty.",
                                "- `child_bounty_id`: Index of child bounty."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1e03",
                            "name": "unassign_curator",
                            "docs": [
                                "See [`Pallet::unassign_curator`].",
                                "Unassign curator from a child-bounty.",
                                "",
                                "The dispatch origin for this call can be either `RejectOrigin`, or",
                                "the curator of the parent bounty, or any signed origin.",
                                "For the origin other than T::RejectOrigin and the child-bounty",
                                "curator, parent bounty must be in active state, for this call to",
                                "work. We allow child-bounty curator and T::RejectOrigin to execute",
                                "this call irrespective of the parent bounty state.",
                                "If this function is called by the `RejectOrigin` or the",
                                "parent bounty curator, we assume that the child-bounty curator is",
                                "malicious or inactive. As a result, child-bounty curator deposit is",
                                "slashed.",
                                "If the origin is the child-bounty curator, we take this as a sign",
                                "that they are unable to do their job, and are willingly giving up.",
                                "We could slash the deposit, but for now we allow them to unreserve",
                                "their deposit and exit without issue. (We may want to change this if",
                                "it is abused.)",
                                "Finally, the origin can be anyone iff the child-bounty curator is",
                                "\"inactive\". Expiry update due of parent bounty is used to estimate",
                                "inactive state of child-bounty curator.",
                                "This allows anyone in the community to call out that a child-bounty",
                                "curator is not doing their due diligence, and we should pick a new",
                                "one. In this case the child-bounty curator deposit is slashed.",
                                "State of child-bounty is moved to Added state on successful call",
                                "completion.",
                                "- `parent_bounty_id`: Index of parent bounty.",
                                "- `child_bounty_id`: Index of child bounty."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1e04",
                            "name": "award_child_bounty",
                            "docs": [
                                "See [`Pallet::award_child_bounty`].",
                                "Award child-bounty to a beneficiary.",
                                "",
                                "The beneficiary will be able to claim the funds after a delay.",
                                "The dispatch origin for this call must be the parent curator or",
                                "curator of this child-bounty.",
                                "Parent bounty must be in active state, for this child-bounty call to",
                                "work.",
                                "Child-bounty must be in active state, for processing the call. And",
                                "state of child-bounty is moved to \"PendingPayout\" on successful call",
                                "completion.",
                                "- `parent_bounty_id`: Index of parent bounty.",
                                "- `child_bounty_id`: Index of child bounty.",
                                "- `beneficiary`: Beneficiary account."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "beneficiary",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1e05",
                            "name": "claim_child_bounty",
                            "docs": [
                                "See [`Pallet::claim_child_bounty`].",
                                "Claim the payout from an awarded child-bounty after payout delay.",
                                "",
                                "The dispatch origin for this call may be any signed origin.",
                                "Call works independent of parent bounty state, No need for parent",
                                "bounty to be in active state.",
                                "The Beneficiary is paid out with agreed bounty value. Curator fee is",
                                "paid & curator deposit is unreserved.",
                                "Child-bounty must be in \"PendingPayout\" state, for processing the",
                                "call. And instance of child-bounty is removed from the state on",
                                "successful call completion.",
                                "- `parent_bounty_id`: Index of parent bounty.",
                                "- `child_bounty_id`: Index of child bounty."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1e06",
                            "name": "close_child_bounty",
                            "docs": [
                                "See [`Pallet::close_child_bounty`].",
                                "Cancel a proposed or active child-bounty. Child-bounty account funds",
                                "are transferred to parent bounty account. The child-bounty curator",
                                "deposit may be unreserved if possible.",
                                "",
                                "The dispatch origin for this call must be either parent curator or",
                                "`T::RejectOrigin`.",
                                "If the state of child-bounty is `Active`, curator deposit is",
                                "unreserved.",
                                "If the state of child-bounty is `PendingPayout`, call fails &",
                                "returns `PendingPayout` error.",
                                "For the origin other than T::RejectOrigin, parent bounty must be in",
                                "active state, for this child-bounty call to work. For origin",
                                "T::RejectOrigin execution is forced.",
                                "Instance of child-bounty is removed from the state on successful",
                                "call completion.",
                                "- `parent_bounty_id`: Index of parent bounty.",
                                "- `child_bounty_id`: Index of child bounty."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            250,
                            249,
                            254,
                            253
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1e00",
                            "name": "Added",
                            "docs": [
                                "A child-bounty is added."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "index",
                                "child_index"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1e01",
                            "name": "Awarded",
                            "docs": [
                                "A child-bounty is awarded to a beneficiary."
                            ],
                            "args": [
                                "U32",
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "index",
                                "child_index",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BountyIndex",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1e02",
                            "name": "Claimed",
                            "docs": [
                                "A child-bounty is claimed by beneficiary."
                            ],
                            "args": [
                                "U32",
                                "U32",
                                "U128",
                                "AccountId"
                            ],
                            "args_name": [
                                "index",
                                "child_index",
                                "payout",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BountyIndex",
                                "BalanceOf",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1e03",
                            "name": "Canceled",
                            "docs": [
                                "A child-bounty is cancelled."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "index",
                                "child_index"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BountyIndex"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            302,
                            300,
                            301,
                            306,
                            305,
                            304,
                            307
                        ]
                    },
                    "constants": [
                        {
                            "name": "MaxActiveChildBountyCount",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "05000000",
                            "docs": [
                                " Maximum number of child bounties that can be added to a parent bounty."
                            ]
                        },
                        {
                            "name": "ChildBountyValueMinimum",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": [
                                "00a0724e180900000000000000000000",
                                "00203d88792d00000000000000000000",
                                "0040e59c301200000000000000000000"
                            ],
                            "docs": [
                                " Minimum value for a child-bounty."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "ParentBountyNotActive",
                            "doc": [
                                "The parent bounty is not in active state."
                            ]
                        },
                        {
                            "name": "InsufficientBountyBalance",
                            "doc": [
                                "The bounty balance is not enough to add new child-bounty."
                            ]
                        },
                        {
                            "name": "TooManyChildBounties",
                            "doc": [
                                "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            536,
                            532,
                            526,
                            530,
                            537,
                            531,
                            534
                        ]
                    },
                    "index": 30
                },
                {
                    "name": "NominationPools",
                    "prefix": "NominationPools",
                    "storage": [
                        {
                            "name": "TotalValueLocked",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The sum of funds across all pools.",
                                "",
                                " This might be lower but never higher than the sum of `total_balance` of all [`PoolMembers`]",
                                " because calling `pool_withdraw_unbonded` might decrease the total stake of the pool's",
                                " `bonded_account` without adjusting the pallet-internal `UnbondingPool`'s."
                            ]
                        },
                        {
                            "name": "MinJoinBond",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " Minimum amount to bond to join a pool."
                            ]
                        },
                        {
                            "name": "MinCreateBond",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " Minimum bond required to create a pool.",
                                "",
                                " This is the amount that the depositor must put as their initial stake in the pool, as an",
                                " indication of \"skin in the game\".",
                                "",
                                " This is the value that will always exist in the staking ledger of the pool bonded account",
                                " while all other accounts leave."
                            ]
                        },
                        {
                            "name": "MaxPools",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
                                " pools can exist."
                            ]
                        },
                        {
                            "name": "MaxPoolMembers",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Maximum number of members that can exist in the system. If `None`, then the count",
                                " members are not bound on a system wide basis."
                            ]
                        },
                        {
                            "name": "MaxPoolMembersPerPool",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Maximum number of members that may belong to pool. If `None`, then the count of",
                                " members is not bound on a per pool basis."
                            ]
                        },
                        {
                            "name": "GlobalMaxCommission",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": [
                                    51,
                                    50,
                                    49
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                                " pool commissions that are > `GlobalMaxCommission`, necessary if a future",
                                " `GlobalMaxCommission` is lower than some current pool commissions."
                            ]
                        },
                        {
                            "name": "PoolMembers",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_nomination_pools:PoolMember",
                                    "keys_id": 0,
                                    "value_id": [
                                        537,
                                        533,
                                        527,
                                        531,
                                        538,
                                        532,
                                        535
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Active members.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                            ]
                        },
                        {
                            "name": "CounterForPoolMembers",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "BondedPools",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_nomination_pools:BondedPoolInner",
                                    "keys_id": 4,
                                    "value_id": [
                                        540,
                                        536,
                                        530,
                                        534,
                                        541,
                                        535,
                                        538
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Storage for bonded pools."
                            ]
                        },
                        {
                            "name": "CounterForBondedPools",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "RewardPools",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_nomination_pools:RewardPool",
                                    "keys_id": 4,
                                    "value_id": [
                                        545,
                                        541,
                                        535,
                                        539,
                                        546,
                                        540,
                                        543
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
                                " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."
                            ]
                        },
                        {
                            "name": "CounterForRewardPools",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "SubPoolsStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_nomination_pools:SubPools",
                                    "keys_id": 4,
                                    "value_id": [
                                        546,
                                        542,
                                        536,
                                        540,
                                        547,
                                        541,
                                        544
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Groups of unbonding pools. Each group of unbonding pools belongs to a",
                                " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
                            ]
                        },
                        {
                            "name": "CounterForSubPoolsStorage",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "Metadata",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": [
                                        552,
                                        548,
                                        542,
                                        546,
                                        553,
                                        547,
                                        550
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Metadata for the pool."
                            ]
                        },
                        {
                            "name": "CounterForMetadata",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "LastPoolId",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Ever increasing number of all pools created so far."
                            ]
                        },
                        {
                            "name": "ReversePoolIdLookup",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "U32",
                                    "keys_id": 0,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A reverse lookup from the pool's account id to its id.",
                                "",
                                " This is only used for slashing. In all other instances, the pool id is used, and the",
                                " accounts are deterministically derived from it."
                            ]
                        },
                        {
                            "name": "CounterForReversePoolIdLookup",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "ClaimPermissions",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_nomination_pools:ClaimPermission",
                                    "keys_id": 0,
                                    "value_id": [
                                        258,
                                        257,
                                        262,
                                        261
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Map from a pool member account to their opted claim permission."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1f00",
                            "name": "join",
                            "docs": [
                                "See [`Pallet::join`].",
                                "Stake funds with a pool. The amount to bond is transferred from the member to the",
                                "pools account and immediately increases the pools bond.",
                                "",
                                "# Note",
                                "* An account can only be a member of a single pool.",
                                "* An account cannot join the same pool multiple times.",
                                "* This call will *not* dust the member account, so the member must have at least",
                                "  `existential deposit + amount` in their account.",
                                "* Only a pool with [`PoolState::Open`] can be joined"
                            ],
                            "args": [
                                {
                                    "name": "amount",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                }
                            ]
                        },
                        {
                            "lookup": "1f01",
                            "name": "bond_extra",
                            "docs": [
                                "See [`Pallet::bond_extra`].",
                                "Bond `extra` more funds from `origin` into the pool to which they already belong.",
                                "",
                                "Additional funds can come from either the free balance of the account, of from the",
                                "accumulated rewards, see [`BondExtra`].",
                                "Bonding extra funds implies an automatic payout of all pending rewards as well.",
                                "See `bond_extra_other` to bond pending rewards of `other` members."
                            ],
                            "args": [
                                {
                                    "name": "extra",
                                    "type": "pallet_nomination_pools:BondExtra",
                                    "type_name": "BondExtra<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f02",
                            "name": "claim_payout",
                            "docs": [
                                "See [`Pallet::claim_payout`].",
                                "A bonded member can use this to claim their payout based on the rewards that the pool",
                                "has accumulated since their last claimed payout (OR since joining if this is their first",
                                "time claiming rewards). The payout will be transferred to the member's account.",
                                "",
                                "The member will earn rewards pro rata based on the members stake vs the sum of the",
                                "members in the pools stake. Rewards do not \"expire\".",
                                "See `claim_payout_other` to caim rewards on bahalf of some `other` pool member."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "1f03",
                            "name": "unbond",
                            "docs": [
                                "See [`Pallet::unbond`].",
                                "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It",
                                "implicitly collects the rewards one last time, since not doing so would mean some",
                                "rewards would be forfeited.",
                                "",
                                "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                                "account).",
                                "# Conditions for a permissionless dispatch.",
                                "* The pool is blocked and the caller is either the root or bouncer. This is refereed to",
                                "  as a kick.",
                                "* The pool is destroying and the member is not the depositor.",
                                "* The pool is destroying, the member is the depositor and no other members are in the",
                                "  pool.",
                                "## Conditions for permissioned dispatch (i.e. the caller is also the",
                                "`member_account`):",
                                "* The caller is not the depositor.",
                                "* The caller is the depositor, the pool is destroying and no other members are in the",
                                "# Note",
                                "If there are too many unlocking chunks to unbond with the pool account,",
                                "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.",
                                "The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]",
                                "to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks",
                                "are available). However, it may not be possible to release the current unlocking chunks,",
                                "in which case, the result of this call will likely be the `NoMoreChunks` error from the",
                                "staking system."
                            ],
                            "args": [
                                {
                                    "name": "member_account",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "unbonding_points",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1f04",
                            "name": "pool_withdraw_unbonded",
                            "docs": [
                                "See [`Pallet::pool_withdraw_unbonded`].",
                                "Call `withdraw_unbonded` for the pools account. This call can be made by any account.",
                                "",
                                "This is useful if their are too many unlocking chunks to call `unbond`, and some",
                                "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user",
                                "would probably see an error like `NoMoreChunks` emitted from the staking system when",
                                "they attempt to unbond."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "1f05",
                            "name": "withdraw_unbonded",
                            "docs": [
                                "See [`Pallet::withdraw_unbonded`].",
                                "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an",
                                "error is returned.",
                                "",
                                "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                                "account).",
                                "# Conditions for a permissionless dispatch",
                                "* The pool is in destroy mode and the target is not the depositor.",
                                "* The target is the depositor and they are the only member in the sub pools.",
                                "* The pool is blocked and the caller is either the root or bouncer.",
                                "# Conditions for permissioned dispatch",
                                "* The caller is the target and they are not the depositor.",
                                "# Note",
                                "If the target is the depositor, the pool will be destroyed."
                            ],
                            "args": [
                                {
                                    "name": "member_account",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "1f06",
                            "name": "create",
                            "docs": [
                                "See [`Pallet::create`].",
                                "Create a new delegation pool.",
                                "",
                                "# Arguments",
                                "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of",
                                "  deposit since the pools creator cannot fully unbond funds until the pool is being",
                                "  destroyed.",
                                "* `index` - A disambiguation index for creating the account. Likely only useful when",
                                "  creating multiple pools in the same extrinsic.",
                                "* `root` - The account to set as [`PoolRoles::root`].",
                                "* `nominator` - The account to set as the [`PoolRoles::nominator`].",
                                "* `bouncer` - The account to set as the [`PoolRoles::bouncer`].",
                                "# Note",
                                "In addition to `amount`, the caller will transfer the existential deposit; so the caller",
                                "needs at have at least `amount + existential_deposit` transferrable."
                            ],
                            "args": [
                                {
                                    "name": "amount",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "root",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "nominator",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "bouncer",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1f07",
                            "name": "create_with_pool_id",
                            "docs": [
                                "See [`Pallet::create_with_pool_id`].",
                                "Create a new delegation pool with a previously used pool id",
                                "",
                                "# Arguments",
                                "same as `create` with the inclusion of",
                                "* `pool_id` - `A valid PoolId."
                            ],
                            "args": [
                                {
                                    "name": "amount",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "root",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "nominator",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "bouncer",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                }
                            ]
                        },
                        {
                            "lookup": "1f08",
                            "name": "nominate",
                            "docs": [
                                "See [`Pallet::nominate`].",
                                "Nominate on behalf of the pool.",
                                "",
                                "The dispatch origin of this call must be signed by the pool nominator or the pool",
                                "root role.",
                                "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                                "account."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "validators",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f09",
                            "name": "set_state",
                            "docs": [
                                "See [`Pallet::set_state`].",
                                "Set a new state for the pool.",
                                "",
                                "If a pool is already in the `Destroying` state, then under no condition can its state",
                                "change again.",
                                "The dispatch origin of this call must be either:",
                                "1. signed by the bouncer, or the root role of the pool,",
                                "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and",
                                "   then the state of the pool can be permissionlessly changed to `Destroying`."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "state",
                                    "type": "pallet_nomination_pools:PoolState",
                                    "type_name": "PoolState"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0a",
                            "name": "set_metadata",
                            "docs": [
                                "See [`Pallet::set_metadata`].",
                                "Set a new metadata for the pool.",
                                "",
                                "The dispatch origin of this call must be signed by the bouncer, or the root role of the",
                                "pool."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "metadata",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0b",
                            "name": "set_configs",
                            "docs": [
                                "See [`Pallet::set_configs`].",
                                "Update configurations for the nomination pools. The origin for this call must be",
                                "Root.",
                                "",
                                "# Arguments",
                                "* `min_join_bond` - Set [`MinJoinBond`].",
                                "* `min_create_bond` - Set [`MinCreateBond`].",
                                "* `max_pools` - Set [`MaxPools`].",
                                "* `max_members` - Set [`MaxPoolMembers`].",
                                "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].",
                                "* `global_max_commission` - Set [`GlobalMaxCommission`]."
                            ],
                            "args": [
                                {
                                    "name": "min_join_bond",
                                    "type": [
                                        "pallet_nomination_pools:ConfigOp@254",
                                        "pallet_nomination_pools:ConfigOp@253",
                                        "pallet_nomination_pools:ConfigOp@258",
                                        "pallet_nomination_pools:ConfigOp@257"
                                    ],
                                    "type_name": "ConfigOp<BalanceOf>"
                                },
                                {
                                    "name": "min_create_bond",
                                    "type": [
                                        "pallet_nomination_pools:ConfigOp@254",
                                        "pallet_nomination_pools:ConfigOp@253",
                                        "pallet_nomination_pools:ConfigOp@258",
                                        "pallet_nomination_pools:ConfigOp@257"
                                    ],
                                    "type_name": "ConfigOp<BalanceOf>"
                                },
                                {
                                    "name": "max_pools",
                                    "type": [
                                        "pallet_nomination_pools:ConfigOp@255",
                                        "pallet_nomination_pools:ConfigOp@254",
                                        "pallet_nomination_pools:ConfigOp@259",
                                        "pallet_nomination_pools:ConfigOp@258"
                                    ],
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "max_members",
                                    "type": [
                                        "pallet_nomination_pools:ConfigOp@255",
                                        "pallet_nomination_pools:ConfigOp@254",
                                        "pallet_nomination_pools:ConfigOp@259",
                                        "pallet_nomination_pools:ConfigOp@258"
                                    ],
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "max_members_per_pool",
                                    "type": [
                                        "pallet_nomination_pools:ConfigOp@255",
                                        "pallet_nomination_pools:ConfigOp@254",
                                        "pallet_nomination_pools:ConfigOp@259",
                                        "pallet_nomination_pools:ConfigOp@258"
                                    ],
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "global_max_commission",
                                    "type": [
                                        "pallet_nomination_pools:ConfigOp@256",
                                        "pallet_nomination_pools:ConfigOp@255",
                                        "pallet_nomination_pools:ConfigOp@260",
                                        "pallet_nomination_pools:ConfigOp@259"
                                    ],
                                    "type_name": "ConfigOp<Perbill>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0c",
                            "name": "update_roles",
                            "docs": [
                                "See [`Pallet::update_roles`].",
                                "Update the roles of the pool.",
                                "",
                                "The root is the only entity that can change any of the roles, including itself,",
                                "excluding the depositor, who can never change.",
                                "It emits an event, notifying UIs of the role change. This event is quite relevant to",
                                "most pool members and they should be informed of changes to pool roles."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "new_root",
                                    "type": [
                                        "pallet_nomination_pools:ConfigOp@257",
                                        "pallet_nomination_pools:ConfigOp@256",
                                        "pallet_nomination_pools:ConfigOp@261",
                                        "pallet_nomination_pools:ConfigOp@260"
                                    ],
                                    "type_name": "ConfigOp<AccountId>"
                                },
                                {
                                    "name": "new_nominator",
                                    "type": [
                                        "pallet_nomination_pools:ConfigOp@257",
                                        "pallet_nomination_pools:ConfigOp@256",
                                        "pallet_nomination_pools:ConfigOp@261",
                                        "pallet_nomination_pools:ConfigOp@260"
                                    ],
                                    "type_name": "ConfigOp<AccountId>"
                                },
                                {
                                    "name": "new_bouncer",
                                    "type": [
                                        "pallet_nomination_pools:ConfigOp@257",
                                        "pallet_nomination_pools:ConfigOp@256",
                                        "pallet_nomination_pools:ConfigOp@261",
                                        "pallet_nomination_pools:ConfigOp@260"
                                    ],
                                    "type_name": "ConfigOp<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0d",
                            "name": "chill",
                            "docs": [
                                "See [`Pallet::chill`].",
                                "Chill on behalf of the pool.",
                                "",
                                "The dispatch origin of this call must be signed by the pool nominator or the pool",
                                "root role, same as [`Pallet::nominate`].",
                                "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                                "account."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0e",
                            "name": "bond_extra_other",
                            "docs": [
                                "See [`Pallet::bond_extra_other`].",
                                "`origin` bonds funds from `extra` for some pool member `member` into their respective",
                                "pools.",
                                "",
                                "`origin` can bond extra funds from free balance or pending rewards when `origin ==",
                                "other`.",
                                "In the case of `origin != other`, `origin` can only bond extra pending rewards of",
                                "`other` members assuming set_claim_permission for the given member is",
                                "`PermissionlessAll` or `PermissionlessCompound`."
                            ],
                            "args": [
                                {
                                    "name": "member",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "extra",
                                    "type": "pallet_nomination_pools:BondExtra",
                                    "type_name": "BondExtra<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0f",
                            "name": "set_claim_permission",
                            "docs": [
                                "See [`Pallet::set_claim_permission`].",
                                "Allows a pool member to set a claim permission to allow or disallow permissionless",
                                "bonding and withdrawing.",
                                "",
                                "By default, this is `Permissioned`, which implies only the pool member themselves can",
                                "claim their pending rewards. If a pool member wishes so, they can set this to",
                                "`PermissionlessAll` to allow any account to claim their rewards and bond extra to the",
                                "pool.",
                                "# Arguments",
                                "* `origin` - Member of a pool.",
                                "* `actor` - Account to claim reward. // improve this"
                            ],
                            "args": [
                                {
                                    "name": "permission",
                                    "type": "pallet_nomination_pools:ClaimPermission",
                                    "type_name": "ClaimPermission"
                                }
                            ]
                        },
                        {
                            "lookup": "1f10",
                            "name": "claim_payout_other",
                            "docs": [
                                "See [`Pallet::claim_payout_other`].",
                                "`origin` can claim payouts on some pool member `other`'s behalf.",
                                "",
                                "Pool member `other` must have a `PermissionlessAll` or `PermissionlessWithdraw` in order",
                                "for this call to be successful."
                            ],
                            "args": [
                                {
                                    "name": "other",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                }
                            ]
                        },
                        {
                            "lookup": "1f11",
                            "name": "set_commission",
                            "docs": [
                                "See [`Pallet::set_commission`].",
                                "Set the commission of a pool.",
                                "Both a commission percentage and a commission payee must be provided in the `current`",
                                "tuple. Where a `current` of `None` is provided, any current commission will be removed.",
                                "",
                                "- If a `None` is supplied to `new_commission`, existing commission will be removed."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "new_commission",
                                    "type": "option<Tuple:U32AccountId>",
                                    "type_name": "Option<(Perbill, AccountId)>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f12",
                            "name": "set_commission_max",
                            "docs": [
                                "See [`Pallet::set_commission_max`].",
                                "Set the maximum commission of a pool.",
                                "",
                                "- Initial max can be set to any `Perbill`, and only smaller values thereafter.",
                                "- Current commission will be lowered in the event it is higher than a new max",
                                "  commission."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "max_commission",
                                    "type": "U32",
                                    "type_name": "Perbill"
                                }
                            ]
                        },
                        {
                            "lookup": "1f13",
                            "name": "set_commission_change_rate",
                            "docs": [
                                "See [`Pallet::set_commission_change_rate`].",
                                "Set the commission change rate for a pool.",
                                "",
                                "Initial change rate is not bounded, whereas subsequent updates can only be more",
                                "restrictive than the current."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "change_rate",
                                    "type": "pallet_nomination_pools:CommissionChangeRate",
                                    "type_name": [
                                        "CommissionChangeRate<BlockNumberFor>",
                                        "CommissionChangeRate<BlockNumber>"
                                    ]
                                }
                            ]
                        },
                        {
                            "lookup": "1f14",
                            "name": "claim_commission",
                            "docs": [
                                "See [`Pallet::claim_commission`].",
                                "Claim pending commission.",
                                "",
                                "The dispatch origin of this call must be signed by the `root` role of the pool. Pending",
                                "commission is paid out and added to total claimed commission`. Total pending commission",
                                "is reset to zero. the current."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                }
                            ]
                        },
                        {
                            "lookup": "1f15",
                            "name": "adjust_pool_deposit",
                            "docs": [
                                "See [`Pallet::adjust_pool_deposit`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            251,
                            250,
                            255,
                            254
                        ]
                    },
                    "events": [
                        {
                            "lookup": "1f00",
                            "name": "Created",
                            "docs": [
                                "A pool has been created."
                            ],
                            "args": [
                                "AccountId",
                                "U32"
                            ],
                            "args_name": [
                                "depositor",
                                "pool_id"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId"
                            ]
                        },
                        {
                            "lookup": "1f01",
                            "name": "Bonded",
                            "docs": [
                                "A member has became bonded in a pool."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U128",
                                "Bool"
                            ],
                            "args_name": [
                                "member",
                                "pool_id",
                                "bonded",
                                "joined"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId",
                                "BalanceOf",
                                "bool"
                            ]
                        },
                        {
                            "lookup": "1f02",
                            "name": "PaidOut",
                            "docs": [
                                "A payout has been made to a member."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "member",
                                "pool_id",
                                "payout"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f03",
                            "name": "Unbonded",
                            "docs": [
                                "A member has unbonded from their pool.",
                                "",
                                "- `balance` is the corresponding balance of the number of points that has been",
                                "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
                                "  pool.",
                                "- `points` is the number of points that are issued as a result of `balance` being",
                                "dissolved into the corresponding unbonding pool.",
                                "- `era` is the era in which the balance will be unbonded.",
                                "In the absence of slashing, these values will match. In the presence of slashing, the",
                                "number of points that are issued in the unbonding pool will be less than the amount",
                                "requested to be unbonded."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U128",
                                "U128",
                                "U32"
                            ],
                            "args_name": [
                                "member",
                                "pool_id",
                                "balance",
                                "points",
                                "era"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId",
                                "BalanceOf",
                                "BalanceOf",
                                "EraIndex"
                            ]
                        },
                        {
                            "lookup": "1f04",
                            "name": "Withdrawn",
                            "docs": [
                                "A member has withdrawn from their pool.",
                                "",
                                "The given number of `points` have been dissolved in return of `balance`.",
                                "",
                                "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
                                "will be 1."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U128",
                                "U128"
                            ],
                            "args_name": [
                                "member",
                                "pool_id",
                                "balance",
                                "points"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId",
                                "BalanceOf",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f05",
                            "name": "Destroyed",
                            "docs": [
                                "A pool has been destroyed."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "pool_id"
                            ],
                            "args_type_name": [
                                "PoolId"
                            ]
                        },
                        {
                            "lookup": "1f06",
                            "name": "StateChanged",
                            "docs": [
                                "The state of a pool has changed"
                            ],
                            "args": [
                                "U32",
                                "pallet_nomination_pools:PoolState"
                            ],
                            "args_name": [
                                "pool_id",
                                "new_state"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "PoolState"
                            ]
                        },
                        {
                            "lookup": "1f07",
                            "name": "MemberRemoved",
                            "docs": [
                                "A member has been removed from a pool.",
                                "",
                                "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
                            ],
                            "args": [
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "pool_id",
                                "member"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1f08",
                            "name": "RolesUpdated",
                            "docs": [
                                "The roles of a pool have been updated to the given new roles. Note that the depositor",
                                "can never change."
                            ],
                            "args": [
                                "option<AccountId>",
                                "option<AccountId>",
                                "option<AccountId>"
                            ],
                            "args_name": [
                                "root",
                                "bouncer",
                                "nominator"
                            ],
                            "args_type_name": [
                                "Option<AccountId>",
                                "Option<AccountId>",
                                "Option<AccountId>"
                            ]
                        },
                        {
                            "lookup": "1f09",
                            "name": "PoolSlashed",
                            "docs": [
                                "The active balance of pool `pool_id` has been slashed to `balance`."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "pool_id",
                                "balance"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f0a",
                            "name": "UnbondingPoolSlashed",
                            "docs": [
                                "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
                            ],
                            "args": [
                                "U32",
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "pool_id",
                                "era",
                                "balance"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "EraIndex",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f0b",
                            "name": "PoolCommissionUpdated",
                            "docs": [
                                "A pool's commission setting has been changed."
                            ],
                            "args": [
                                "U32",
                                "option<Tuple:U32AccountId>"
                            ],
                            "args_name": [
                                "pool_id",
                                "current"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "Option<(Perbill, AccountId)>"
                            ]
                        },
                        {
                            "lookup": "1f0c",
                            "name": "PoolMaxCommissionUpdated",
                            "docs": [
                                "A pool's maximum commission setting has been changed."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "pool_id",
                                "max_commission"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "Perbill"
                            ]
                        },
                        {
                            "lookup": "1f0d",
                            "name": "PoolCommissionChangeRateUpdated",
                            "docs": [
                                "A pool's commission `change_rate` has been changed."
                            ],
                            "args": [
                                "U32",
                                "pallet_nomination_pools:CommissionChangeRate"
                            ],
                            "args_name": [
                                "pool_id",
                                "change_rate"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "CommissionChangeRate<BlockNumberFor>",
                                "CommissionChangeRate<BlockNumber>"
                            ]
                        },
                        {
                            "lookup": "1f0e",
                            "name": "PoolCommissionClaimed",
                            "docs": [
                                "Pool commission has been claimed."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "pool_id",
                                "commission"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f0f",
                            "name": "MinBalanceDeficitAdjusted",
                            "docs": [
                                "Topped up deficit in frozen ED of the reward pool."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "pool_id",
                                "amount"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f10",
                            "name": "MinBalanceExcessAdjusted",
                            "docs": [
                                "Claimed excess frozen ED of af the reward pool."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "pool_id",
                                "amount"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "BalanceOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            303,
                            301,
                            302,
                            307,
                            306,
                            305,
                            308
                        ]
                    },
                    "constants": [
                        {
                            "name": "PalletId",
                            "type": "[U8; 8]",
                            "type_value": [
                                436,
                                432,
                                430,
                                434,
                                441,
                                435,
                                438
                            ],
                            "constants_value": "70792f6e6f706c73",
                            "docs": [
                                " The nomination pool's pallet id."
                            ]
                        },
                        {
                            "name": "MaxPointsToBalance",
                            "type": "U8",
                            "type_value": 2,
                            "constants_value": "0a",
                            "docs": [
                                " The maximum pool points-to-balance ratio that an `open` pool can have.",
                                "",
                                " This is important in the event slashing takes place and the pool's points-to-balance",
                                " ratio becomes disproportional.",
                                "",
                                " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
                                " are a function of number of points, and by setting this value to e.g. 10, you ensure",
                                " that the total number of points in the system are at most 10 times the total_issuance of",
                                " the chain, in the absolute worse case.",
                                "",
                                " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
                                " Such a scenario would also be the equivalent of the pool being 90% slashed."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "PoolNotFound",
                            "doc": [
                                "A (bonded) pool id does not exist."
                            ]
                        },
                        {
                            "name": "PoolMemberNotFound",
                            "doc": [
                                "An account is not a member."
                            ]
                        },
                        {
                            "name": "RewardPoolNotFound",
                            "doc": [
                                "A reward pool does not exist. In all cases this is a system logic error."
                            ]
                        },
                        {
                            "name": "SubPoolsNotFound",
                            "doc": [
                                "A sub pool does not exist."
                            ]
                        },
                        {
                            "name": "AccountBelongsToOtherPool",
                            "doc": [
                                "An account is already delegating in another pool. An account may only belong to one",
                                "pool at a time."
                            ]
                        },
                        {
                            "name": "FullyUnbonding",
                            "doc": [
                                "The member is fully unbonded (and thus cannot access the bonded and reward pool",
                                "anymore to, for example, collect rewards)."
                            ]
                        },
                        {
                            "name": "MaxUnbondingLimit",
                            "doc": [
                                "The member cannot unbond further chunks due to reaching the limit."
                            ]
                        },
                        {
                            "name": "CannotWithdrawAny",
                            "doc": [
                                "None of the funds can be withdrawn yet because the bonding duration has not passed."
                            ]
                        },
                        {
                            "name": "MinimumBondNotMet",
                            "doc": [
                                "The amount does not meet the minimum bond to either join or create a pool.",
                                "",
                                "The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The",
                                "caller does not have nominating permissions for the pool. Members can never unbond to a",
                                "value below `MinJoinBond`.",
                                "The depositor can never unbond to a value less than",
                                "`Pallet::depositor_min_bond`. The caller does not have nominating",
                                "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."
                            ]
                        },
                        {
                            "name": "OverflowRisk",
                            "doc": [
                                "The transaction could not be executed due to overflow risk for the pool."
                            ]
                        },
                        {
                            "name": "NotDestroying",
                            "doc": [
                                "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
                                "other members to be permissionlessly unbonded."
                            ]
                        },
                        {
                            "name": "NotNominator",
                            "doc": [
                                "The caller does not have nominating permissions for the pool."
                            ]
                        },
                        {
                            "name": "NotKickerOrDestroying",
                            "doc": [
                                "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
                            ]
                        },
                        {
                            "name": "NotOpen",
                            "doc": [
                                "The pool is not open to join"
                            ]
                        },
                        {
                            "name": "MaxPools",
                            "doc": [
                                "The system is maxed out on pools."
                            ]
                        },
                        {
                            "name": "MaxPoolMembers",
                            "doc": [
                                "Too many members in the pool or system."
                            ]
                        },
                        {
                            "name": "CanNotChangeState",
                            "doc": [
                                "The pools state cannot be changed."
                            ]
                        },
                        {
                            "name": "DoesNotHavePermission",
                            "doc": [
                                "The caller does not have adequate permissions."
                            ]
                        },
                        {
                            "name": "MetadataExceedsMaxLen",
                            "doc": [
                                "Metadata exceeds [`Config::MaxMetadataLen`]"
                            ]
                        },
                        {
                            "name": "Defensive",
                            "doc": [
                                "Some error occurred that should never happen. This should be reported to the",
                                "maintainers."
                            ],
                            "fields": [
                                {
                                    "type": "pallet_nomination_pools:pallet:DefensiveError",
                                    "type_name": "DefensiveError",
                                    "doc": null
                                }
                            ]
                        },
                        {
                            "name": "PartialUnbondNotAllowedPermissionlessly",
                            "doc": [
                                "Partial unbonding now allowed permissionlessly."
                            ]
                        },
                        {
                            "name": "MaxCommissionRestricted",
                            "doc": [
                                "The pool's max commission cannot be set higher than the existing value."
                            ]
                        },
                        {
                            "name": "CommissionExceedsMaximum",
                            "doc": [
                                "The supplied commission exceeds the max allowed commission."
                            ]
                        },
                        {
                            "name": "CommissionExceedsGlobalMaximum",
                            "doc": [
                                "The supplied commission exceeds global maximum commission."
                            ]
                        },
                        {
                            "name": "CommissionChangeThrottled",
                            "doc": [
                                "Not enough blocks have surpassed since the last commission update."
                            ]
                        },
                        {
                            "name": "CommissionChangeRateNotAllowed",
                            "doc": [
                                "The submitted changes to commission change rate are not allowed."
                            ]
                        },
                        {
                            "name": "NoPendingCommission",
                            "doc": [
                                "There is no pending commission to claim."
                            ]
                        },
                        {
                            "name": "NoCommissionCurrentSet",
                            "doc": [
                                "No commission current has been set."
                            ]
                        },
                        {
                            "name": "PoolIdInUse",
                            "doc": [
                                "Pool id currently in use."
                            ]
                        },
                        {
                            "name": "InvalidPoolId",
                            "doc": [
                                "Pool id provided is not correct/usable."
                            ]
                        },
                        {
                            "name": "BondExtraRestricted",
                            "doc": [
                                "Bonding extra is restricted to the exact pending reward amount."
                            ]
                        },
                        {
                            "name": "NothingToAdjust",
                            "doc": [
                                "No imbalance in the ED deposit for the pool."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            553,
                            549,
                            543,
                            547,
                            554,
                            548,
                            551
                        ]
                    },
                    "index": 31
                },
                {
                    "name": "GearProgram",
                    "prefix": "GearProgram",
                    "storage": [
                        {
                            "name": "CodeStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": [
                                        "gear_core:code:instrumented:InstrumentedCode",
                                        "gear_core:code:InstrumentedCode"
                                    ],
                                    "keys_id": [
                                        263,
                                        262,
                                        267,
                                        266,
                                        191,
                                        185,
                                        183
                                    ],
                                    "value_id": [
                                        555,
                                        551,
                                        545,
                                        549,
                                        556,
                                        550,
                                        553,
                                        440,
                                        407,
                                        400
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "CodeLenStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "U32",
                                    "keys_id": [
                                        263,
                                        262,
                                        267,
                                        266,
                                        191,
                                        185,
                                        183
                                    ],
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "OriginalCodeStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": [
                                        263,
                                        262,
                                        267,
                                        266,
                                        191,
                                        185,
                                        183
                                    ],
                                    "value_id": [
                                        13,
                                        12
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "MetadataStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "gear_common:CodeMetadata",
                                    "keys_id": [
                                        263,
                                        262,
                                        267,
                                        266,
                                        191,
                                        185,
                                        183
                                    ],
                                    "value_id": [
                                        562,
                                        558,
                                        551,
                                        550,
                                        553,
                                        560,
                                        554,
                                        557,
                                        444,
                                        412,
                                        405
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "ProgramStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": [
                                        "gear_core:program:Program",
                                        "gear_common:Program",
                                        "Tuple:gear_common:ProgramU32"
                                    ],
                                    "keys_id": [
                                        264,
                                        263,
                                        268,
                                        267,
                                        192,
                                        186,
                                        184
                                    ],
                                    "value_id": [
                                        563,
                                        559,
                                        552,
                                        551,
                                        554,
                                        561,
                                        555,
                                        558,
                                        445,
                                        413,
                                        406
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "MemoryPages",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]",
                                        "U32",
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": [
                                        580,
                                        576,
                                        572,
                                        565,
                                        564
                                    ],
                                    "value_id": [
                                        581,
                                        577,
                                        573,
                                        566,
                                        565
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "PausedProgramStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "Tuple:U32H256",
                                    "keys_id": [
                                        264,
                                        263,
                                        268,
                                        267,
                                        192,
                                        186
                                    ],
                                    "value_id": [
                                        579,
                                        575,
                                        569,
                                        568,
                                        565,
                                        572,
                                        566,
                                        456,
                                        429
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "ResumeSessionsNonce",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": [
                                    "U32",
                                    "U128"
                                ],
                                "PlainTypeValue": [
                                    4,
                                    6
                                ]
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "ResumeSessions",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "U128"
                                    ],
                                    "value": "gear_common:paused_program_storage:ResumeSession",
                                    "keys_id": [
                                        4,
                                        6
                                    ],
                                    "value_id": [
                                        580,
                                        576,
                                        570,
                                        569,
                                        566,
                                        573,
                                        567,
                                        457
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "WaitingInitStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "Vec<[U8; 32]>",
                                    "keys_id": [
                                        263,
                                        268,
                                        267,
                                        192,
                                        186,
                                        184
                                    ],
                                    "value_id": [
                                        568,
                                        567,
                                        564,
                                        571,
                                        565,
                                        455,
                                        428,
                                        422
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "MemoryPageStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]",
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": [
                                        563,
                                        570,
                                        564,
                                        567,
                                        454,
                                        425,
                                        419
                                    ],
                                    "value_id": [
                                        272,
                                        277,
                                        276,
                                        200,
                                        426,
                                        420
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "SessionMemoryPages",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "U128"
                                    ],
                                    "value": [
                                        "Vec<Tuple:gear_core:pages:GearPagegear_core:memory:PageBuf>",
                                        "Vec<Tuple:gear_core:memory:GearPagegear_core:memory:PageBuf>"
                                    ],
                                    "keys_id": 6,
                                    "value_id": [
                                        269,
                                        274,
                                        273,
                                        197
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "errors": [
                        {
                            "name": "DuplicateItem",
                            "doc": null
                        },
                        {
                            "name": "ProgramNotFound",
                            "doc": null
                        },
                        {
                            "name": "NotActiveProgram",
                            "doc": null
                        },
                        {
                            "name": "CannotFindDataForPage",
                            "doc": null
                        },
                        {
                            "name": "ProgramCodeNotFound",
                            "doc": null
                        },
                        {
                            "name": "ResumeSessionNotFound",
                            "doc": null
                        },
                        {
                            "name": "NotSessionOwner",
                            "doc": null
                        },
                        {
                            "name": "ResumeSessionFailed",
                            "doc": null
                        },
                        {
                            "name": "DuplicateResumeSession",
                            "doc": null
                        },
                        {
                            "name": "ItemNotFound",
                            "doc": null
                        }
                    ],
                    "errors_value": {
                        "type": [
                            583,
                            581,
                            577,
                            571,
                            570,
                            567,
                            574,
                            568,
                            458,
                            430,
                            423
                        ]
                    },
                    "index": 100
                },
                {
                    "name": "GearMessenger",
                    "prefix": "GearMessenger",
                    "storage": [
                        {
                            "name": "Dequeued",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Dispatches",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "gear_common:storage:complicated:dequeue:LinkedNode",
                                    "keys_id": [
                                        265,
                                        264,
                                        269,
                                        268,
                                        193,
                                        187,
                                        185
                                    ],
                                    "value_id": [
                                        584,
                                        582,
                                        578,
                                        572,
                                        571,
                                        568,
                                        575,
                                        569,
                                        459,
                                        431,
                                        424
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "CounterForDispatches",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "Head",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "[U8; 32]",
                                "PlainTypeValue": [
                                    265,
                                    264,
                                    269,
                                    268,
                                    193,
                                    187,
                                    185
                                ]
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Mailbox",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "[U8; 32]"
                                    ],
                                    "value": [
                                        "Tuple:gear_core:message:user:UserStoredMessagegear_common:storage:primitives:Interval",
                                        "Tuple:gear_core:message:stored:StoredMessagegear_common:storage:primitives:Interval"
                                    ],
                                    "keys_id": [
                                        599,
                                        597,
                                        593,
                                        587,
                                        586,
                                        584,
                                        591,
                                        585,
                                        588,
                                        474,
                                        441,
                                        434
                                    ],
                                    "value_id": [
                                        600,
                                        598,
                                        594,
                                        588,
                                        587,
                                        585,
                                        592,
                                        586,
                                        589,
                                        475,
                                        442,
                                        435
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "QueueProcessing",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": [
                                    54,
                                    53,
                                    52
                                ]
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Sent",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Tail",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "[U8; 32]",
                                "PlainTypeValue": [
                                    265,
                                    264,
                                    269,
                                    268,
                                    193,
                                    187,
                                    185
                                ]
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Waitlist",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]",
                                        "[U8; 32]"
                                    ],
                                    "value": "Tuple:gear_core:message:stored:StoredDispatchgear_common:storage:primitives:Interval",
                                    "keys_id": [
                                        603,
                                        601,
                                        597,
                                        591,
                                        590,
                                        588,
                                        595,
                                        589,
                                        592,
                                        478,
                                        444,
                                        437
                                    ],
                                    "value_id": [
                                        604,
                                        602,
                                        598,
                                        592,
                                        591,
                                        589,
                                        596,
                                        590,
                                        593,
                                        479,
                                        445,
                                        438
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "DispatchStash",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": [
                                        "Tuple:gear_core:message:stored:StoredDelayedDispatchgear_common:storage:primitives:Interval",
                                        "Tuple:gear_core:message:stored:StoredDispatchgear_common:storage:primitives:Interval"
                                    ],
                                    "keys_id": [
                                        265,
                                        264,
                                        269,
                                        268,
                                        193,
                                        187,
                                        185
                                    ],
                                    "value_id": [
                                        605,
                                        603,
                                        599,
                                        593,
                                        592,
                                        589,
                                        596,
                                        590,
                                        479,
                                        445,
                                        438
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "errors": [
                        {
                            "name": "QueueDuplicateKey",
                            "doc": [
                                "Occurs when given key already exists in queue."
                            ]
                        },
                        {
                            "name": "QueueElementNotFound",
                            "doc": [
                                "Occurs when queue's element wasn't found in storage."
                            ]
                        },
                        {
                            "name": "QueueHeadShouldBeSet",
                            "doc": [
                                "Occurs when queue's head should contain value,",
                                "but it's empty for some reason."
                            ]
                        },
                        {
                            "name": "QueueHeadShouldNotBeSet",
                            "doc": [
                                "Occurs when queue's head should be empty,",
                                "but it contains value for some reason."
                            ]
                        },
                        {
                            "name": "QueueTailHasNextKey",
                            "doc": [
                                "Occurs when queue's tail element contains link",
                                "to the next element."
                            ]
                        },
                        {
                            "name": "QueueTailParentNotFound",
                            "doc": [
                                "Occurs when while searching queue's pre-tail,",
                                "element wasn't found."
                            ]
                        },
                        {
                            "name": "QueueTailShouldBeSet",
                            "doc": [
                                "Occurs when queue's tail should contain value,",
                                "but it's empty for some reason."
                            ]
                        },
                        {
                            "name": "QueueTailShouldNotBeSet",
                            "doc": [
                                "Occurs when queue's tail should be empty,",
                                "but it contains value for some reason."
                            ]
                        },
                        {
                            "name": "MailboxDuplicateKey",
                            "doc": [
                                "Occurs when given value already exists in mailbox."
                            ]
                        },
                        {
                            "name": "MailboxElementNotFound",
                            "doc": [
                                "Occurs when mailbox's element wasn't found in storage."
                            ]
                        },
                        {
                            "name": "WaitlistDuplicateKey",
                            "doc": [
                                "Occurs when given value already exists in waitlist."
                            ]
                        },
                        {
                            "name": "WaitlistElementNotFound",
                            "doc": [
                                "Occurs when waitlist's element wasn't found in storage."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            607,
                            605,
                            601,
                            595,
                            594,
                            593,
                            590,
                            597,
                            591,
                            480,
                            446,
                            439
                        ]
                    },
                    "index": 101
                },
                {
                    "name": "GearScheduler",
                    "prefix": "GearScheduler",
                    "storage": [
                        {
                            "name": "FirstIncompleteTasksBlock",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "TaskPool",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "gear_common:scheduler:task:ScheduledTask"
                                    ],
                                    "value": "NULL",
                                    "keys_id": [
                                        608,
                                        606,
                                        602,
                                        596,
                                        595,
                                        594,
                                        591,
                                        598,
                                        592,
                                        481,
                                        448,
                                        441
                                    ],
                                    "value_id": [
                                        58,
                                        60,
                                        59,
                                        91
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "MissedBlocks",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<U32>",
                                "PlainTypeValue": [
                                    447,
                                    440
                                ]
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "constants": [
                        {
                            "name": "ReserveThreshold",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "01000000",
                            "docs": [
                                " Amount of blocks for extra delay used to secure from outdated tasks."
                            ]
                        },
                        {
                            "name": "WaitlistCost",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "6400000000000000",
                            "docs": [
                                " Cost for storing in waitlist per block."
                            ]
                        },
                        {
                            "name": "MailboxCost",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "6400000000000000",
                            "docs": [
                                " Cost for storing in mailbox per block."
                            ]
                        },
                        {
                            "name": "ReservationCost",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "6400000000000000",
                            "docs": [
                                " Cost for reservation holding."
                            ]
                        },
                        {
                            "name": "DispatchHoldCost",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "6400000000000000",
                            "docs": [
                                " Cost for reservation holding."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "DuplicateTask",
                            "doc": [
                                "Occurs when given task already exists in task pool."
                            ]
                        },
                        {
                            "name": "TaskNotFound",
                            "doc": [
                                "Occurs when task wasn't found in storage."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            610,
                            608,
                            604,
                            598,
                            597,
                            596,
                            593,
                            600,
                            594,
                            483,
                            450,
                            443
                        ]
                    },
                    "index": 102
                },
                {
                    "name": "GearGas",
                    "prefix": "GearGas",
                    "storage": [
                        {
                            "name": "TotalIssuance",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    11,
                                    10
                                ]
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "GasNodes",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "gear_common:gas_provider:node:GasNodeId"
                                    ],
                                    "value": "gear_common:gas_provider:node:GasNode",
                                    "keys_id": [
                                        324,
                                        322,
                                        325,
                                        330,
                                        329,
                                        328,
                                        331,
                                        251,
                                        231,
                                        228
                                    ],
                                    "value_id": [
                                        611,
                                        609,
                                        605,
                                        599,
                                        598,
                                        597,
                                        594,
                                        601,
                                        595,
                                        484,
                                        451,
                                        444
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Allowance",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    11,
                                    10
                                ]
                            },
                            "fallback": [
                                "0x00cc7b9fae000000",
                                "0xff87526a74000000"
                            ],
                            "docs": null
                        }
                    ],
                    "constants": [
                        {
                            "name": "BlockGasLimit",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": [
                                "00cc7b9fae000000",
                                "ff87526a74000000"
                            ],
                            "docs": [
                                " The maximum amount of gas that can be used within a single block."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "Forbidden",
                            "doc": null
                        },
                        {
                            "name": "NodeAlreadyExists",
                            "doc": null
                        },
                        {
                            "name": "InsufficientBalance",
                            "doc": null
                        },
                        {
                            "name": "NodeNotFound",
                            "doc": null
                        },
                        {
                            "name": "NodeWasConsumed",
                            "doc": null
                        },
                        {
                            "name": "ParentIsLost",
                            "doc": [
                                "Errors stating that gas tree has been invalidated"
                            ]
                        },
                        {
                            "name": "ParentHasNoChildren",
                            "doc": null
                        },
                        {
                            "name": "UnexpectedConsumeOutput",
                            "doc": [
                                "Output of `Tree::consume` procedure that wasn't expected.",
                                "",
                                "Outputs of consumption procedure are determined. The error is returned",
                                "when unexpected one occurred. That signals, that algorithm works wrong",
                                "and expected invariants are not correct."
                            ]
                        },
                        {
                            "name": "UnexpectedNodeType",
                            "doc": [
                                "Node type that can't occur if algorithm work well"
                            ]
                        },
                        {
                            "name": "ValueIsNotCaught",
                            "doc": [
                                "Value must have been caught, but was missed or blocked (for more info see `ValueNode::catch_value`)."
                            ]
                        },
                        {
                            "name": "ValueIsBlocked",
                            "doc": [
                                "Value must have been caught or moved upstream, but was blocked (for more info see `ValueNode::catch_value`)."
                            ]
                        },
                        {
                            "name": "ValueIsNotBlocked",
                            "doc": [
                                "Value must have been blocked, but was either moved or caught (for more info see `ValueNode::catch_value`)."
                            ]
                        },
                        {
                            "name": "ConsumedWithLock",
                            "doc": [
                                "`GasTree::consume` called on node, which has some balance locked."
                            ]
                        },
                        {
                            "name": "ConsumedWithSystemReservation",
                            "doc": [
                                "`GasTree::consume` called on node, which has some system reservation."
                            ]
                        },
                        {
                            "name": "TotalValueIsOverflowed",
                            "doc": [
                                "`GasTree::create` called with some value amount leading to",
                                "the total value overflow."
                            ]
                        },
                        {
                            "name": "TotalValueIsUnderflowed",
                            "doc": [
                                "Either `GasTree::consume` or `GasTree::spent` called on a node creating",
                                "negative imbalance which leads to the total value drop below 0."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            616,
                            614,
                            610,
                            604,
                            603,
                            602,
                            599,
                            606,
                            600,
                            488,
                            453,
                            446
                        ]
                    },
                    "index": 103
                },
                {
                    "name": "Gear",
                    "prefix": "Gear",
                    "storage": [
                        {
                            "name": "ExecuteInherent",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": [
                                    54,
                                    53,
                                    52
                                ]
                            },
                            "fallback": "0x01",
                            "docs": [
                                " A flag indicating whether the message queue should be processed at the end of a block",
                                "",
                                " If not set, the inherent extrinsic that processes the queue will keep throwing an error",
                                " thereby making the block builder exclude it from the block."
                            ]
                        },
                        {
                            "name": "BlockNumber",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The current block number being processed.",
                                "",
                                " It shows block number in which queue is processed.",
                                " May be less than system pallet block number if panic occurred previously."
                            ]
                        },
                        {
                            "name": "GearRunInBlock",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "NULL",
                                "PlainTypeValue": [
                                    58,
                                    60,
                                    59
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A guard to prohibit all but the first execution of `pallet_gear::run()` call in a block.",
                                "",
                                " Set to `Some(())` if the extrinsic is executed for the first time in a block.",
                                " All subsequent attempts would fail with `Error::<T>::GearRunAlreadyInBlock` error.",
                                " Set back to `None` in the `on_finalize()` hook at the end of the block."
                            ]
                        },
                        {
                            "name": "LastGearBlockNumber",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The Gear block number before processing messages.",
                                "",
                                " A helper variable that mirrors the `BlockNumber` at the beginning of a block.",
                                " Allows to gauge the actual `BlockNumber` progress."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "6800",
                            "name": "upload_code",
                            "docs": [
                                "See [`Pallet::upload_code`].",
                                "Saves program `code` in storage.",
                                "",
                                "The extrinsic was created to provide _deploy program from program_ functionality.",
                                "Anyone who wants to define a \"factory\" logic in program should first store the code and metadata for the \"child\"",
                                "program in storage. So the code for the child will be initialized by program initialization request only if it exists in storage.",
                                "More precisely, the code and its metadata are actually saved in the storage under the hash of the `code`. The code hash is computed",
                                "as Blake256 hash. At the time of the call the `code` hash should not be in the storage. If it was stored previously, call will end up",
                                "with an `CodeAlreadyExists` error. In this case user can be sure, that he can actually use the hash of his program's code bytes to define",
                                "\"program factory\" logic in his program.",
                                "Parameters",
                                "- `code`: wasm code of a program as a byte vector.",
                                "Emits the following events:",
                                "- `SavedCode(H256)` - when the code is saved in storage."
                            ],
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "6801",
                            "name": "upload_program",
                            "docs": [
                                "See [`Pallet::upload_program`].",
                                "Creates program initialization request (message), that is scheduled to be run in the same block.",
                                "",
                                "There are no guarantees that initialization message will be run in the same block due to block",
                                "gas limit restrictions. For example, when it will be the message's turn, required gas limit for it",
                                "could be more than remaining block gas limit. Therefore, the message processing will be postponed",
                                "until the next block.",
                                "`ProgramId` is computed as Blake256 hash of concatenated bytes of `code` + `salt`. (todo #512 `code_hash` + `salt`)",
                                "Such `ProgramId` must not exist in the Program Storage at the time of this call.",
                                "There is the same guarantee here as in `upload_code`. That is, future program's",
                                "`code` and metadata are stored before message was added to the queue and processed.",
                                "The origin must be Signed and the sender must have sufficient funds to pay",
                                "for `gas` and `value` (in case the latter is being transferred).",
                                "Parameters:",
                                "- `code`: wasm code of a program as a byte vector.",
                                "- `salt`: randomness term (a seed) to allow programs with identical code",
                                "  to be created independently.",
                                "- `init_payload`: encoded parameters of the wasm module `init` function.",
                                "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
                                "- `value`: balance to be transferred to the program once it's been created.",
                                "Emits the following events:",
                                "- `InitMessageEnqueued(MessageInfo)` when init message is placed in the queue.",
                                "# Note",
                                "Faulty (uninitialized) programs still have a valid addresses (program ids) that can deterministically be derived on the",
                                "caller's side upfront. It means that if messages are sent to such an address, they might still linger in the queue.",
                                "In order to mitigate the risk of users' funds being sent to an address,",
                                "where a valid program should have resided, while it's not,",
                                "such \"failed-to-initialize\" programs are not silently deleted from the",
                                "program storage but rather marked as \"ghost\" programs.",
                                "Ghost program can be removed by their original author via an explicit call.",
                                "The funds stored by a ghost program will be release to the author once the program",
                                "has been removed."
                            ],
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "salt",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "init_payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "6802",
                            "name": "create_program",
                            "docs": [
                                "See [`Pallet::create_program`].",
                                "Creates program via `code_id` from storage.",
                                "",
                                "Parameters:",
                                "- `code_id`: wasm code id in the code storage.",
                                "- `salt`: randomness term (a seed) to allow programs with identical code",
                                "  to be created independently.",
                                "- `init_payload`: encoded parameters of the wasm module `init` function.",
                                "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
                                "- `value`: balance to be transferred to the program once it's been created.",
                                "Emits the following events:",
                                "- `InitMessageEnqueued(MessageInfo)` when init message is placed in the queue.",
                                "# NOTE",
                                "For the details of this extrinsic, see `upload_code`."
                            ],
                            "args": [
                                {
                                    "name": "code_id",
                                    "type": "[U8; 32]",
                                    "type_name": "CodeId"
                                },
                                {
                                    "name": "salt",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "init_payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "6803",
                            "name": "send_message",
                            "docs": [
                                "See [`Pallet::send_message`].",
                                "Sends a message to a program or to another account.",
                                "",
                                "The origin must be Signed and the sender must have sufficient funds to pay",
                                "for `gas` and `value` (in case the latter is being transferred).",
                                "To avoid an undefined behavior a check is made that the destination address",
                                "is not a program in uninitialized state. If the opposite holds true,",
                                "the message is not enqueued for processing.",
                                "Parameters:",
                                "- `destination`: the message destination.",
                                "- `payload`: in case of a program destination, parameters of the `handle` function.",
                                "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
                                "- `value`: balance to be transferred to the program once it's been created.",
                                "Emits the following events:",
                                "- `DispatchMessageEnqueued(MessageInfo)` when dispatch message is placed in the queue.",
                                "If `prepaid` flag is set, the transaction fee and the gas cost will be",
                                "charged against a `voucher` that must have been issued for the sender",
                                "in conjunction with the `destination` program. That means that the",
                                "synthetic account corresponding to the (`AccountId`, `ProgramId`) pair must",
                                "exist and have sufficient funds in it. Otherwise, the call is invalidated.",
                                "- `prepaid`: a flag that indicates whether a voucher should be used."
                            ],
                            "args": [
                                {
                                    "name": "destination",
                                    "type": "[U8; 32]",
                                    "type_name": "ProgramId"
                                },
                                {
                                    "name": "payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                },
                                {
                                    "name": "prepaid",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "6804",
                            "name": "send_reply",
                            "docs": [
                                "See [`Pallet::send_reply`].",
                                "Send reply on message in `Mailbox`.",
                                "",
                                "Removes message by given `MessageId` from callers `Mailbox`:",
                                "rent funds become free, associated with the message value",
                                "transfers from message sender to extrinsic caller.",
                                "Generates reply on removed message with given parameters",
                                "and pushes it in `MessageQueue`.",
                                "NOTE: source of the message in mailbox guaranteed to be a program.",
                                "NOTE: only user who is destination of the message, can claim value",
                                "or reply on the message from mailbox.",
                                "If `prepaid` flag is set, the transaction fee and the gas cost will be",
                                "charged against a `voucher` that must have been issued for the sender",
                                "in conjunction with the mailboxed message source program. That means that the",
                                "synthetic account corresponding to the (`AccountId`, `ProgramId`) pair must",
                                "exist and have sufficient funds in it. Otherwise, the call is invalidated."
                            ],
                            "args": [
                                {
                                    "name": "reply_to_id",
                                    "type": "[U8; 32]",
                                    "type_name": "MessageId"
                                },
                                {
                                    "name": "payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                },
                                {
                                    "name": "prepaid",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "6805",
                            "name": "claim_value",
                            "docs": [
                                "See [`Pallet::claim_value`].",
                                "Claim value from message in `Mailbox`.",
                                "",
                                "Removes message by given `MessageId` from callers `Mailbox`:",
                                "rent funds become free, associated with the message value",
                                "transfers from message sender to extrinsic caller.",
                                "NOTE: only user who is destination of the message, can claim value",
                                "or reply on the message from mailbox."
                            ],
                            "args": [
                                {
                                    "name": "message_id",
                                    "type": "[U8; 32]",
                                    "type_name": "MessageId"
                                }
                            ]
                        },
                        {
                            "lookup": "6806",
                            "name": "run",
                            "docs": [
                                "See [`Pallet::run`].",
                                "Process message queue"
                            ],
                            "args": [
                                {
                                    "name": "max_gas",
                                    "type": "option<U64>",
                                    "type_name": "Option<GasBalanceOf>"
                                },
                                null
                            ]
                        },
                        {
                            "lookup": "6807",
                            "name": "set_execute_inherent",
                            "docs": [
                                "See [`Pallet::set_execute_inherent`].",
                                "Sets `ExecuteInherent` flag.",
                                "",
                                "Requires root origin (eventually, will only be set via referendum)"
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "6808",
                            "name": "pay_program_rent",
                            "docs": [
                                "See [`Pallet::pay_program_rent`].",
                                "Pay additional rent for the program."
                            ],
                            "args": [
                                {
                                    "name": "program_id",
                                    "type": "[U8; 32]",
                                    "type_name": "ProgramId"
                                },
                                {
                                    "name": "block_count",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                }
                            ]
                        },
                        {
                            "lookup": "6809",
                            "name": "resume_session_init",
                            "docs": [
                                "See [`Pallet::resume_session_init`].",
                                "Starts a resume session of the previously paused program.",
                                "",
                                "The origin must be Signed.",
                                "Parameters:",
                                "- `program_id`: id of the program to resume.",
                                "- `allocations`: memory allocations of program prior to stop.",
                                "- `code_hash`: id of the program binary code."
                            ],
                            "args": [
                                {
                                    "name": "program_id",
                                    "type": "[U8; 32]",
                                    "type_name": "ProgramId"
                                },
                                {
                                    "name": "allocations",
                                    "type": [
                                        "Vec<gear_core:pages:WasmPage>",
                                        "Vec<gear_core:memory:WasmPage>"
                                    ],
                                    "type_name": "BTreeSet<WasmPage>"
                                },
                                {
                                    "name": "code_hash",
                                    "type": "[U8; 32]",
                                    "type_name": "CodeId"
                                }
                            ]
                        },
                        {
                            "lookup": "680a",
                            "name": "resume_session_push",
                            "docs": [
                                "See [`Pallet::resume_session_push`].",
                                "Appends memory pages to the resume session.",
                                "",
                                "The origin must be Signed and should be the owner of the session.",
                                "Parameters:",
                                "- `session_id`: id of the resume session.",
                                "- `memory_pages`: program memory (or its part) before it was paused."
                            ],
                            "args": [
                                {
                                    "name": "session_id",
                                    "type": "U128",
                                    "type_name": "SessionId"
                                },
                                {
                                    "name": "memory_pages",
                                    "type": [
                                        "Vec<Tuple:gear_core:pages:GearPagegear_core:memory:PageBuf>",
                                        "Vec<Tuple:gear_core:memory:GearPagegear_core:memory:PageBuf>"
                                    ],
                                    "type_name": "Vec<(GearPage, PageBuf)>"
                                }
                            ]
                        },
                        {
                            "lookup": "680b",
                            "name": "resume_session_commit",
                            "docs": [
                                "See [`Pallet::resume_session_commit`].",
                                "Finishes the program resume session.",
                                "",
                                "The origin must be Signed and should be the owner of the session.",
                                "Parameters:",
                                "- `session_id`: id of the resume session.",
                                "- `block_count`: the specified period of rent."
                            ],
                            "args": [
                                {
                                    "name": "session_id",
                                    "type": "U128",
                                    "type_name": "SessionId"
                                },
                                {
                                    "name": "block_count",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                }
                            ]
                        },
                        {
                            "lookup": "680c",
                            "name": "send_message_with_voucher",
                            "docs": [
                                "Sends a message to a program using pre-allocated funds.",
                                "",
                                "The origin must be Signed and the sender must have been issued a `voucher` -",
                                "a record for the (`AccountId`, `ProgramId`) pair exists in the `Voucher` pallet",
                                "and the respective synthesize account for such pair has funds in it.",
                                "The `gas` and transaction fees will, therefore, be paid from this synthesize account.",
                                "",
                                "Parameters:",
                                "- `destination`: the message destination (must be an initialized program).",
                                "- `payload`: in case of a program destination, parameters of the `handle` function.",
                                "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
                                "- `value`: balance to be transferred to the program once it's been created.",
                                "",
                                "Emits the following events:",
                                "- `DispatchMessageEnqueued(MessageInfo)` when dispatch message is placed in the queue."
                            ],
                            "args": [
                                {
                                    "name": "destination",
                                    "type": "[U8; 32]",
                                    "type_name": "ProgramId"
                                },
                                {
                                    "name": "payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "680d",
                            "name": "send_reply_with_voucher",
                            "docs": [
                                "Sends the reply to a message in `Mailbox` using pre-allocated funds.",
                                "",
                                "Removes message by given `MessageId` from callers `Mailbox`:",
                                "rent funds become free, associated with the message value",
                                "transfers from message sender to extrinsic caller.",
                                "",
                                "Generates reply on removed message with given parameters",
                                "and pushes it in `MessageQueue`.",
                                "",
                                "NOTE: source of the message in mailbox must be a program."
                            ],
                            "args": [
                                {
                                    "name": "reply_to_id",
                                    "type": "[U8; 32]",
                                    "type_name": "MessageId"
                                },
                                {
                                    "name": "payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            262,
                            261,
                            266,
                            265,
                            190,
                            184,
                            182
                        ]
                    },
                    "events": [
                        {
                            "lookup": "6800",
                            "name": "MessageQueued",
                            "docs": [
                                "User sends message to program, which was successfully",
                                "added to the Gear message queue."
                            ],
                            "args": [
                                "[U8; 32]",
                                "AccountId",
                                "[U8; 32]",
                                "gear_common:event:MessageEntry"
                            ],
                            "args_name": [
                                "id",
                                "source",
                                "destination",
                                "entry"
                            ],
                            "args_type_name": [
                                "MessageId",
                                "AccountId",
                                "ProgramId",
                                "MessageEntry"
                            ]
                        },
                        {
                            "lookup": "6801",
                            "name": "UserMessageSent",
                            "docs": [
                                "Somebody sent a message to the user."
                            ],
                            "args": [
                                "gear_core:message:user:UserMessage",
                                "option<U32>",
                                "gear_core:message:stored:StoredMessage"
                            ],
                            "args_name": [
                                "message",
                                "expiration"
                            ],
                            "args_type_name": [
                                "UserMessage",
                                "Option<BlockNumberFor>",
                                "Option<BlockNumber>",
                                "StoredMessage"
                            ]
                        },
                        {
                            "lookup": "6802",
                            "name": "UserMessageRead",
                            "docs": [
                                "Message marked as \"read\" and removes it from `Mailbox`.",
                                "This event only affects messages that were",
                                "already inserted in `Mailbox`."
                            ],
                            "args": [
                                "[U8; 32]",
                                "gear_common:event:Reason@316",
                                "gear_common:event:Reason@314",
                                "gear_common:event:Reason@315",
                                "gear_common:event:Reason@320",
                                "gear_common:event:Reason@319",
                                "gear_common:event:Reason@318",
                                "gear_common:event:Reason@321",
                                "gear_common:event:Reason@241",
                                "gear_common:event:Reason@221",
                                "gear_common:event:Reason@218"
                            ],
                            "args_name": [
                                "id",
                                "reason"
                            ],
                            "args_type_name": [
                                "MessageId",
                                "UserMessageReadReason"
                            ]
                        },
                        {
                            "lookup": "6803",
                            "name": "MessagesDispatched",
                            "docs": [
                                "The result of processing the messages within the block."
                            ],
                            "args": [
                                "U32",
                                "Vec<Tuple:[U8; 32]gear_common:event:DispatchStatus>",
                                "Vec<[U8; 32]>"
                            ],
                            "args_name": [
                                "total",
                                "statuses",
                                "state_changes"
                            ],
                            "args_type_name": [
                                "MessengerCapacityOf",
                                "BTreeMap<MessageId, DispatchStatus>",
                                "BTreeSet<ProgramId>"
                            ]
                        },
                        {
                            "lookup": "6804",
                            "name": "MessageWaited",
                            "docs": [
                                "Messages execution delayed (waited) and successfully",
                                "added to gear waitlist."
                            ],
                            "args": [
                                "[U8; 32]",
                                "option<gear_common:gas_provider:node:GasNodeId>",
                                "gear_common:event:Reason@326",
                                "U32",
                                "gear_common:event:Reason@324",
                                "gear_common:event:Reason@327",
                                "gear_common:event:Reason@332",
                                "gear_common:event:Reason@331",
                                "gear_common:event:Reason@330",
                                "gear_common:event:Reason@333",
                                "gear_common:event:Reason@253",
                                "gear_common:event:Reason@233",
                                "gear_common:event:Reason@230"
                            ],
                            "args_name": [
                                "id",
                                "origin",
                                "reason",
                                "expiration"
                            ],
                            "args_type_name": [
                                "MessageId",
                                "Option<GasNodeId<MessageId, ReservationId>>",
                                "MessageWaitedReason",
                                "BlockNumberFor",
                                "BlockNumber"
                            ]
                        },
                        {
                            "lookup": "6805",
                            "name": "MessageWoken",
                            "docs": [
                                "Message is ready to continue its execution",
                                "and was removed from `Waitlist`."
                            ],
                            "args": [
                                "[U8; 32]",
                                "gear_common:event:Reason@329",
                                "gear_common:event:Reason@327",
                                "gear_common:event:Reason@330",
                                "gear_common:event:Reason@335",
                                "gear_common:event:Reason@334",
                                "gear_common:event:Reason@333",
                                "gear_common:event:Reason@336",
                                "gear_common:event:Reason@256",
                                "gear_common:event:Reason@236",
                                "gear_common:event:Reason@233"
                            ],
                            "args_name": [
                                "id",
                                "reason"
                            ],
                            "args_type_name": [
                                "MessageId",
                                "MessageWokenReason"
                            ]
                        },
                        {
                            "lookup": "6806",
                            "name": "CodeChanged",
                            "docs": [
                                "Any data related to program codes changed."
                            ],
                            "args": [
                                "[U8; 32]",
                                "gear_common:event:CodeChangeKind"
                            ],
                            "args_name": [
                                "id",
                                "change"
                            ],
                            "args_type_name": [
                                "CodeId",
                                "CodeChangeKind<BlockNumberFor>",
                                "CodeChangeKind<BlockNumber>"
                            ]
                        },
                        {
                            "lookup": "6807",
                            "name": "ProgramChanged",
                            "docs": [
                                "Any data related to programs changed."
                            ],
                            "args": [
                                "[U8; 32]",
                                "gear_common:event:ProgramChangeKind"
                            ],
                            "args_name": [
                                "id",
                                "change"
                            ],
                            "args_type_name": [
                                "ProgramId",
                                "ProgramChangeKind<BlockNumberFor>",
                                "ProgramChangeKind<BlockNumber>"
                            ]
                        },
                        {
                            "lookup": "6808",
                            "name": "QueueNotProcessed",
                            "docs": [
                                "The pseudo-inherent extrinsic that runs queue processing rolled back or not executed."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "6809",
                            "name": "ProgramResumeSessionStarted",
                            "docs": [
                                "Program resume session has been started."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "[U8; 32]",
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "session_id",
                                "account_id",
                                "program_id",
                                "session_end_block"
                            ],
                            "args_type_name": [
                                "SessionId",
                                "AccountId",
                                "ProgramId",
                                "BlockNumberFor",
                                "BlockNumber"
                            ]
                        },
                        {
                            "lookup": "6808",
                            "name": "QueueProcessingReverted",
                            "docs": [
                                "The pseudo-inherent extrinsic that runs queue processing rolled back or not executed."
                            ],
                            "args": null
                        }
                    ],
                    "events_value": {
                        "type": [
                            304,
                            302,
                            303,
                            308,
                            307,
                            306,
                            309,
                            228,
                            210,
                            207
                        ]
                    },
                    "constants": [
                        {
                            "name": "Schedule",
                            "type": "pallet_gear:schedule:Schedule",
                            "type_value": [
                                617,
                                615,
                                611,
                                605,
                                604,
                                603,
                                600,
                                607,
                                601,
                                489,
                                454,
                                447
                            ],
                            "constants_value": [
                                "01878f00000001000000040000800000000002001000000001000020000000200000000000800000000800000400008c05000099000000270c0000f21200004847000035480000ef0f000097100000400d0000c80e0000591d00005d000000aa120000013f00009f030000000000000f030000bd0500006d0500000a0300000a040000152f0000c810000038100000131000007f0f000040020000ac010000bd050000d003000063020000160200001502000004020000e001000024020000360100008e00000000050000640300002d050000800300003a0500006803000030050000680300001105000028030000030500002e030000040500009a0300003f0500002f030000330500001803000020050000770300007f030000dc0100007b030000db010000b00400004c030000aa0b0000a1080000190c000051080000c92600005f1b0000f30b0000360800009c0300008101000053030000a601000077030000b20100000a03000056010000dc020000a8010000e502000063010000150300006b010000be020000b101000092d15c000032903300001e5c350000ca480200003a397f0000ca7276000066793d0000a2a23c000062da3800005adf360000d6433700008e2a380000de773c00004e4a3600004239620000250300c2053f00007215370000f2c3360000fecb6e0000f6567a0100d6fbb30000d907008235b60000d50700560843000026697b0000dd070006c79500000e2f980000c6f4c00000dd07007a77a20000ea7dd50400ba59ce04000a7cde01007a362900000240a6010002fe69000012a81d0500450a009293fe04004d0a00410a00726e3800006679360000d6f7380000aa6b9f0400dabdf005000e3f4700003d0200ae07ad0000d600af0000c2ae5800008d02004afc490000050700ea5a380000d24d93050042e3dc020042b69e0200a260bc02008addc30200ae84e30000c29fe40000d901000d1600ee25e70000d901001916008285c4060016bb0b0800fecb100200825f70070062bff00800860dae0200dedb88020002dec418009101009e7531000000000000010300b503002109009a2cf8433d3bfa12260000",
                                "01878f0000000100000004000080000000000200100000000100002000000020000000000080000000080000040000780500008b000000231a0000291a00004d3c0000e13e000066110000f71000005a0c0000050e00008f21000061000000f2100000ef3b00004304000000000000b80200004905000049050000a1020000d7030000d32a0000d50f00000e0f0000a60f00005a0e00004a02000072010000460500009b04000022020000a3020000dc020000a9020000200200006f02000052010000fe000000150700002204000076060000d6030000c6040000c40200005e0400000103000006050000de02000077040000dc0200006c040000ac020000e0040000bb02000016050000fb0200005b0500005a030000510500006a020000ee040000940200002f0600008e060000e70b00005c090000690c0000a50900002a2e0000501d0000290d0000c6080000590400006d030000dd0400002e0200003c0400004c02000096030000cf01000080030000ee01000030030000dc01000046050000a30100009c030000e40100002247f601009e180f0000e655260000a6252f0000f2dd030000a6318a0000becf7600004ad93f00005ee73800009e8c380000cac4380000e2ce38000006b8390000f6123b00005a933800005a12660000750200925e3f00006e833800000ef2380000ee2773000096fd8e0100fadac20000d505002e78c60000f905002e243f000032b1790000ed05001a6fa30000ea0fa30000d2aece0000e10500060baf000092491605004a1c9504000abdf7010002ad230000e2dc7c0200ba82670000ba145c0500d108008294180500fd0800010a00aaff3900003ebf3a00005276390000aab52a06004a6adc0500426646000049020096d2bd0000beb8bb0000fec65c00009502001aff490000f104008a233800002258c00500c217fd020092a0b902009274590200c23fc40200febbe000002ef4f80000390100411d0002ecfb0000610100391d009aaddb0600f2dc450800ea166802008664250700c634260800a621350200a68c7a0200027dc6180091010056984300000000fd0300b9030021090002a56d4789392ead030000",
                                "01878f00000001000000040000800000000002001000000001000020000000200000000000800000000800140500008b000000231a0000291a00004d3c0000e13e000066110000f71000005a0c0000050e00008f21000061000000f2100000ef3b00004304000000000000b80200004905000049050000a1020000d7030000d32a0000d50f00000e0f0000a60f00005a0e00004a02000072010000460500009b04000022020000a3020000dc020000a9020000200200006f02000052010000fe000000150700002204000076060000d6030000c6040000c40200005e0400000103000006050000de02000077040000dc0200006c040000ac020000e0040000bb02000016050000fb0200005b0500005a030000510500006a020000ee040000940200002f0600008e060000e70b00005c090000690c0000a50900002a2e0000501d0000290d0000c6080000590400006d030000dd0400002e0200003c0400004c02000096030000cf01000080030000ee01000030030000dc01000046050000a30100009c030000e40100002247f601009e180f0000e655260000a6252f0000f2dd030000a6318a0000becf7600004ad93f00005ee73800009e8c380000cac4380000e2ce38000006b8390000f6123b00005a933800005a12660000750200925e3f00006e833800000ef2380000ee2773000096fd8e0100fadac20000d505002e78c60000f905002e243f000032b1790000ed05001a6fa30000ea0fa30000d2aece0000e10500060baf000092491605004a1c9504000abdf7010002ad230000e2dc7c0200ba82670000ba145c0500d108008294180500fd0800010a00aaff3900003ebf3a00005276390000aab52a06004a6adc0500426646000049020096d2bd0000beb8bb0000fec65c00009502001aff490000f104008a233800002258c00500c217fd020092a0b902009274590200c23fc40200febbe000002ef4f80000390100411d0002ecfb0000610100391d009aaddb0600f2dc450800ea166802008664250700c634260800a621350200a68c7a0200027dc6180091010056984300000000fd0300b9030021090002a56d4789392ead030000",
                                "01878f00000001000000040000800000000002001000000001000020000000200000000000800000000800b00400009b0000002a250000c72300006c5c00008b3700007f1c0000cc1800006d0c00001b1700008524000069010000b8110000bd4e0000c1080000000000004a040000f9090000450b000054070000f90a00002f3800009e1a0000991800006a1800008e1400008c040000ea020000750e00004c090000d003000075030000e10300000b040000a8030000620300002c0200005a010000090e000003090000dc0d000018090000210e00008c0900002f0f000098090000700f00006c090000c80e0000a0090000170e0000e1080000bc0d0000d90800009e0d00006a080000150e00009b0800001a0a0000e2040000630a00004c040000d30d00002a0900000e0d0000610e00003e110000451000005d3c00001c340000f50f00005d100000840a000084040000140a000099040000640a0000e6040000470800001d040000bf080000960400004b09000070040000ca080000ef0400000f090000dc0400001273b50100b2b51500001e422e0000b2fd360000d2c203000096948f0000ee468500002e6d480000a259400000a2f544000092a340000052e73f0000e2e04200001afd4100009eda420000c6716f0000950200f2784f0000128b410000aea5420000e2dc7f00000efa8d010086b2c000003d0400f6aec300003504002202480000826e7d0000f905009ee2a50000b6aba6000036e8d100002d04000a50b30000fa51cf030092e0170500127837020036611a000012b5b601001e39700000f2df6204008506006a3e2f04009d06008d0a006a014200004e8440000092724200002251010800000072ac5200008d0200cebacf00004eb7da0000fa97630000a902007eac5800000505002a78400000c22c112f001aa0972d009abd711e00724bbf2d008294ec2c00fa027d00003208050100590100551e003e420501005d0100151e00264def06009e2c96080022d48502009a0d5e07002a12ed08003abd300200669c71020042bbc81800910100b2304f00000000352e00c50300f50800a2bc544489398eb0030000",
                                "01878f00000001000000040000800000000002001000000001000020000000200000000000800000000800560400009b0000002a250000c72300006c5c00008b3700007f1c0000cc1800006d0c00001b1700008524000069010000b8110000bd4e0000c1080000000000004a040000f9090000450b000054070000f90a00002f3800009e1a0000991800006a1800008e1400008c040000ea020000750e00004c090000d003000075030000e10300000b040000a8030000620300002c0200005a010000090e000003090000dc0d000018090000210e00008c0900002f0f000098090000700f00006c090000c80e0000a0090000170e0000e1080000bc0d0000d90800009e0d00006a080000150e00009b0800001a0a0000e2040000630a00004c040000d30d00002a0900000e0d0000610e00003e110000451000005d3c00001c340000f50f00005d100000840a000084040000140a000099040000640a0000e6040000470800001d040000bf080000960400004b09000070040000ca080000ef0400000f090000dc0400001273b50100b2b51500001e422e0000b2fd360000d2c203000096948f0000ee468500002e6d480000a259400000a2f544000092a340000052e73f0000e2e04200001afd4100009eda420000c6716f0000950200f2784f0000128b410000aea5420000e2dc7f00000efa8d010086b2c000003d0400f6aec300003504002202480000826e7d0000f905009ee2a50000b6aba6000036e8d100002d04000a50b30000fa51cf030092e0170500127837020036611a000012b5b601001e39700000f2df6204008506006a3e2f04009d06008d0a006a014200004e8440000092724200002251010800000072ac5200008d0200cebacf00004eb7da0000fa97630000a902007eac5800000505002a78400000c22c112f001aa0972d009abd711e00724bbf2d008294ec2c00fa027d00003208050100590100551e003e420501005d0100151e00264def06009e2c96080022d48502009a0d5e07002a12ed08003abd300200669c71020042bbc81800910100b2304f00000000352e00c50300f50800a2bc544489398eb0030000",
                                "01204e000000010000000400008000000000020010000000010000200000002000000000008000000008000b0000007e000000732c0000422b0000c24b0000473c0000dd1c0000b6180000440c00004b1600001e270000580100001e120000164c00001a0900000000000009030000750700009507000066060000300a0000bc380000441a00007118000047180000861400002d040000d4020000830e0000ff0800000c03000053030000d5030000cc0300009c030000a102000044010000d5000000090e0000fa070000a00d0000e9070000510d0000b3070000770d000040080000a90d0000e8070000ff0d000031080000fe0d0000f20800005c0e0000690800004e0e0000db0800005b0e000046080000eb09000056040000da090000bb040000950d00005909000022100000ad0f0000f6110000920f0000f43f0000ca3400006811000012100000b40a00002d050000450a0000b90400002d0a0000fb04000058080000fd0300009608000021040000760800005904000054080000ef0300005c0800001b0400007a35aa01003a37130000ee16300000ce768d0000c6478b0000f6834b0000a27b480000b6e34300009273010000a62a4300002a6846000026c44500009233450000b210440000825f6f00009102001e3543000052fd470000b61484000012c2920100be43c500000d04007aeec80000090400daff4800000604850000ed0500fe43ac00002aecae0000522fd800002d0400d679bc0000d2c26e04009a064804003aca3702007e551a00007a462a03000aaf7900003a7aec0400850600920a720400990600510a009a55460000be5943000046d74500002238410300fa6a100d0042e1540000990200a2bad0000072e3d60000e25b6500009d020042a6580000f104005a6d4400008accc62e0012eaf32c006a74b81d00321e9a2d0052d3602c000696830000fe7b07010015040021200092100a0100f903002d2000f2dbd106002292510800669d550200228e1907005a5a240800eecc2d02003e9673020082e6cf180091010032f23800000000212800e10300210900a2c7ea438939b293030000",
                                "01204e000000010000000400008000000000020010000000010000200000002000000000008000000008000a000000ce000000d22400002924000001510000f25a0000121c0000d1180000330c0000c3150000d82700006001000070110000de4a0000d5080000000000008b03000066080000e909000028070000b40b00009a3700007d190000571700008f170000d6140000b204000097030000920e0000b60900003e0400001a0400003704000033040000ae03000004030000410100008c0000003f0c0000370700004e0c00008b080000540d0000b0080000400d00004f080000e90c0000f8070000ab0d0000a2080000810d000006090000500d0000b30800001e0d0000460700006c0c0000ff080000f10900009c040000d4090000890400000f0d000020090000d50c0000010e00002c120000491000009f480000eb370000e30f0000530e0000f4090000ac0400009f090000bd030000ee0800008f040000a20800002d0400008f0800007a030000020700002503000063080000f10300007b08000008040000ba1dd0010046eb180000b6d2300000a2bb980000e23d7f00004a564f000072fd47000046fd47000062a201000046ab47000062ac4700008a114a0000668c490000be47480000062e750000910200b6f14600006e5c470000a6b08600005e6ccc01004e2bca0000110400ae74ca000029040016e74c0000fa3b860000a9050092f6a90000ae9bad000036efd300003104004a97bd0000d25ce503002a0df60300a2c4a6020096821a00008af89901000aef7900005223300400a9060042c4650400950600190a00f2be480000467446000066cb48000062bf1b0600b201ae05000265580000e101007651db0000e637da00004ad864000059020076f258000091040056b946000002e7ff77005a21ae6500121efe6e00121e7064007a9778720062507f0000d6410c01007d01009d2000cacf1201008501008d2000da20f206007abd7408000a4da002003ec7390700a262a50800521da402007a8e910200020ea5180091010062e13b00000000112600350300510a0002639043ed3c5eac030000",
                                "01204e000000010000000400008000000000020010000000010000200000002000000000008000000008000a000000d0000000132d00003c290000f84b00006d460000901c0000611800003a0c00001916000024290000560100004b110000494b00000509000000000000f5020000700700000307000048060000dd0a0000c137000050190000aa17000021180000261400001f040000b8020000280e000039080000f20200001703000038030000890300005f030000e102000061010000a9000000810d0000ed070000170d0000c00700000b0d0000e3070000a80d0000db070000c00d0000460800004c0d000031070000320d00002b070000d00c000090070000ba0c0000fe070000650d0000bd0700006d0800006a0300000008000053030000420c0000c3070000181000006d0f0000f4130000221100001a470000113900007815000080120000b3080000c3030000310800001e0300002108000019030000c2060000050300000c070000100300006507000004030000970600006d0300009b0600005e030000e2a5b201007a6f160000ca08300000ba8e9400007289790000b6d84a00008a4e4100003a03420000567601000016d9480000f2614100001e904000005a56410000865440000032fb710000810200966a4600000ad7400000164f8300003285c0010032c3c40000190400bec1c8000011040092e7460000fe34780000a1050092e3a300006e52a60000fa9bca0000210400e666b100005adbf70400c60ad003004e35a502007add190000a6d34301008a1d6f00001acc030400950600b678e50400950600c5090076894100004e674100005e7c3805000000fefb5200005902000a56d200009aeed800003e496200005d02004a89570000e90400e2803f0000da70a505002a71e80200aa02230300b2ab550300ea7aea02001ebc77000082650201007501002922007a390801006d01002d22005ab9e40600220955080086146602003ee51207004eb31b0800a2ab5b020082a55802004244a818009101003af73800000000c52500410300850a00a2a19d43ed3c0a7b030000",
                                "0000010000000400008000000000020010000000010000200000002000000000008000000008000900000093000000372d00004f2e0000d95d0000184d0000a41c00008e170000490c00005a16000077280000ff000000bf110000d24f0000bf0900000000000042020000be050000cc05000023060000e709000068350000c21900009f170000e517000014140000cc03000082020000340e0000c408000013030000ca0200004f030000bd0300008a030000b80200003c010000a4000000cb0d0000ba0700003b0d0000f5070000490d00008c070000f90c000090070000600d000085080000dd0d0000d3070000e30d000037080000d30d000054080000f40d000000080000b80d00006508000009090000d7030000d008000088030000a40c00007e080000a2140000f41100004f1600003b1200004d480000de390000f415000037120000bf080000da03000008090000c503000019090000e7030000d6070000780300004b070000220300008807000044030000b50700008f0300008107000073030000e23a9301005283180000f2d7300000d2ab8b0000fe9e890000f6c6420000becd390000c6473a00001e650100003e1f3a0000a2393a000022d13900009edb3a000012793d000082a767000079020012f73900005a5a3a00000ece8200000a77a601000208c000000504008299c00000fd03003a1c420000ca52770000a50500da2da00000de96a10000d64bcb00000d04008ac7af00002297d9030016432703009eb87902009a0f1a0000aa0517030016386f00001e4ed70400750600b6377104006d0600890900bedb3b0000225f390000aae1b80b004af81a0d007ec74a00000502004230c700000a70cb00002af65800006102005aee550000e10400de733a00009a1eab04002e393f03004239e30300e214c20200be10d503004a7b7800008e0a000100690100d921003e8d030100550100ad210022f7a906001acf120800be6a34020072bbe7060036d7a60800ca538c0200660e1c02000247a2180091010026631200000000bd2300290300490a002233b740ed3ce611030000",
                                "0000010000000400008000000000020010000000010000200000002000000000008000000008000700000096000000271a0000651a0000118f0000a7650000e51c000004180000320c0000c315000027290000c00000009a1100008a5000004d07000000000000b7010000fe030000ed0400003f0400007e080000a2340000fe1700003617000085160000451300007803000033020000f60b0000ec060000fe020000f2020000b7030000be0300007b0300007d0200001e010000ae000000380d00009a0700002c0d00008f070000d80d000019070000610d00009f070000360d000085070000f10d00006e070000d90c000018070000960d0000b30700003e0d00007c0700005e0d000083070000f90800008b030000ce0800009e0300004f0c0000bb070000b71400004611000081160000071100007b4b00008f3a00005316000098110000fc0800007a0300007008000040030000ac080000bd030000c906000011030000fc060000ef020000f40600000903000056070000ed02000096060000dd02000022a27a000012cf720000a208f6000062a5fe0000ae52a300002a21a100004a969f00004a040700007e1aa50000ee60a600006eeba30000deb0a400000a5ca60000e220e100008902009ef0a20000320da20000f6c4d600006a5ff6000082183e0100b10400c6803b0100b904007ecfa800006a99eb00008d06009a0f130100dec61a01002a8e4a0100bd04001e9d260100aa19bf0500aaafa605004e460a03008eb61d0000ca9b0f04000673e300004ae5250500610700e6428006007507003d0a008655a20000925aa30000ea49d2080036178a0300969da90000a901004609470100bef94401008ab7b500005902003e3ca90000d905002e5ca000005289ba060002aaa003000a751e0400363b1b0400c6ca0703001e68e7000032c27e0100990100f51d009a66830100b901001d1e000e66ae0600ca8e3d0800c279450200aa11e60600428a01080036751502000608060200c22cac18009101009101000000752100510300390b0022871a43ed3c7a26030000",
                                "0000010000000400008000000000020010000000010000200000002000000000008000000008000600000070000000291a0000271a00003092000037660000501d000022190000450c0000dc170000bf28000067010000d7120000944d000082090000000000003802000011060000c005000026070000670a000093360000281a00007c180000551800007a14000033040000cf020000500f0000cd090000dd020000700100005b010000590e00001f0900001c0f0000d7080000dc0d000050080000c60d0000bc080000bc0d00006a080000c50e000086080000bb0d000090080000820d000051080000900d0000420800008c0d0000fd070000db090000fd030000170900002b040000e30c00005d080000cb120000cf100000c6140000ec110000f2450000153b0000f013000052100000a109000053040000c5090000be040000500900003404000038080000f10300008c0700008e030000c4080000e203000012080000dd0300001d080000bb030000feec740000de257600002205ff0000aaf10601000e71ac00009228ac0000caa7ac000032d3ab0000c628ac00002a8cab00004203ac0000aa57ab00006e4bad0000e2d8eb0000bd02002a2fb0000032efab00002af7dc0000fe83480100d50400fee94b0100d50400ca06b20000b62bf800009906009afa25010056fe2d0100e6de4f0100d904006642300100e63bf604000e3d2005006646190400b6f51d00007e86d402008ab8ec0000eadeff04006107008642d504006d0700650a0066abb40000eed6b000007ebd5f0800d2d7bb0600129bb80000ad0100b2e05801008698580100367dc30000550200de4fb90000ed05006a80e000006209ae0000fe53d206001e1b2e04002602ea03007a5c4d0400760fda03004e11f800000a5f870100d50100e91d0046cb8c0100d10100251e008e8caa0600d669500800aa256802003691a407004eade207000000fef0fa0100000091010091010000004d2800590300710b00c22342434d3d8a1f030000",
                                "00000100000004000080000000000200100000000100002000000020000000000080000000080006000000d3000000cd4a000061890000081d00007a190000970c0000ee160000fd2500006c01000064110000744c00009f0800000000000036020000fc0500003b060000a5070000960d0000c13700000b1b00007e1800009d040000d30e00003003000030030000fd000000160e0000f40d00000c0e0000130e0000090e0000310e00000c0e0000350e0000160e00000a0e00000b0a0000fe090000ab0d0000d40d00002c0f000052410000b60f0000280a00000e0a00001c0a000054080000370800003d0800005b08000074080000fea07600006a5b7700007ac5410100cec0170100c2dbba0000c629b800005a72b80000d2e8b70000068fb6000042d6b500006607b600002ef2b500000e3cb60000fa820001005d030082c2b5000082abb500009e61ea00007239bd0000129dd00100bd060006b9570100010500a6fa740100f90400b26e310000f90800e6423c00005109001a9400010024002af5b600006ebbc100004a4dc20000240092fe8c01006106004ad2b700005106000eadb80100a665b80000ba17810e00965a9804007a2df50400b2cced0400c626020500e64a1101002e62960100e90100211e00da797f08005a1bf80900a632420400f2d5e20700f6ee25090000004223c6140000009101009101000000e12a00210300350b0082d45541852d323a030000"
                            ],
                            "docs": [
                                " Cost schedule and limits."
                            ]
                        },
                        {
                            "name": "OutgoingLimit",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00040000",
                            "docs": [
                                " The maximum amount of messages that can be produced in during all message executions.",
                                " The maximum amount of messages that can be produced in single run."
                            ]
                        },
                        {
                            "name": "OutgoingBytesLimit",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00000004",
                            "docs": [
                                " The maximum amount of bytes in outgoing messages during message execution."
                            ]
                        },
                        {
                            "name": "PerformanceMultiplier",
                            "type": "U32",
                            "type_value": [
                                622,
                                620,
                                616,
                                610,
                                609,
                                608,
                                605,
                                612,
                                606
                            ],
                            "constants_value": "64000000",
                            "docs": [
                                " Performance multiplier."
                            ]
                        },
                        {
                            "name": "MailboxThreshold",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "b80b000000000000",
                            "docs": [
                                " The minimal gas amount for message to be inserted in mailbox.",
                                "",
                                " This gas will be consuming as rent for storing and message will be available",
                                " for reply or claim, once gas ends, message removes.",
                                "",
                                " Messages with gas limit less than that minimum will not be added in mailbox,",
                                " but will be seen in events."
                            ]
                        },
                        {
                            "name": "ReservationsLimit",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "0001000000000000",
                            "docs": [
                                " Amount of reservations can exist for 1 program."
                            ]
                        },
                        {
                            "name": "ProgramRentFreePeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": [
                                "00d44900",
                                "404b4c00"
                            ],
                            "docs": [
                                " The free of charge period of rent."
                            ]
                        },
                        {
                            "name": "ProgramResumeMinimalRentPeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "004e0c00",
                            "docs": [
                                " The minimal amount of blocks to resume."
                            ]
                        },
                        {
                            "name": "ProgramRentCostPerBlock",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "40597307000000000000000000000000",
                            "docs": [
                                " The program rent cost per block."
                            ]
                        },
                        {
                            "name": "ProgramResumeSessionDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "b0040000",
                            "docs": [
                                " The amount of blocks for processing resume session."
                            ]
                        },
                        {
                            "name": "ProgramRentEnabled",
                            "type": "Bool",
                            "type_value": [
                                54,
                                53,
                                52
                            ],
                            "constants_value": "00",
                            "docs": [
                                " The flag determines if program rent mechanism enabled."
                            ]
                        },
                        {
                            "name": "ProgramRentDisabledDelta",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80130300",
                            "docs": [
                                " The constant defines value that is added if the program",
                                " rent is disabled."
                            ]
                        },
                        {
                            "name": "RentPoolId",
                            "type": "option<AccountId>",
                            "type_value": [
                                274,
                                273
                            ],
                            "constants_value": "01e68325a26f5e8ea5c6c93bbdcfa596ac3ec8b69301c0cc54029dc7bc891bc515",
                            "docs": [
                                " The account id of the rent pool if any."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "MessageNotFound",
                            "doc": [
                                "Message wasn't found in the mailbox."
                            ]
                        },
                        {
                            "name": "InsufficientBalance",
                            "doc": [
                                "Not enough balance to execute an action.",
                                "",
                                "Usually occurs when the gas_limit specified is such that the origin account can't afford the message."
                            ]
                        },
                        {
                            "name": "GasLimitTooHigh",
                            "doc": [
                                "Gas limit too high.",
                                "",
                                "Occurs when an extrinsic's declared `gas_limit` is greater than a block's maximum gas limit."
                            ]
                        },
                        {
                            "name": "ProgramAlreadyExists",
                            "doc": [
                                "Program already exists.",
                                "",
                                "Occurs if a program with some specific program id already exists in program storage."
                            ]
                        },
                        {
                            "name": "InactiveProgram",
                            "doc": [
                                "Program is terminated.",
                                "",
                                "Program init failed, so such message destination is no longer unavailable."
                            ]
                        },
                        {
                            "name": "NoMessageTree",
                            "doc": [
                                "Message gas tree is not found.",
                                "",
                                "When a message claimed from the mailbox has a corrupted or non-extant gas tree associated."
                            ]
                        },
                        {
                            "name": "CodeAlreadyExists",
                            "doc": [
                                "Code already exists.",
                                "",
                                "Occurs when trying to save to storage a program code that has been saved there."
                            ]
                        },
                        {
                            "name": "CodeDoesntExist",
                            "doc": [
                                "Code does not exist.",
                                "",
                                "Occurs when trying to get a program code from storage, that doesn't exist."
                            ]
                        },
                        {
                            "name": "CodeTooLarge",
                            "doc": [
                                "The code supplied to `upload_code` or `upload_program` exceeds the limit specified in the",
                                "current schedule."
                            ]
                        },
                        {
                            "name": "ProgramConstructionFailed",
                            "doc": [
                                "Failed to create a program."
                            ]
                        },
                        {
                            "name": "MessageQueueProcessingDisabled",
                            "doc": [
                                "Message queue processing is disabled."
                            ]
                        },
                        {
                            "name": "ResumePeriodLessThanMinimal",
                            "doc": [
                                "Block count doesn't cover MinimalResumePeriod."
                            ]
                        },
                        {
                            "name": "ProgramNotFound",
                            "doc": [
                                "Program with the specified id is not found."
                            ]
                        },
                        {
                            "name": "GearRunAlreadyInBlock",
                            "doc": [
                                "Gear::run() already included in current block."
                            ]
                        },
                        {
                            "name": "ProgramRentDisabled",
                            "doc": [
                                "The program rent logic is disabled."
                            ]
                        },
                        {
                            "name": "ValueLessThanMinimal",
                            "doc": [
                                "Value doesn't cover ExistentialDeposit."
                            ]
                        },
                        {
                            "name": "FailureRedeemingVoucher",
                            "doc": [
                                "Voucher can't be redeemed",
                                "Voucher can't be redemmed"
                            ]
                        },
                        {
                            "name": "MessagesStorageCorrupted",
                            "doc": [
                                "Messages storage corrupted."
                            ]
                        },
                        {
                            "name": "InsufficientBalanceForReserve",
                            "doc": [
                                "Not enough balance to reserve.",
                                "",
                                "Usually occurs when the gas_limit specified is such that the origin account can't afford the message."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            623,
                            621,
                            617,
                            611,
                            610,
                            609,
                            606,
                            613,
                            607,
                            605,
                            608,
                            494,
                            459,
                            452
                        ]
                    },
                    "index": 104
                },
                {
                    "name": "GearPayment",
                    "prefix": "",
                    "storage": null,
                    "errors": null,
                    "errors_value": null,
                    "index": 105
                },
                {
                    "name": "StakingRewards",
                    "prefix": "StakingRewards",
                    "storage": [
                        {
                            "name": "TargetInflation",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    624,
                                    622,
                                    618,
                                    612,
                                    611,
                                    610,
                                    607,
                                    614,
                                    608,
                                    606,
                                    609,
                                    495,
                                    460,
                                    453
                                ]
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " Target inflation (at ideal stake)"
                            ]
                        },
                        {
                            "name": "IdealStakingRatio",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    624,
                                    622,
                                    618,
                                    612,
                                    611,
                                    610,
                                    607,
                                    614,
                                    608,
                                    606,
                                    609,
                                    495,
                                    460,
                                    453
                                ]
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " Ideal staking ratio"
                            ]
                        },
                        {
                            "name": "NonStakeableShare",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": [
                                    624,
                                    622,
                                    618,
                                    612,
                                    611,
                                    610,
                                    607,
                                    614,
                                    608,
                                    606,
                                    609,
                                    495,
                                    460,
                                    453
                                ]
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The current share of issued tokens that cannot be staked (e.g. being vested)",
                                " This value is guaranteed to remain unchanged for the first year until vesting kicks in.",
                                " Subsequently, the non-stakeable share should be calculated based on the vesting balances."
                            ]
                        },
                        {
                            "name": "FilteredAccounts",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<AccountId>",
                                "PlainTypeValue": [
                                    625,
                                    623,
                                    619,
                                    613,
                                    612,
                                    611,
                                    608,
                                    615,
                                    609,
                                    607,
                                    610,
                                    496,
                                    461,
                                    454
                                ]
                            },
                            "fallback": "0x00",
                            "docs": [
                                " List of accounts whose locked balance (due to incomplete vesting) should be excluded from",
                                " the total stakeable quantity.",
                                " During the 1st year the non-stakeable amount is accounted for as a fixed fraction of TTS."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "6a00",
                            "name": "refill",
                            "docs": [
                                "See [`Pallet::refill`].",
                                null
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "6a01",
                            "name": "force_refill",
                            "docs": [
                                "See [`Pallet::force_refill`].",
                                null
                            ],
                            "args": [
                                {
                                    "name": "from",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "6a02",
                            "name": "withdraw",
                            "docs": [
                                "See [`Pallet::withdraw`].",
                                null
                            ],
                            "args": [
                                {
                                    "name": "to",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "6a03",
                            "name": "align_supply",
                            "docs": [
                                "See [`Pallet::align_supply`].",
                                null
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            267,
                            266,
                            274,
                            279,
                            278,
                            202,
                            188,
                            186
                        ]
                    },
                    "events": [
                        {
                            "lookup": "6a00",
                            "name": "Deposited",
                            "docs": [
                                "Deposited to the pool."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "6a01",
                            "name": "Withdrawn",
                            "docs": [
                                "Transferred from the pool to an external account."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "6a02",
                            "name": "Burned",
                            "docs": [
                                "Burned from the pool."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "6a03",
                            "name": "Minted",
                            "docs": [
                                "Minted to the pool."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "6a00",
                            "name": "Refilled",
                            "docs": [
                                "Transferred to the pool from an external account."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            334,
                            332,
                            335,
                            340,
                            339,
                            338,
                            341,
                            261,
                            241,
                            238
                        ]
                    },
                    "constants": [
                        {
                            "name": "PalletId",
                            "type": "[U8; 8]",
                            "type_value": [
                                436,
                                432,
                                430,
                                434,
                                441,
                                435,
                                438,
                                360,
                                340,
                                334
                            ],
                            "constants_value": "70792f7374727764",
                            "docs": [
                                " The staking rewards' pallet id, used for deriving its sovereign account ID."
                            ]
                        },
                        {
                            "name": "MillisecondsPerYear",
                            "type": "U64",
                            "type_value": [
                                11,
                                10
                            ],
                            "constants_value": "00c3fa5807000000",
                            "docs": [
                                " Milliseconds per year to calculate inflation."
                            ]
                        },
                        {
                            "name": "MinInflation",
                            "type": "U64",
                            "type_value": [
                                624,
                                622,
                                618,
                                612,
                                611,
                                610,
                                607,
                                614,
                                608,
                                606,
                                609,
                                495,
                                460,
                                453
                            ],
                            "constants_value": "0000c16ff2862300",
                            "docs": [
                                " Minimum annual inflation."
                            ]
                        },
                        {
                            "name": "MaxROI",
                            "type": "U64",
                            "type_value": [
                                624,
                                622,
                                618,
                                612,
                                611,
                                610,
                                607,
                                614,
                                608,
                                606,
                                609,
                                495,
                                460,
                                453
                            ],
                            "constants_value": "00009e1869d02904",
                            "docs": [
                                " ROI cap."
                            ]
                        },
                        {
                            "name": "Falloff",
                            "type": "U64",
                            "type_value": [
                                624,
                                622,
                                618,
                                612,
                                611,
                                610,
                                607,
                                614,
                                608,
                                606,
                                609,
                                495,
                                460,
                                453
                            ],
                            "constants_value": "000082dfe40d4700",
                            "docs": [
                                " Exponential decay (fall-off) parameter."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "FailureToRefillPool",
                            "doc": [
                                "Pool not replenished due to error."
                            ]
                        },
                        {
                            "name": "FailureToWithdrawFromPool",
                            "doc": [
                                "Failure to withdraw funds from the rewards pool."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            626,
                            624,
                            620,
                            614,
                            613,
                            612,
                            609,
                            616,
                            610,
                            608,
                            611,
                            497,
                            462,
                            455
                        ]
                    },
                    "index": 106
                },
                {
                    "name": "GearVoucher",
                    "prefix": [
                        "GearVoucher",
                        ""
                    ],
                    "storage": [
                        {
                            "name": "Issued",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 11
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Storage containing amount of the total vouchers issued.",
                                "",
                                " Used as nonce in voucher creation."
                            ]
                        },
                        {
                            "name": "Vouchers",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "[U8; 32]"
                                    ],
                                    "value": "pallet_gear_voucher:internal:VoucherInfo",
                                    "keys_id": [
                                        627,
                                        625,
                                        621,
                                        615,
                                        614,
                                        613
                                    ],
                                    "value_id": [
                                        628,
                                        626,
                                        622,
                                        616,
                                        615,
                                        614
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Double map storage containing data of the voucher,",
                                " associated with some spender and voucher ids."
                            ]
                        },
                        null
                    ],
                    "calls": [
                        {
                            "lookup": "6b00",
                            "name": "issue",
                            "docs": [
                                "See [`Pallet::issue`].",
                                "Issue a new voucher for a `user` to be used to pay for sending messages",
                                "to `program_id` program.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "- `to`: The voucher holder account id.",
                                "- `program`: The program id, messages to whom can be paid with the voucher.",
                                "NOTE: the fact a program with such id exists in storage is not checked - it's",
                                "a caller's responsibility to ensure the consistency of the input parameters.",
                                "- `amount`: The voucher amount.",
                                "## Complexity",
                                "O(Z + C) where Z is the length of the call and C its execution weight."
                            ],
                            "args": [
                                {
                                    "name": "spender",
                                    "type": "AccountId",
                                    "type_name": "AccountIdOf"
                                },
                                {
                                    "name": "balance",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "programs",
                                    "type": [
                                        "option<BTreeSet@270>",
                                        "option<BTreeSet@269>"
                                    ],
                                    "type_name": "Option<BTreeSet<ProgramId>>"
                                },
                                {
                                    "name": "code_uploading",
                                    "type": "Bool",
                                    "type_name": "bool"
                                },
                                {
                                    "name": "duration",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                },
                                {
                                    "name": "to",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "program",
                                    "type": "[U8; 32]",
                                    "type_name": "ProgramId"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "6b01",
                            "name": "call",
                            "docs": [
                                "See [`Pallet::call`].",
                                "Dispatch allowed with voucher call."
                            ],
                            "args": [
                                {
                                    "name": "voucher_id",
                                    "type": "[U8; 32]",
                                    "type_name": "VoucherId"
                                },
                                {
                                    "name": "call",
                                    "type": [
                                        "pallet_gear_voucher:internal:PrepaidCall",
                                        "pallet_gear_voucher:PrepaidCall"
                                    ],
                                    "type_name": "PrepaidCall<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "6b02",
                            "name": "revoke",
                            "docs": [
                                "See [`Pallet::revoke`]."
                            ],
                            "args": [
                                {
                                    "name": "spender",
                                    "type": "AccountId",
                                    "type_name": "AccountIdOf"
                                },
                                {
                                    "name": "voucher_id",
                                    "type": "[U8; 32]",
                                    "type_name": "VoucherId"
                                }
                            ]
                        },
                        {
                            "lookup": "6b03",
                            "name": "update",
                            "docs": [
                                "See [`Pallet::update`]."
                            ],
                            "args": [
                                {
                                    "name": "spender",
                                    "type": "AccountId",
                                    "type_name": "AccountIdOf"
                                },
                                {
                                    "name": "voucher_id",
                                    "type": "[U8; 32]",
                                    "type_name": "VoucherId"
                                },
                                {
                                    "name": "move_ownership",
                                    "type": "option<AccountId>",
                                    "type_name": "Option<AccountIdOf>"
                                },
                                {
                                    "name": "balance_top_up",
                                    "type": "option<U128>",
                                    "type_name": "Option<BalanceOf>"
                                },
                                {
                                    "name": "append_programs",
                                    "type": [
                                        "option<option<BTreeSet@270>>",
                                        "option<option<BTreeSet@269>>"
                                    ],
                                    "type_name": "Option<Option<BTreeSet<ProgramId>>>"
                                },
                                {
                                    "name": "code_uploading",
                                    "type": "option<Bool>",
                                    "type_name": "Option<bool>"
                                },
                                {
                                    "name": "prolong_duration",
                                    "type": "option<U32>",
                                    "type_name": "Option<BlockNumberFor>"
                                }
                            ]
                        },
                        {
                            "lookup": "6b04",
                            "name": "call_deprecated",
                            "docs": [
                                "See [`Pallet::call_deprecated`]."
                            ],
                            "args": [
                                {
                                    "name": "call",
                                    "type": "pallet_gear_voucher:internal:PrepaidCall",
                                    "type_name": "PrepaidCall<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "6b05",
                            "name": "decline",
                            "docs": [
                                "See [`Pallet::decline`]."
                            ],
                            "args": [
                                {
                                    "name": "voucher_id",
                                    "type": "[U8; 32]",
                                    "type_name": "VoucherId"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            268,
                            267,
                            275,
                            280,
                            279,
                            203
                        ]
                    },
                    "events": [
                        {
                            "lookup": "6b00",
                            "name": "VoucherIssued",
                            "docs": [
                                "Voucher has been issued.",
                                "A new voucher issued."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "[U8; 32]",
                                "U128"
                            ],
                            "args_name": [
                                "owner",
                                "spender",
                                "voucher_id",
                                "holder",
                                "program",
                                "value"
                            ],
                            "args_type_name": [
                                "AccountIdOf",
                                "AccountIdOf",
                                "VoucherId",
                                "AccountId",
                                "ProgramId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "6b01",
                            "name": "VoucherRevoked",
                            "docs": [
                                "Voucher has been revoked by owner.",
                                "",
                                "NOTE: currently means only \"refunded\"."
                            ],
                            "args": [
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "spender",
                                "voucher_id"
                            ],
                            "args_type_name": [
                                "AccountIdOf",
                                "VoucherId"
                            ]
                        },
                        {
                            "lookup": "6b02",
                            "name": "VoucherUpdated",
                            "docs": [
                                "Voucher has been updated."
                            ],
                            "args": [
                                "AccountId",
                                "[U8; 32]",
                                "option<AccountId>"
                            ],
                            "args_name": [
                                "spender",
                                "voucher_id",
                                "new_owner"
                            ],
                            "args_type_name": [
                                "AccountIdOf",
                                "VoucherId",
                                "Option<AccountIdOf>"
                            ]
                        },
                        {
                            "lookup": "6b03",
                            "name": "VoucherDeclined",
                            "docs": [
                                "Voucher has been declined (set to expired state)."
                            ],
                            "args": [
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "spender",
                                "voucher_id"
                            ],
                            "args_type_name": [
                                "AccountIdOf",
                                "VoucherId"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            335,
                            333,
                            336,
                            341,
                            340,
                            339,
                            342,
                            262
                        ]
                    },
                    "constants": [
                        {
                            "name": "PalletId",
                            "type": "[U8; 8]",
                            "type_value": [
                                436,
                                432,
                                430,
                                434,
                                441,
                                435,
                                438,
                                360
                            ],
                            "constants_value": "70792f766f756368",
                            "docs": [
                                " The pallet id, used for deriving its sovereign account ID."
                            ]
                        },
                        {
                            "name": "MaxProgramsAmount",
                            "type": "U8",
                            "type_value": 2,
                            "constants_value": "20",
                            "docs": [
                                " Maximal amount of programs to be specified to interact with."
                            ]
                        },
                        {
                            "name": "MinDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": [
                                "14000000",
                                "58020000"
                            ],
                            "docs": [
                                " Minimal duration in blocks voucher could be issued/prolonged for."
                            ]
                        },
                        {
                            "name": "MaxDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00ea2400",
                            "docs": [
                                " Maximal duration in blocks voucher could be issued/prolonged for."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "BadOrigin",
                            "doc": [
                                "The origin is not eligible to execute call."
                            ]
                        },
                        {
                            "name": "BalanceTransfer",
                            "doc": [
                                "Error trying transfer balance to/from voucher account."
                            ]
                        },
                        {
                            "name": "InappropriateDestination",
                            "doc": [
                                "Destination program is not in whitelisted set for voucher."
                            ]
                        },
                        {
                            "name": "InexistentVoucher",
                            "doc": [
                                "Voucher with given identifier doesn't exist for given spender id."
                            ]
                        },
                        {
                            "name": "IrrevocableYet",
                            "doc": [
                                "Voucher still valid and couldn't be revoked."
                            ]
                        },
                        {
                            "name": "MaxProgramsLimitExceeded",
                            "doc": [
                                "Try to whitelist more programs than allowed."
                            ]
                        },
                        {
                            "name": "UnknownDestination",
                            "doc": [
                                "Failed to query destination of the prepaid call."
                            ]
                        },
                        {
                            "name": "VoucherExpired",
                            "doc": [
                                "Voucher has expired and couldn't be used."
                            ]
                        },
                        {
                            "name": "DurationOutOfBounds",
                            "doc": [
                                "Voucher issue/prolongation duration out of [min; max] constants."
                            ]
                        },
                        {
                            "name": "CodeUploadingEnabled",
                            "doc": [
                                "Voucher update function tries to cut voucher ability of code upload."
                            ]
                        },
                        {
                            "name": "CodeUploadingDisabled",
                            "doc": [
                                "Voucher is disabled for code uploading, but requested."
                            ]
                        },
                        {
                            "name": "FailureToCreateVoucher",
                            "doc": null
                        },
                        {
                            "name": "FailureToRedeemVoucher",
                            "doc": null
                        }
                    ],
                    "errors_value": {
                        "type": [
                            629,
                            627,
                            623,
                            617,
                            616,
                            615,
                            610,
                            611,
                            609,
                            613,
                            612,
                            498
                        ]
                    },
                    "index": 107
                },
                {
                    "name": "GearBank",
                    "prefix": "GearBank",
                    "storage": [
                        {
                            "name": "Bank",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_gear_bank:pallet:BankAccount",
                                    "keys_id": 0,
                                    "value_id": [
                                        630,
                                        628,
                                        624,
                                        618,
                                        617,
                                        616,
                                        611,
                                        612,
                                        610,
                                        614,
                                        613
                                    ]
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "UnusedValue",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": null
                        },
                        {
                            "name": "OnFinalizeTransfers",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "U128",
                                    "keys_id": 0,
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "OnFinalizeValue",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": null
                        }
                    ],
                    "constants": [
                        {
                            "name": "BankAddress",
                            "type": "AccountId",
                            "type_value": 0,
                            "constants_value": "6765617262616e6b6765617262616e6b6765617262616e6b6765617262616e6b",
                            "docs": [
                                " Bank account address, that will keep all reserved funds."
                            ]
                        },
                        {
                            "name": "GasMultiplier",
                            "type": "gear_common:GasMultiplier",
                            "type_value": [
                                612,
                                610,
                                606,
                                600,
                                599,
                                598,
                                595,
                                602,
                                596
                            ],
                            "constants_value": [
                                "0006000000000000000000000000000000",
                                "0019000000000000000000000000000000"
                            ],
                            "docs": [
                                " Gas price converter."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InsufficientBalance",
                            "doc": [
                                "Insufficient user balance."
                            ]
                        },
                        {
                            "name": "InsufficientGasBalance",
                            "doc": [
                                "Insufficient user's bank account gas balance."
                            ]
                        },
                        {
                            "name": "InsufficientValueBalance",
                            "doc": [
                                "Insufficient user's bank account gas balance."
                            ]
                        },
                        {
                            "name": "InsufficientBankBalance",
                            "doc": [
                                "Insufficient bank account balance.",
                                "**Must be unreachable in Gear main protocol.**"
                            ]
                        },
                        {
                            "name": "InsufficientDeposit",
                            "doc": [
                                "Deposit of funds that will not keep bank account alive.",
                                "**Must be unreachable in Gear main protocol.**"
                            ]
                        },
                        {
                            "name": "Overflow",
                            "doc": [
                                "Overflow during funds transfer.",
                                "**Must be unreachable in Gear main protocol.**"
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            631,
                            629,
                            625,
                            619,
                            618,
                            617,
                            612,
                            613,
                            611,
                            615,
                            614
                        ]
                    },
                    "index": 108
                },
                {
                    "name": "GearBuiltin",
                    "prefix": "",
                    "storage": null,
                    "errors": null,
                    "errors_value": null,
                    "index": 109
                },
                {
                    "name": "Sudo",
                    "prefix": "Sudo",
                    "storage": [
                        {
                            "name": "Key",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "AccountId",
                                "PlainTypeValue": 0
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The `AccountId` of the sudo key."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "6300",
                            "name": "sudo",
                            "docs": [
                                "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "",
                                "## Complexity",
                                "- O(1).",
                                "# <weight>",
                                "- Limited storage reads.",
                                "- One DB write (event).",
                                "- Weight of derivative `call` execution + 10,000.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "6301",
                            "name": "sudo_unchecked_weight",
                            "docs": [
                                "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                                "This function does not check the weight of the call, and instead allows the",
                                "Sudo user to specify the weight of the call.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "",
                                "## Complexity",
                                "- O(1).",
                                "# <weight>",
                                "- The weight of this call is defined by the caller.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                },
                                {
                                    "name": "weight",
                                    "type": "sp_weights:weight_v2:Weight",
                                    "type_name": "Weight"
                                }
                            ]
                        },
                        {
                            "lookup": "6302",
                            "name": "set_key",
                            "docs": [
                                "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                                "key.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "",
                                "## Complexity",
                                "- O(1).",
                                "# <weight>",
                                "- Limited storage reads.",
                                "- One DB change.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "new",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "6303",
                            "name": "sudo_as",
                            "docs": [
                                "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                                "a given account.",
                                "",
                                "The dispatch origin for this call must be _Signed_.",
                                "",
                                "## Complexity",
                                "- O(1).",
                                "# <weight>",
                                "- Limited storage reads.",
                                "- One DB write (event).",
                                "- Weight of derivative `call` execution + 10,000.",
                                "# </weight>"
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            280,
                            135,
                            133
                        ]
                    },
                    "events": [
                        {
                            "lookup": "6300",
                            "name": "Sudid",
                            "docs": [
                                "A sudo just took place. \\[result\\]"
                            ],
                            "args": [
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "sudo_result"
                            ],
                            "args_type_name": [
                                "DispatchResult"
                            ]
                        },
                        {
                            "lookup": "6301",
                            "name": "KeyChanged",
                            "docs": [
                                "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                            ],
                            "args": [
                                "option<AccountId>"
                            ],
                            "args_name": [
                                "old_sudoer"
                            ],
                            "args_type_name": [
                                "Option<AccountId>"
                            ]
                        },
                        {
                            "lookup": "6302",
                            "name": "SudoAsDone",
                            "docs": [
                                "A sudo just took place. \\[result\\]"
                            ],
                            "args": [
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "sudo_result"
                            ],
                            "args_type_name": [
                                "DispatchResult"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            343,
                            218,
                            202,
                            199
                        ]
                    },
                    "errors": [
                        {
                            "name": "RequireSudo",
                            "doc": [
                                "Sender must be the Sudo account"
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            616,
                            615,
                            613,
                            405,
                            385,
                            378
                        ]
                    },
                    "index": 99
                },
                {
                    "name": "Airdrop",
                    "prefix": "",
                    "storage": null,
                    "calls": [
                        {
                            "lookup": "c600",
                            "name": "transfer",
                            "docs": [
                                "Transfer tokens from pre-funded `source` to `dest` account.",
                                "",
                                "The origin must be the root.",
                                "",
                                "Parameters:",
                                "- `source`: the pre-funded account (i.e. root),",
                                "- `dest`: the beneficiary account,",
                                "- `amount`: the amount of tokens to be minted.",
                                "",
                                "Emits the following events:",
                                "- `TokensDeposited{ dest, amount }`"
                            ],
                            "args": [
                                {
                                    "name": "source",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "dest",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "amount",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "c601",
                            "name": "transfer_vested",
                            "docs": [
                                "Remove vesting for `source` account and transfer tokens to `dest` account.",
                                "",
                                "The origin must be the root.",
                                "",
                                "Parameters:",
                                "- `source`: the account with vesting running,",
                                "- `dest`: the beneficiary account,",
                                "- `schedule_index`: the index of `VestingInfo` for source account.",
                                "- `amount`: the amount to be unlocked and transferred from `VestingInfo`.",
                                "",
                                "Emits the following events:",
                                "- `VestingScheduleRemoved{ who, schedule_index }`",
                                "- `amount`: the amount to be unlocked and transfered from `VestingInfo`."
                            ],
                            "args": [
                                {
                                    "name": "source",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "dest",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "schedule_index",
                                    "type": "U32",
                                    "type_name": "u32"
                                },
                                {
                                    "name": "amount",
                                    "type": "option<U128>",
                                    "type_name": "Option<VestingBalanceOf>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": [
                            281,
                            204,
                            189,
                            187
                        ]
                    },
                    "events": [
                        {
                            "lookup": "c600",
                            "name": "TokensDeposited",
                            "docs": null,
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "c601",
                            "name": "VestingScheduleRemoved",
                            "docs": null,
                            "args": [
                                "AccountId",
                                "U32"
                            ],
                            "args_name": [
                                "who",
                                "schedule_index"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "u32"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            344,
                            263,
                            242,
                            239
                        ]
                    },
                    "errors": [
                        {
                            "name": "AmountBigger",
                            "doc": [
                                "Amount to being transferred is bigger than vested."
                            ]
                        },
                        null
                    ],
                    "errors_value": [
                        {
                            "type": [
                                617,
                                616,
                                614,
                                499
                            ]
                        },
                        null
                    ],
                    "index": 198
                },
                {
                    "name": "ValidatorSet",
                    "prefix": "ValidatorSet",
                    "storage": [
                        {
                            "name": "Validators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<AccountId>",
                                "PlainTypeValue": 109
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "ApprovedValidators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<AccountId>",
                                "PlainTypeValue": 109
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "OfflineValidators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<AccountId>",
                                "PlainTypeValue": 109
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "6200",
                            "name": "add_validator",
                            "docs": [
                                "Add a new validator.",
                                "",
                                "New validator's session keys should be set in Session pallet before",
                                "calling this.",
                                "",
                                "The origin can be configured using the `AddRemoveOrigin` type in the",
                                "host runtime. Can also be set to sudo/root."
                            ],
                            "args": [
                                {
                                    "name": "validator_id",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                }
                            ]
                        },
                        {
                            "lookup": "6201",
                            "name": "remove_validator",
                            "docs": [
                                "Remove a validator.",
                                "",
                                "The origin can be configured using the `AddRemoveOrigin` type in the",
                                "host runtime. Can also be set to sudo/root."
                            ],
                            "args": [
                                {
                                    "name": "validator_id",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                }
                            ]
                        },
                        {
                            "lookup": "6202",
                            "name": "add_validator_again",
                            "docs": [
                                "Add an approved validator again when it comes back online.",
                                "",
                                "For this call, the dispatch origin must be the validator itself."
                            ],
                            "args": [
                                {
                                    "name": "validator_id",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 134
                    },
                    "events": [
                        {
                            "lookup": "6200",
                            "name": "ValidatorAdditionInitiated",
                            "docs": [
                                "New validator addition initiated. Effective in ~2 sessions."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                ""
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "6201",
                            "name": "ValidatorRemovalInitiated",
                            "docs": [
                                "Validator removal initiated. Effective in ~2 sessions."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                ""
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": [
                            217,
                            201
                        ]
                    },
                    "errors": [
                        {
                            "name": "TooLowValidatorCount",
                            "doc": [
                                "Target (post-removal) validator count is below the minimum."
                            ]
                        },
                        {
                            "name": "Duplicate",
                            "doc": [
                                "Validator is already in the validator set."
                            ]
                        },
                        {
                            "name": "ValidatorNotApproved",
                            "doc": [
                                "Validator is not approved for re-addition."
                            ]
                        },
                        {
                            "name": "BadOrigin",
                            "doc": [
                                "Only the validator can add itself back after coming online."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": [
                            404,
                            384
                        ]
                    },
                    "index": 98
                }
            ]
        }
    }
}