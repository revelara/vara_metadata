{
    "code": 0,
    "message": "Success",
    "generated_at": 1722678874,
    "data": {
        "info": {
            "metadata": [
                {
                    "name": "System",
                    "prefix": "System",
                    "storage": [
                        {
                            "name": "Account",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "frame_system:AccountInfo",
                                    "keys_id": 0,
                                    "value_id": 3
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                            "docs": [
                                " The full account information for a particular account ID."
                            ]
                        },
                        {
                            "name": "ExtrinsicCount",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Total extrinsics count for the current block."
                            ]
                        },
                        {
                            "name": "BlockWeight",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "frame_support:dispatch:PerDispatchClass@8",
                                "PlainTypeValue": 8
                            },
                            "fallback": "0x000000000000",
                            "docs": [
                                " The current weight for the block."
                            ]
                        },
                        {
                            "name": "AllExtrinsicsLen",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Total length (in bytes) for all extrinsics put together, for the current block."
                            ]
                        },
                        {
                            "name": "BlockHash",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "H256",
                                    "keys_id": 4,
                                    "value_id": 12
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " Map of block numbers to block hashes."
                            ]
                        },
                        {
                            "name": "ExtrinsicData",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": 13
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                            ]
                        },
                        {
                            "name": "Number",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The current block number being processed. Set by `execute_block`."
                            ]
                        },
                        {
                            "name": "ParentHash",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "H256",
                                "PlainTypeValue": 12
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " Hash of the previous block."
                            ]
                        },
                        {
                            "name": "Digest",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<sp_runtime:generic:digest:DigestItem>",
                                "PlainTypeValue": 14
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Digest of the current block, also part of the block header."
                            ]
                        },
                        {
                            "name": "Events",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<frame_system:EventRecord>",
                                "PlainTypeValue": 18
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Events deposited for the current block.",
                                "",
                                " NOTE: The item is unbound and should therefore never be read on chain.",
                                " It could otherwise inflate the PoV size of a block.",
                                "",
                                " Events have a large in-memory size. Box the events to not go out-of-memory",
                                " just in case someone still reads them from within the runtime."
                            ]
                        },
                        {
                            "name": "EventCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The number of events in the `Events<T>` list."
                            ]
                        },
                        {
                            "name": "EventTopics",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": "Vec<Tuple:U32U32>",
                                    "keys_id": 12,
                                    "value_id": 337
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                                " of events in the `<Events<T>>` list.",
                                "",
                                " All topic vectors have deterministic storage locations depending on the topic. This",
                                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                                " in case of changes fetch the list of events of interest.",
                                "",
                                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                                " the `EventIndex` then in case if the topic has the same contents on the next block",
                                " no notification will be triggered thus the event might be lost."
                            ]
                        },
                        {
                            "name": "LastRuntimeUpgrade",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "frame_system:LastRuntimeUpgradeInfo",
                                "PlainTypeValue": 338
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                            ]
                        },
                        {
                            "name": "UpgradedToU32RefCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": 54
                            },
                            "fallback": "0x00",
                            "docs": [
                                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                            ]
                        },
                        {
                            "name": "UpgradedToTripleRefCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": 54
                            },
                            "fallback": "0x00",
                            "docs": [
                                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                                " (default) if not."
                            ]
                        },
                        {
                            "name": "ExecutionPhase",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "frame_system:Phase",
                                "PlainTypeValue": 336
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The execution phase of the block."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0000",
                            "name": "remark",
                            "docs": [
                                "See [`Pallet::remark`]."
                            ],
                            "args": [
                                {
                                    "name": "remark",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "0001",
                            "name": "set_heap_pages",
                            "docs": [
                                "See [`Pallet::set_heap_pages`]."
                            ],
                            "args": [
                                {
                                    "name": "pages",
                                    "type": "U64",
                                    "type_name": "u64"
                                }
                            ]
                        },
                        {
                            "lookup": "0002",
                            "name": "set_code",
                            "docs": [
                                "See [`Pallet::set_code`]."
                            ],
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "0003",
                            "name": "set_code_without_checks",
                            "docs": [
                                "See [`Pallet::set_code_without_checks`]."
                            ],
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "0004",
                            "name": "set_storage",
                            "docs": [
                                "See [`Pallet::set_storage`]."
                            ],
                            "args": [
                                {
                                    "name": "items",
                                    "type": "Vec<Tuple:Vec<U8>Vec<U8>>",
                                    "type_name": "Vec<KeyValue>"
                                }
                            ]
                        },
                        {
                            "lookup": "0005",
                            "name": "kill_storage",
                            "docs": [
                                "See [`Pallet::kill_storage`]."
                            ],
                            "args": [
                                {
                                    "name": "keys",
                                    "type": "Vec<Vec<U8>>",
                                    "type_name": "Vec<Key>"
                                }
                            ]
                        },
                        {
                            "lookup": "0006",
                            "name": "kill_prefix",
                            "docs": [
                                "See [`Pallet::kill_prefix`]."
                            ],
                            "args": [
                                {
                                    "name": "prefix",
                                    "type": "Vec<U8>",
                                    "type_name": "Key"
                                },
                                {
                                    "name": "subkeys",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0007",
                            "name": "remark_with_event",
                            "docs": [
                                "See [`Pallet::remark_with_event`]."
                            ],
                            "args": [
                                {
                                    "name": "remark",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 66
                    },
                    "events": [
                        {
                            "lookup": "0000",
                            "name": "ExtrinsicSuccess",
                            "docs": [
                                "An extrinsic completed successfully."
                            ],
                            "args": [
                                "frame_support:dispatch:DispatchInfo"
                            ],
                            "args_name": [
                                "dispatch_info"
                            ],
                            "args_type_name": [
                                "DispatchInfo"
                            ]
                        },
                        {
                            "lookup": "0001",
                            "name": "ExtrinsicFailed",
                            "docs": [
                                "An extrinsic failed."
                            ],
                            "args": [
                                "sp_runtime:DispatchError",
                                "frame_support:dispatch:DispatchInfo"
                            ],
                            "args_name": [
                                "dispatch_error",
                                "dispatch_info"
                            ],
                            "args_type_name": [
                                "DispatchError",
                                "DispatchInfo"
                            ]
                        },
                        {
                            "lookup": "0002",
                            "name": "CodeUpdated",
                            "docs": [
                                "`:code` was updated."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0003",
                            "name": "NewAccount",
                            "docs": [
                                "A new account was created."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "account"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0004",
                            "name": "KilledAccount",
                            "docs": [
                                "An account was reaped."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "account"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0005",
                            "name": "Remarked",
                            "docs": [
                                "On on-chain remark happened."
                            ],
                            "args": [
                                "AccountId",
                                "H256"
                            ],
                            "args_name": [
                                "sender",
                                "hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Hash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 21
                    },
                    "constants": [
                        {
                            "name": "BlockWeights",
                            "type": "frame_system:limits:BlockWeights",
                            "type_value": 340,
                            "constants_value": "025b1f5d00070010a5d4e813ffffffffffffffffc2a0a91d000107d02f9b313313ec51b81e85eb51380107004429353a130000000000000040010000c2a0a91d000107d0fb16d1e113eb51b81e85eb51f801070010a5d4e813ffffffffffffffff010700cc7b9fae13ffffffffffffffbfc2a0a91d00000000",
                            "docs": [
                                " Block & extrinsics weights: base values and limits."
                            ]
                        },
                        {
                            "name": "BlockLength",
                            "type": "frame_support:dispatch:PerDispatchClass@344",
                            "type_value": 343,
                            "constants_value": "000014000000500000005000",
                            "docs": [
                                " The maximum length of a block (in bytes)."
                            ]
                        },
                        {
                            "name": "BlockHashCount",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "60090000",
                            "docs": [
                                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
                            ]
                        },
                        {
                            "name": "DbWeight",
                            "type": "sp_weights:RuntimeDbWeight",
                            "type_value": 345,
                            "constants_value": "40787d010000000000e1f50500000000",
                            "docs": [
                                " The weight of runtime database operations the runtime can invoke."
                            ]
                        },
                        {
                            "name": "Version",
                            "type": "sp_version:RuntimeVersion",
                            "type_value": 346,
                            "constants_value": "1076617261107661726101000000780500000100000040cbca25e39f14238702000000f3ff14d5ab5270590300000017a6bc0d0062aeb30100000018ef58a3b67ba7700100000029ca33476f4108aa01000000f757f704c8ea14fe01000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000ff8dc88037f26223020000000100000001",
                            "docs": [
                                " Get the chain's current version."
                            ]
                        },
                        {
                            "name": "SS58Prefix",
                            "type": "U16",
                            "type_value": 63,
                            "constants_value": "8900",
                            "docs": [
                                " The designated SS58 prefix of this chain.",
                                "",
                                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                                " that the runtime should know about the prefix in order to make use of it as",
                                " an identifier of the chain."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InvalidSpecName",
                            "doc": [
                                "The name of specification does not match between the current runtime",
                                "and the new runtime."
                            ]
                        },
                        {
                            "name": "SpecVersionNeedsToIncrease",
                            "doc": [
                                "The specification version is not allowed to decrease between the current runtime",
                                "and the new runtime."
                            ]
                        },
                        {
                            "name": "FailedToExtractRuntimeVersion",
                            "doc": [
                                "Failed to extract the runtime version from the new runtime.",
                                "",
                                "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                            ]
                        },
                        {
                            "name": "NonDefaultComposite",
                            "doc": [
                                "Suicide called when the account has non-default composite data."
                            ]
                        },
                        {
                            "name": "NonZeroRefCount",
                            "doc": [
                                "There is a non-zero reference count preventing the account from being purged."
                            ]
                        },
                        {
                            "name": "CallFiltered",
                            "doc": [
                                "The origin filter prevent the call to be dispatched."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 350
                    },
                    "index": 0
                },
                {
                    "name": "Timestamp",
                    "prefix": "Timestamp",
                    "storage": [
                        {
                            "name": "Now",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 11
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The current time for the current block."
                            ]
                        },
                        {
                            "name": "DidUpdate",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": 54
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Whether the timestamp has been updated in this block.",
                                "",
                                " This value is updated to `true` upon successful submission of a timestamp by a node.",
                                " It is then checked at the end of each block execution in the `on_finalize` hook."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0100",
                            "name": "set",
                            "docs": [
                                "See [`Pallet::set`]."
                            ],
                            "args": [
                                {
                                    "name": "now",
                                    "type": "compact<U64>",
                                    "type_name": "Moment"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 70
                    },
                    "constants": [
                        {
                            "name": "MinimumPeriod",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "dc05000000000000",
                            "docs": [
                                " The minimum period between blocks.",
                                "",
                                " Be aware that this is different to the *expected* period that the block production",
                                " apparatus provides. Your chosen consensus system will generally work with this to",
                                " determine a sensible block time. For example, in the Aura pallet it will be double this",
                                " period on default settings."
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 1
                },
                {
                    "name": "Authorship",
                    "prefix": "Authorship",
                    "storage": [
                        {
                            "name": "Author",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "AccountId",
                                "PlainTypeValue": 0
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Author of current block."
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 2
                },
                {
                    "name": "AuthorityDiscovery",
                    "prefix": "AuthorityDiscovery",
                    "storage": [
                        {
                            "name": "Keys",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<[U8; 32]>",
                                "PlainTypeValue": 351
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Keys of the current authority set."
                            ]
                        },
                        {
                            "name": "NextKeys",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<[U8; 32]>",
                                "PlainTypeValue": 351
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Keys of the next authority set."
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 9
                },
                {
                    "name": "Babe",
                    "prefix": "Babe",
                    "storage": [
                        {
                            "name": "EpochIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 11
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " Current epoch index."
                            ]
                        },
                        {
                            "name": "Authorities",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:[U8; 32]U64>",
                                "PlainTypeValue": 353
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Current epoch authorities."
                            ]
                        },
                        {
                            "name": "GenesisSlot",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 76
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The slot at which the first epoch actually started. This is 0",
                                " until the first block of the chain."
                            ]
                        },
                        {
                            "name": "CurrentSlot",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 76
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " Current slot number."
                            ]
                        },
                        {
                            "name": "Randomness",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "[U8; 32]",
                                "PlainTypeValue": 1
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " The epoch randomness for the *current* epoch.",
                                "",
                                " # Security",
                                "",
                                " This MUST NOT be used for gambling, as it can be influenced by a",
                                " malicious validator in the short term. It MAY be used in many",
                                " cryptographic protocols, however, so long as one remembers that this",
                                " (like everything else on-chain) it is public. For example, it can be",
                                " used where a number is needed that cannot have been chosen by an",
                                " adversary, for purposes such as public-coin zero-knowledge proofs."
                            ]
                        },
                        {
                            "name": "PendingEpochConfigChange",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "sp_consensus_babe:digests:NextConfigDescriptor",
                                "PlainTypeValue": 78
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Pending epoch configuration change that will be applied when the next epoch is enacted."
                            ]
                        },
                        {
                            "name": "NextRandomness",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "[U8; 32]",
                                "PlainTypeValue": 1
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " Next epoch randomness."
                            ]
                        },
                        {
                            "name": "NextAuthorities",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:[U8; 32]U64>",
                                "PlainTypeValue": 353
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Next epoch authorities."
                            ]
                        },
                        {
                            "name": "SegmentIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Randomness under construction.",
                                "",
                                " We make a trade-off between storage accesses and list length.",
                                " We store the under-construction randomness in segments of up to",
                                " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                                "",
                                " Once a segment reaches this length, we begin the next one.",
                                " We reset all segments and return to `0` at the beginning of every",
                                " epoch."
                            ]
                        },
                        {
                            "name": "UnderConstruction",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<[U8; 32]>",
                                    "keys_id": 4,
                                    "value_id": 356
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                            ]
                        },
                        {
                            "name": "Initialized",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "option<sp_consensus_babe:digests:PreDigest>",
                                "PlainTypeValue": 358
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Temporary value (cleared at block finalization) which is `Some`",
                                " if per-block initialization has already been called for current block."
                            ]
                        },
                        {
                            "name": "AuthorVrfRandomness",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "option<[U8; 32]>",
                                "PlainTypeValue": 291
                            },
                            "fallback": "0x00",
                            "docs": [
                                " This field should always be populated during block processing unless",
                                " secondary plain slots are enabled (which don't contain a VRF output).",
                                "",
                                " It is set in `on_finalize`, before it will contain the value from the last block."
                            ]
                        },
                        {
                            "name": "EpochStart",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Tuple:U32U32",
                                "PlainTypeValue": 136
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The block numbers when the last and current epoch have started, respectively `N-1` and",
                                " `N`.",
                                " NOTE: We track this is in order to annotate the block number when a given pool of",
                                " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                                " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                            ]
                        },
                        {
                            "name": "Lateness",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " How late the current block is compared to its parent.",
                                "",
                                " This entry is populated as part of block execution and is cleaned up",
                                " on block finalization. Querying this storage entry outside of block",
                                " execution context should always yield zero."
                            ]
                        },
                        {
                            "name": "EpochConfig",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "sp_consensus_babe:BabeEpochConfiguration",
                                "PlainTypeValue": 364
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The configuration for the current epoch. Should never be `None` as it is initialized in",
                                " genesis."
                            ]
                        },
                        {
                            "name": "NextEpochConfig",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "sp_consensus_babe:BabeEpochConfiguration",
                                "PlainTypeValue": 364
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The configuration for the next epoch, `None` if the config will not change",
                                " (you can fallback to `EpochConfig` instead in that case)."
                            ]
                        },
                        {
                            "name": "SkippedEpochs",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:U64U32>",
                                "PlainTypeValue": 365
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A list of the last 100 skipped epochs and the corresponding session index",
                                " when the epoch was skipped.",
                                "",
                                " This is only used for validating equivocation proofs. An equivocation proof",
                                " must contains a key-ownership proof for a given session, therefore we need a",
                                " way to tie together sessions and epoch indices, i.e. we need to validate that",
                                " a validator was the owner of a given key on a given session, and what the",
                                " active epoch index was during that session."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0300",
                            "name": "report_equivocation",
                            "docs": [
                                "See [`Pallet::report_equivocation`]."
                            ],
                            "args": [
                                {
                                    "name": "equivocation_proof",
                                    "type": "sp_consensus_slots:EquivocationProof",
                                    "type_name": "Box<EquivocationProof<HeaderFor>>"
                                },
                                {
                                    "name": "key_owner_proof",
                                    "type": "sp_session:MembershipProof",
                                    "type_name": "KeyOwnerProof"
                                }
                            ]
                        },
                        {
                            "lookup": "0301",
                            "name": "report_equivocation_unsigned",
                            "docs": [
                                "See [`Pallet::report_equivocation_unsigned`]."
                            ],
                            "args": [
                                {
                                    "name": "equivocation_proof",
                                    "type": "sp_consensus_slots:EquivocationProof",
                                    "type_name": "Box<EquivocationProof<HeaderFor>>"
                                },
                                {
                                    "name": "key_owner_proof",
                                    "type": "sp_session:MembershipProof",
                                    "type_name": "KeyOwnerProof"
                                }
                            ]
                        },
                        {
                            "lookup": "0302",
                            "name": "plan_config_change",
                            "docs": [
                                "See [`Pallet::plan_config_change`]."
                            ],
                            "args": [
                                {
                                    "name": "config",
                                    "type": "sp_consensus_babe:digests:NextConfigDescriptor",
                                    "type_name": "NextConfigDescriptor"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 71
                    },
                    "constants": [
                        {
                            "name": "EpochDuration",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "6009000000000000",
                            "docs": [
                                " The amount of time, in slots, that each epoch should last.",
                                " NOTE: Currently it is not possible to change the epoch duration after",
                                " the chain has started. Attempting to do so will brick block production."
                            ]
                        },
                        {
                            "name": "ExpectedBlockTime",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "b80b000000000000",
                            "docs": [
                                " The expected average block time at which BABE should be creating",
                                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                                " what the expected average block time should be based on the slot",
                                " duration and the security parameter `c` (where `1 - c` represents",
                                " the probability of a slot being empty)."
                            ]
                        },
                        {
                            "name": "MaxAuthorities",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "a0860100",
                            "docs": [
                                " Max number of authorities allowed"
                            ]
                        },
                        {
                            "name": "MaxNominators",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00010000",
                            "docs": [
                                " The maximum number of nominators for each validator."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InvalidEquivocationProof",
                            "doc": [
                                "An equivocation proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name": "InvalidKeyOwnershipProof",
                            "doc": [
                                "A key ownership proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name": "DuplicateOffenceReport",
                            "doc": [
                                "A given equivocation report is valid but already previously reported."
                            ]
                        },
                        {
                            "name": "InvalidConfiguration",
                            "doc": [
                                "Submitted configuration is invalid."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 368
                    },
                    "index": 3
                },
                {
                    "name": "Grandpa",
                    "prefix": "Grandpa",
                    "storage": [
                        {
                            "name": "State",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_grandpa:StoredState",
                                "PlainTypeValue": 369
                            },
                            "fallback": "0x00",
                            "docs": [
                                " State of the current authority set."
                            ]
                        },
                        {
                            "name": "PendingChange",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_grandpa:StoredPendingChange",
                                "PlainTypeValue": 370
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Pending change: (signaled at, scheduled change)."
                            ]
                        },
                        {
                            "name": "NextForced",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " next block number where we can force a change."
                            ]
                        },
                        {
                            "name": "Stalled",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Tuple:U32U32",
                                "PlainTypeValue": 136
                            },
                            "fallback": "0x00",
                            "docs": [
                                " `true` if we are currently stalled."
                            ]
                        },
                        {
                            "name": "CurrentSetId",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 11
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The number of changes (both in terms of keys and underlying economic responsibilities)",
                                " in the \"set\" of Grandpa validators from genesis."
                            ]
                        },
                        {
                            "name": "SetIdSession",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U64"
                                    ],
                                    "value": "U32",
                                    "keys_id": 11,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                                " members were responsible.",
                                "",
                                " This is only used for validating equivocation proofs. An equivocation proof must",
                                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                                " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                                " was the owner of a given key on a given session, and what the active set ID was",
                                " during that session.",
                                "",
                                " TWOX-NOTE: `SetId` is not under user control."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0400",
                            "name": "report_equivocation",
                            "docs": [
                                "See [`Pallet::report_equivocation`]."
                            ],
                            "args": [
                                {
                                    "name": "equivocation_proof",
                                    "type": "sp_consensus_grandpa:EquivocationProof",
                                    "type_name": "Box<EquivocationProof<Hash, BlockNumberFor>>"
                                },
                                {
                                    "name": "key_owner_proof",
                                    "type": "sp_session:MembershipProof",
                                    "type_name": "KeyOwnerProof"
                                }
                            ]
                        },
                        {
                            "lookup": "0401",
                            "name": "report_equivocation_unsigned",
                            "docs": [
                                "See [`Pallet::report_equivocation_unsigned`]."
                            ],
                            "args": [
                                {
                                    "name": "equivocation_proof",
                                    "type": "sp_consensus_grandpa:EquivocationProof",
                                    "type_name": "Box<EquivocationProof<Hash, BlockNumberFor>>"
                                },
                                {
                                    "name": "key_owner_proof",
                                    "type": "sp_session:MembershipProof",
                                    "type_name": "KeyOwnerProof"
                                }
                            ]
                        },
                        {
                            "lookup": "0402",
                            "name": "note_stalled",
                            "docs": [
                                "See [`Pallet::note_stalled`]."
                            ],
                            "args": [
                                {
                                    "name": "delay",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                },
                                {
                                    "name": "best_finalized_block_number",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 81
                    },
                    "events": [
                        {
                            "lookup": "0400",
                            "name": "NewAuthorities",
                            "docs": [
                                "New authority set has been applied."
                            ],
                            "args": [
                                "Vec<Tuple:sp_consensus_grandpa:app:PublicU64>"
                            ],
                            "args_name": [
                                "authority_set"
                            ],
                            "args_type_name": [
                                "AuthorityList"
                            ]
                        },
                        {
                            "lookup": "0401",
                            "name": "Paused",
                            "docs": [
                                "Current authority set has been paused."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0402",
                            "name": "Resumed",
                            "docs": [
                                "Current authority set has been resumed."
                            ],
                            "args": null
                        }
                    ],
                    "events_value": {
                        "type": 30
                    },
                    "constants": [
                        {
                            "name": "MaxAuthorities",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "a0860100",
                            "docs": [
                                " Max Authorities in use"
                            ]
                        },
                        {
                            "name": "MaxNominators",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00010000",
                            "docs": [
                                " The maximum number of nominators for each validator."
                            ]
                        },
                        {
                            "name": "MaxSetIdSessionEntries",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "5400000000000000",
                            "docs": [
                                " The maximum number of entries to keep in the set id to session index mapping.",
                                "",
                                " Since the `SetIdSession` map is only used for validating equivocations this",
                                " value should relate to the bonding duration of whatever staking system is",
                                " being used (if any). If equivocation handling is not enabled then this value",
                                " can be zero."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "PauseFailed",
                            "doc": [
                                "Attempt to signal GRANDPA pause when the authority set isn't live",
                                "(either paused or already pending pause)."
                            ]
                        },
                        {
                            "name": "ResumeFailed",
                            "doc": [
                                "Attempt to signal GRANDPA resume when the authority set isn't paused",
                                "(either live or already pending resume)."
                            ]
                        },
                        {
                            "name": "ChangePending",
                            "doc": [
                                "Attempt to signal GRANDPA change with one already pending."
                            ]
                        },
                        {
                            "name": "TooSoon",
                            "doc": [
                                "Cannot signal forced change so soon after last."
                            ]
                        },
                        {
                            "name": "InvalidKeyOwnershipProof",
                            "doc": [
                                "A key ownership proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name": "InvalidEquivocationProof",
                            "doc": [
                                "An equivocation proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name": "DuplicateOffenceReport",
                            "doc": [
                                "A given equivocation report is valid but already previously reported."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 372
                    },
                    "index": 4
                },
                {
                    "name": "Balances",
                    "prefix": "Balances",
                    "storage": [
                        {
                            "name": "TotalIssuance",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The total units issued in the system."
                            ]
                        },
                        {
                            "name": "InactiveIssuance",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The total units of outstanding deactivated balance in the system."
                            ]
                        },
                        {
                            "name": "Account",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_balances:types:AccountData",
                                    "keys_id": 0,
                                    "value_id": 5
                                }
                            },
                            "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                            "docs": [
                                " The Balances pallet example of storing the balance of an account.",
                                "",
                                " # Example",
                                "",
                                " ```nocompile",
                                "  impl pallet_balances::Config for Runtime {",
                                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                                "  }",
                                " ```",
                                "",
                                " You can also store the balance of an account in the `System` pallet.",
                                "",
                                " # Example",
                                "",
                                " ```nocompile",
                                "  impl pallet_balances::Config for Runtime {",
                                "   type AccountStore = System",
                                "  }",
                                " ```",
                                "",
                                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                                " `frame_system` data alongside the account data contrary to storing account balances in the",
                                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                                " NOTE: This is only used in the case that this pallet is used to store balances."
                            ]
                        },
                        {
                            "name": "Locks",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Vec<pallet_balances:types:BalanceLock>",
                                    "keys_id": 0,
                                    "value_id": 373
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Any liquidity locks on some account balances.",
                                " NOTE: Should only be accessed when setting, changing and freeing a lock."
                            ]
                        },
                        {
                            "name": "Reserves",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Vec<pallet_balances:types:ReserveData>",
                                    "keys_id": 0,
                                    "value_id": 377
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Named reserves on some account balances."
                            ]
                        },
                        {
                            "name": "Holds",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Vec<pallet_balances:types:IdAmount@381>",
                                    "keys_id": 0,
                                    "value_id": 380
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Holds on account balances."
                            ]
                        },
                        {
                            "name": "Freezes",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Vec<pallet_balances:types:IdAmount@386>",
                                    "keys_id": 0,
                                    "value_id": 385
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Freeze locks on account balances."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0500",
                            "name": "transfer_allow_death",
                            "docs": [
                                "See [`Pallet::transfer_allow_death`]."
                            ],
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0502",
                            "name": "force_transfer",
                            "docs": [
                                "See [`Pallet::force_transfer`]."
                            ],
                            "args": [
                                {
                                    "name": "source",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "dest",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0503",
                            "name": "transfer_keep_alive",
                            "docs": [
                                "See [`Pallet::transfer_keep_alive`]."
                            ],
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0504",
                            "name": "transfer_all",
                            "docs": [
                                "See [`Pallet::transfer_all`]."
                            ],
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "0505",
                            "name": "force_unreserve",
                            "docs": [
                                "See [`Pallet::force_unreserve`]."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "amount",
                                    "type": "U128",
                                    "type_name": "Balance"
                                }
                            ]
                        },
                        {
                            "lookup": "0506",
                            "name": "upgrade_accounts",
                            "docs": [
                                "See [`Pallet::upgrade_accounts`]."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "0508",
                            "name": "force_set_balance",
                            "docs": [
                                "See [`Pallet::force_set_balance`]."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "new_free",
                                    "type": "compact<U128>",
                                    "type_name": "Balance"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 93
                    },
                    "events": [
                        {
                            "lookup": "0500",
                            "name": "Endowed",
                            "docs": [
                                "An account was created with some free balance."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "free_balance"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0501",
                            "name": "DustLost",
                            "docs": [
                                "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                                "resulting in an outright loss."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0502",
                            "name": "Transfer",
                            "docs": [
                                "Transfer succeeded."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "from",
                                "to",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0503",
                            "name": "BalanceSet",
                            "docs": [
                                "A balance was set by root."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "free"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0504",
                            "name": "Reserved",
                            "docs": [
                                "Some balance was reserved (moved from free to reserved)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0505",
                            "name": "Unreserved",
                            "docs": [
                                "Some balance was unreserved (moved from reserved to free)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0506",
                            "name": "ReserveRepatriated",
                            "docs": [
                                "Some balance was moved from the reserve of the first account to the second account.",
                                "Final argument indicates the destination balance type."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128",
                                "frame_support:traits:tokens:misc:BalanceStatus"
                            ],
                            "args_name": [
                                "from",
                                "to",
                                "amount",
                                "destination_status"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "Balance",
                                "Status"
                            ]
                        },
                        {
                            "lookup": "0507",
                            "name": "Deposit",
                            "docs": [
                                "Some amount was deposited (e.g. for transaction fees)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0508",
                            "name": "Withdraw",
                            "docs": [
                                "Some amount was withdrawn from the account (e.g. for transaction fees)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0509",
                            "name": "Slashed",
                            "docs": [
                                "Some amount was removed from the account (e.g. for misbehavior)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050a",
                            "name": "Minted",
                            "docs": [
                                "Some amount was minted into an account."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050b",
                            "name": "Burned",
                            "docs": [
                                "Some amount was burned from an account."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050c",
                            "name": "Suspended",
                            "docs": [
                                "Some amount was suspended from an account (it can be restored later)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050d",
                            "name": "Restored",
                            "docs": [
                                "Some amount was restored into an account."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "050e",
                            "name": "Upgraded",
                            "docs": [
                                "An account was upgraded."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "who"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "050f",
                            "name": "Issued",
                            "docs": [
                                "Total issuance was increased by `amount`, creating a credit to be balanced."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0510",
                            "name": "Rescinded",
                            "docs": [
                                "Total issuance was decreased by `amount`, creating a debt to be balanced."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0511",
                            "name": "Locked",
                            "docs": [
                                "Some balance was locked."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0512",
                            "name": "Unlocked",
                            "docs": [
                                "Some balance was unlocked."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0513",
                            "name": "Frozen",
                            "docs": [
                                "Some balance was frozen."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        },
                        {
                            "lookup": "0514",
                            "name": "Thawed",
                            "docs": [
                                "Some balance was thawed."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Balance"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 35
                    },
                    "constants": [
                        {
                            "name": "ExistentialDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "0010a5d4e80000000000000000000000",
                            "docs": [
                                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                                "",
                                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                                " In case you have multiple sources of provider references, you may also get unexpected",
                                " behaviour if you set this to zero.",
                                "",
                                " Bottom line: Do yourself a favour and make it at least one!"
                            ]
                        },
                        {
                            "name": "MaxLocks",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "32000000",
                            "docs": [
                                " The maximum number of locks that should exist on an account.",
                                " Not strictly enforced, but used for weight estimation."
                            ]
                        },
                        {
                            "name": "MaxReserves",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "32000000",
                            "docs": [
                                " The maximum number of named reserves that can exist on an account."
                            ]
                        },
                        {
                            "name": "MaxHolds",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "02000000",
                            "docs": [
                                " The maximum number of holds that can exist on an account at any time."
                            ]
                        },
                        {
                            "name": "MaxFreezes",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00000000",
                            "docs": [
                                " The maximum number of individual freeze locks that can exist on an account at any time."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "VestingBalance",
                            "doc": [
                                "Vesting balance too high to send value."
                            ]
                        },
                        {
                            "name": "LiquidityRestrictions",
                            "doc": [
                                "Account liquidity restrictions prevent withdrawal."
                            ]
                        },
                        {
                            "name": "InsufficientBalance",
                            "doc": [
                                "Balance too low to send value."
                            ]
                        },
                        {
                            "name": "ExistentialDeposit",
                            "doc": [
                                "Value too low to create account due to existential deposit."
                            ]
                        },
                        {
                            "name": "Expendability",
                            "doc": [
                                "Transfer/payment would kill account."
                            ]
                        },
                        {
                            "name": "ExistingVestingSchedule",
                            "doc": [
                                "A vesting schedule already exists for this account."
                            ]
                        },
                        {
                            "name": "DeadAccount",
                            "doc": [
                                "Beneficiary account must pre-exist."
                            ]
                        },
                        {
                            "name": "TooManyReserves",
                            "doc": [
                                "Number of named reserves exceed `MaxReserves`."
                            ]
                        },
                        {
                            "name": "TooManyHolds",
                            "doc": [
                                "Number of holds exceed `MaxHolds`."
                            ]
                        },
                        {
                            "name": "TooManyFreezes",
                            "doc": [
                                "Number of freezes exceed `MaxFreezes`."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 388
                    },
                    "index": 5
                },
                {
                    "name": "Vesting",
                    "prefix": "Vesting",
                    "storage": [
                        {
                            "name": "Vesting",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Vec<pallet_vesting:vesting_info:VestingInfo>",
                                    "keys_id": 0,
                                    "value_id": 389
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Information regarding the vesting of a given account."
                            ]
                        },
                        {
                            "name": "StorageVersion",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_vesting:Releases",
                                "PlainTypeValue": 391
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Storage version of the pallet.",
                                "",
                                " New networks start with latest version, as determined by the genesis build."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0a00",
                            "name": "vest",
                            "docs": [
                                "See [`Pallet::vest`]."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0a01",
                            "name": "vest_other",
                            "docs": [
                                "See [`Pallet::vest_other`]."
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0a02",
                            "name": "vested_transfer",
                            "docs": [
                                "See [`Pallet::vested_transfer`]."
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "schedule",
                                    "type": "pallet_vesting:vesting_info:VestingInfo",
                                    "type_name": "VestingInfo<BalanceOf, BlockNumberFor>"
                                }
                            ]
                        },
                        {
                            "lookup": "0a03",
                            "name": "force_vested_transfer",
                            "docs": [
                                "See [`Pallet::force_vested_transfer`]."
                            ],
                            "args": [
                                {
                                    "name": "source",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "schedule",
                                    "type": "pallet_vesting:vesting_info:VestingInfo",
                                    "type_name": "VestingInfo<BalanceOf, BlockNumberFor>"
                                }
                            ]
                        },
                        {
                            "lookup": "0a04",
                            "name": "merge_schedules",
                            "docs": [
                                "See [`Pallet::merge_schedules`]."
                            ],
                            "args": [
                                {
                                    "name": "schedule1_index",
                                    "type": "U32",
                                    "type_name": "u32"
                                },
                                {
                                    "name": "schedule2_index",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 98
                    },
                    "events": [
                        {
                            "lookup": "0a00",
                            "name": "VestingUpdated",
                            "docs": [
                                "The amount vested has been updated. This could indicate a change in funds available.",
                                "The balance given is the amount which is left unvested (and thus locked)."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "unvested"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0a01",
                            "name": "VestingCompleted",
                            "docs": [
                                "An \\[account\\] has become fully vested."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "account"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 37
                    },
                    "constants": [
                        {
                            "name": "MinVestedTransfer",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00a0724e180900000000000000000000",
                            "docs": [
                                " The minimum amount transferred to call `vested_transfer`."
                            ]
                        },
                        {
                            "name": "MaxVestingSchedules",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "1c000000",
                            "docs": null
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotVesting",
                            "doc": [
                                "The account given is not vesting."
                            ]
                        },
                        {
                            "name": "AtMaxVestingSchedules",
                            "doc": [
                                "The account already has `MaxVestingSchedules` count of schedules and thus",
                                "cannot add another one. Consider merging existing schedules in order to add another."
                            ]
                        },
                        {
                            "name": "AmountLow",
                            "doc": [
                                "Amount being transferred is too low to create a vesting schedule."
                            ]
                        },
                        {
                            "name": "ScheduleIndexOutOfBounds",
                            "doc": [
                                "An index was out of bounds of the vesting schedules."
                            ]
                        },
                        {
                            "name": "InvalidScheduleParams",
                            "doc": [
                                "Failed to create a new schedule because some parameter was invalid."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 392
                    },
                    "index": 10
                },
                {
                    "name": "TransactionPayment",
                    "prefix": "TransactionPayment",
                    "storage": [
                        {
                            "name": "NextFeeMultiplier",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 393
                            },
                            "fallback": "0x000064a7b3b6e00d0000000000000000",
                            "docs": null
                        },
                        {
                            "name": "StorageVersion",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_transaction_payment:Releases",
                                "PlainTypeValue": 394
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "events": [
                        {
                            "lookup": "0600",
                            "name": "TransactionFeePaid",
                            "docs": [
                                "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                                "has been paid by `who`."
                            ],
                            "args": [
                                "AccountId",
                                "U128",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "actual_fee",
                                "tip"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf",
                                "BalanceOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 38
                    },
                    "constants": [
                        {
                            "name": "OperationalFeeMultiplier",
                            "type": "U8",
                            "type_value": 2,
                            "constants_value": "05",
                            "docs": [
                                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                                " `priority`",
                                "",
                                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                                " added to a tip component in regular `priority` calculations.",
                                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                                "",
                                " ```rust,ignore",
                                " // For `Normal`",
                                " let priority = priority_calc(tip);",
                                "",
                                " // For `Operational`",
                                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                                " let priority = priority_calc(tip + virtual_tip);",
                                " ```",
                                "",
                                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                                " sent with the transaction. So, not only does the transaction get a priority bump based",
                                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                                " transactions."
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 6
                },
                {
                    "name": "BagsList",
                    "prefix": "BagsList",
                    "storage": [
                        {
                            "name": "ListNodes",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_bags_list:list:Node",
                                    "keys_id": 0,
                                    "value_id": 395
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A single node, within some bag.",
                                "",
                                " Nodes store links forward and back within their respective bags."
                            ]
                        },
                        {
                            "name": "CounterForListNodes",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "ListBags",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U64"
                                    ],
                                    "value": "pallet_bags_list:list:Bag",
                                    "keys_id": 11,
                                    "value_id": 396
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A bag stored in storage.",
                                "",
                                " Stores a `Bag` struct, which stores head and tail pointers to itself."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0b00",
                            "name": "rebag",
                            "docs": [
                                "See [`Pallet::rebag`]."
                            ],
                            "args": [
                                {
                                    "name": "dislocated",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0b01",
                            "name": "put_in_front_of",
                            "docs": [
                                "See [`Pallet::put_in_front_of`]."
                            ],
                            "args": [
                                {
                                    "name": "lighter",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0b02",
                            "name": "put_in_front_of_other",
                            "docs": [
                                "See [`Pallet::put_in_front_of_other`]."
                            ],
                            "args": [
                                {
                                    "name": "heavier",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "lighter",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 100
                    },
                    "events": [
                        {
                            "lookup": "0b00",
                            "name": "Rebagged",
                            "docs": [
                                "Moved an account from one bag to another."
                            ],
                            "args": [
                                "AccountId",
                                "U64",
                                "U64"
                            ],
                            "args_name": [
                                "who",
                                "from",
                                "to"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Score",
                                "Score"
                            ]
                        },
                        {
                            "lookup": "0b01",
                            "name": "ScoreUpdated",
                            "docs": [
                                "Updated the score of some account to the given amount."
                            ],
                            "args": [
                                "AccountId",
                                "U64"
                            ],
                            "args_name": [
                                "who",
                                "new_score"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Score"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 39
                    },
                    "constants": [
                        {
                            "name": "BagThresholds",
                            "type": "Vec<U64>",
                            "type_value": 397,
                            "constants_value": "210300a0724e1809000007a1dc61c70900007005739f830a00000df0a0044e0b00008cc4dfa1270c0000d3f8259c110d0000877b712e0d0e0000b6c26fab1b0f00007fbd457f3e100000940e7a317711000083230467c712000067ee82e430140000ef3c9e90b51500000fe1957657170000601d02c9181900008109c9e4fb1a000017ea4c54031d0000c7c4d7d2311f0000daca48508a210000f98d08f50f240000ab514926c6260000b332998ab0290000ae4bcc0ed32c0000a87445eb31300000d4baa4a9d13300007736e32ab73700005578e4ade73b00003e6686d668400000940839b540450000988128cf754a0000232c04270f500000f7b26e461456000053d523488d5c0000fb81e1e282630000fff82275fe6a000025bfbd110a730000f65d718db07b000044327c8dfd84000070ea4897fd8e000099cf4921be990000258b18a54da50000eecef2b2bbb100000a1cae0619bf000028dd3e9e77cd00007628f1d1eadc0000cdc4736e87ed0000a481d8d063ff00001b94af04981201002d8166e43d2701004729163c713d010060d0eeee4f550100ad83741ffa6e0100d907c25a928a0100598d0cc73da801008fc9a65524c80100edc8c6f870ea010041de56dd510f0200f1841fa9f836020024e69dbd9a610200e2fbe07f718f02004111cea5bac0020019a53489b8f5020015872181b22e0300f06fe941f56b030088606c44d3ad030055cc1c35a5f40300e507606bca4004004cb1e869a992040013deb768b0ea040087d87ee955490500922e295719af0500bad965b1831c0600366e1645289206007b9c9c72a510070035fc1083a5980700a62a828ddf2a0800d3db706d18c80800dcb2d4cb2371090072a90e3ce5260a006aa2486e51ea0a00bc9bde786fbc0b00faf78c3a5a9e0c00e7af40d741910d007d178a516d960e00736ed9423caf0f0026e7d5b428dd10008d5f4c1ec921120074f26286d27e1300360cf2d01af61400ec121b379b891600074170ef723b1800d55a4109ea0d1a00b8c1e57e74031c005f6f2683b51e1e0010fc390e8362200002681aafe9d12200f06358a630702500ecc4f24fde402800682f23e2bc472b0056658387df882e00ce9c69dba7083200567ddecfcbcb3500f88b1d055cd73900f2a8299bca303e00c89aa386f2dd42003c57c1721fe54700f8b8023b164d4d0038980c081e1d5300a8e0ee1b0a5d5900b866065b441560007c28a99fd84e6700d4a7dce780136f00b0947b6db26d7700a0996bbaab6880000074d7cb83108a00c05bce583a729400b8093252c99b9f00207582b3379cab0040e2dbbdad83b800987763b88a63c60088d46a537c4ed500c8d5c6cd9758e50010c933fe7497f600b0f82c654b220901801f5a6e11121d01a0ada60b9e81320120c240d7cc8d490140a424eda4556201f0e681b082fa7c01902d36b544a09901f006d4097c6db80140393823a08bd901904393af4627fd01605c0e9c5f70230220e5d99d759a4c02a0c38695f3dc78022080142a6f73a80200392400f99ddb02e0e44df972a11203e024b4efecc74d03e002ae6a08618d03e022c1d263c2d10340cd3eb50d481b044063b0b200556a0480e0eabea853bf0440b82c6672b61a05409026d864f87c05c02b5088c79de605c0e58242d4345806404b97a37656d2060059caf719a7550700de109486d7e207009656d4cfa57a0800d30eff53de1d0900249466cf5ccd0980c0bb3a840d8a0a8087db9878ee540b807c7386cc102f0c8046dea2299a190d809e0a7f4ec6150e805878afb7e8240f000db9d4686e48100013bc01d8df8111007a7115fee2d21200630ecf8e3d3d14002cb9995bd7c21500c6e545e4bc651700367f24192228190051763a52650c1b007fc88a7f12151d00f6ebc196e6441f001631e042d39e21004681d9da02262400d66a80a4dcdd26005c1f796909ca29002a795f6478ee2c007ed9c18c644f30008a5b12495af13300f01c398e3dd9370094f20575500c3c006c905e4e3a90400044c9b03f0f6b4500e0fde77158a34a001011eadd1c4050000c4974c2ea485600b48b14d0e1c55c00b48df018bebf6300c42614d3e33f6b0034691bfd6b5073004cd73df631fc7b00d8b6071ce24e8500d0cc6e8109558f00a8916ad4261c9a00e830cf88bcb2a500b888e0606428b200582ce96de48dbf0030a31ba545f5cd0068632427ec71dd00883b1c5bb118eeffffffffffffffff",
                            "docs": [
                                " The list of thresholds separating the various bags.",
                                "",
                                " Ids are separated into unsorted bags according to their score. This specifies the",
                                " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
                                " is less than or equal to its upper threshold.",
                                "",
                                " When ids are iterated, higher bags are iterated completely before lower bags. This means",
                                " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
                                " score, but peer ids within a particular bag are sorted in insertion order.",
                                "",
                                " # Expressing the constant",
                                "",
                                " This constant must be sorted in strictly increasing order. Duplicate items are not",
                                " permitted.",
                                "",
                                " There is an implied upper limit of `Score::MAX`; that value does not need to be",
                                " specified within the bag. For any two threshold lists, if one ends with",
                                " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
                                " lists will behave identically.",
                                "",
                                " # Calculation",
                                "",
                                " It is recommended to generate the set of thresholds in a geometric series, such that",
                                " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
                                " constant_ratio).max(threshold[k] + 1)` for all `k`.",
                                "",
                                " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
                                "",
                                " # Examples",
                                "",
                                " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
                                "   iteration is strictly in insertion order.",
                                " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
                                "   the procedure given above, then the constant ratio is equal to 2.",
                                " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
                                "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
                                " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
                                "   into bag 0, an id with score 2 will fall into bag 1, etc.",
                                "",
                                " # Migration",
                                "",
                                " In the event that this list ever changes, a copy of the old bags list must be retained.",
                                " With that `List::migrate` can be called, which will perform the appropriate migration."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "List",
                            "doc": [
                                "A error in the list interface implementation."
                            ],
                            "fields": [
                                {
                                    "type": "pallet_bags_list:list:ListError",
                                    "type_name": "ListError",
                                    "doc": null
                                }
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 398
                    },
                    "index": 11
                },
                {
                    "name": "ImOnline",
                    "prefix": "ImOnline",
                    "storage": [
                        {
                            "name": "HeartbeatAfter",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The block number after which it's ok to send heartbeats in the current",
                                " session.",
                                "",
                                " At the beginning of each session we set this to a value that should fall",
                                " roughly in the middle of the session duration. The idea is to first wait for",
                                " the validators to produce a block in the current session, so that the",
                                " heartbeat later on will not be necessary.",
                                "",
                                " This value will only be used as a fallback if we fail to get a proper session",
                                " progress estimate from `NextSessionRotation`, as those estimates should be",
                                " more accurate then the value we calculate for `HeartbeatAfter`."
                            ]
                        },
                        {
                            "name": "Keys",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<[U8; 32]>",
                                "PlainTypeValue": 400
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The current set of keys that may issue a heartbeat."
                            ]
                        },
                        {
                            "name": "ReceivedHeartbeats",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "U32"
                                    ],
                                    "value": "Bool",
                                    "keys_id": 136,
                                    "value_id": 54
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex`."
                            ]
                        },
                        {
                            "name": "AuthoredBlocks",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "U32",
                                    "keys_id": 402,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                                " number of blocks authored by the given authority."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0c00",
                            "name": "heartbeat",
                            "docs": [
                                "See [`Pallet::heartbeat`]."
                            ],
                            "args": [
                                {
                                    "name": "heartbeat",
                                    "type": "pallet_im_online:Heartbeat",
                                    "type_name": "Heartbeat<BlockNumberFor>"
                                },
                                {
                                    "name": "signature",
                                    "type": "[U8; 64]",
                                    "type_name": "<AuthorityId as RuntimeAppPublic>::Signature"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 101
                    },
                    "events": [
                        {
                            "lookup": "0c00",
                            "name": "HeartbeatReceived",
                            "docs": [
                                "A new heartbeat was received from `AuthorityId`."
                            ],
                            "args": [
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "authority_id"
                            ],
                            "args_type_name": [
                                "AuthorityId"
                            ]
                        },
                        {
                            "lookup": "0c01",
                            "name": "AllGood",
                            "docs": [
                                "At the end of the session, no offence was committed."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0c02",
                            "name": "SomeOffline",
                            "docs": [
                                "At the end of the session, at least one validator was found to be offline."
                            ],
                            "args": [
                                "Vec<Tuple:AccountIdpallet_staking:Exposure>"
                            ],
                            "args_name": [
                                "offline"
                            ],
                            "args_type_name": [
                                "Vec<IdentificationTuple>"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 40
                    },
                    "constants": [
                        {
                            "name": "UnsignedPriority",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "ffffffffffffffff",
                            "docs": [
                                " A configuration for base priority of unsigned transactions.",
                                "",
                                " This is exposed so that it can be tuned for particular runtime, when",
                                " multiple pallets send unsigned transactions."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InvalidKey",
                            "doc": [
                                "Non existent public key."
                            ]
                        },
                        {
                            "name": "DuplicatedHeartbeat",
                            "doc": [
                                "Duplicated heartbeat."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 403
                    },
                    "index": 12
                },
                {
                    "name": "Staking",
                    "prefix": "Staking",
                    "storage": [
                        {
                            "name": "ValidatorCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The ideal number of active validators."
                            ]
                        },
                        {
                            "name": "MinimumValidatorCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Minimum number of staking participants before emergency conditions are imposed."
                            ]
                        },
                        {
                            "name": "Invulnerables",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<AccountId>",
                                "PlainTypeValue": 97
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                                " easy to initialize and the performance hit is minimal (we expect no more than four",
                                " invulnerables) and restricted to testnets."
                            ]
                        },
                        {
                            "name": "Bonded",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "AccountId",
                                    "keys_id": 0,
                                    "value_id": 0
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Map from all locked \"stash\" accounts to the controller account.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                            ]
                        },
                        {
                            "name": "MinNominatorBond",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The minimum active bond to become and maintain the role of a nominator."
                            ]
                        },
                        {
                            "name": "MinValidatorBond",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The minimum active bond to become and maintain the role of a validator."
                            ]
                        },
                        {
                            "name": "MinimumActiveStake",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The minimum active nominator stake of the last successful election."
                            ]
                        },
                        {
                            "name": "MinCommission",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 51
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The minimum amount of commission that validators can set.",
                                "",
                                " If set to `0`, no limit exists."
                            ]
                        },
                        {
                            "name": "Ledger",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:StakingLedger",
                                    "keys_id": 0,
                                    "value_id": 404
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                            ]
                        },
                        {
                            "name": "Payee",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:RewardDestination",
                                    "keys_id": 0,
                                    "value_id": 50
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Where the reward payment should be made. Keyed by stash.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                            ]
                        },
                        {
                            "name": "Validators",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:ValidatorPrefs",
                                    "keys_id": 0,
                                    "value_id": 52
                                }
                            },
                            "fallback": "0x0000",
                            "docs": [
                                " The map from (wannabe) validator stash key to the preferences of that validator.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                            ]
                        },
                        {
                            "name": "CounterForValidators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "MaxValidatorsCount",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The maximum validator count before we stop allowing new validators to join.",
                                "",
                                " When this value is not set, no limits are enforced."
                            ]
                        },
                        {
                            "name": "Nominators",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:Nominations",
                                    "keys_id": 0,
                                    "value_id": 409
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The map from nominator stash key to their nomination preferences, namely the validators that",
                                " they wish to support.",
                                "",
                                " Note that the keys of this storage map might become non-decodable in case the",
                                " account's [`NominationsQuota::MaxNominations`] configuration is decreased.",
                                " In this rare case, these nominators",
                                " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                                " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                                " nominators will effectively not-exist, until they re-submit their preferences such that it",
                                " is within the bounds of the newly set `Config::MaxNominations`.",
                                "",
                                " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                                " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                                " number of keys that exist.",
                                "",
                                " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                                " [`Call::chill_other`] dispatchable by anyone.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                            ]
                        },
                        {
                            "name": "CounterForNominators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "MaxNominatorsCount",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The maximum nominator count before we stop allowing new validators to join.",
                                "",
                                " When this value is not set, no limits are enforced."
                            ]
                        },
                        {
                            "name": "CurrentEra",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The current era index.",
                                "",
                                " This is the latest planned era, depending on how the Session pallet queues the validator",
                                " set, it might be active or not."
                            ]
                        },
                        {
                            "name": "ActiveEra",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_staking:ActiveEraInfo",
                                "PlainTypeValue": 411
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The active era information, it holds index and start.",
                                "",
                                " The active era is the era being currently rewarded. Validator set of this era must be",
                                " equal to [`SessionInterface::validators`]."
                            ]
                        },
                        {
                            "name": "ErasStartSessionIndex",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U32",
                                    "keys_id": 4,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                                "",
                                " Note: This tracks the starting session (i.e. session index when era start being active)",
                                " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                            ]
                        },
                        {
                            "name": "ErasStakers",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:Exposure",
                                    "keys_id": 402,
                                    "value_id": 45
                                }
                            },
                            "fallback": "0x000000",
                            "docs": [
                                " Exposure of validator at era.",
                                "",
                                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                                "",
                                " Is it removed after `HISTORY_DEPTH` eras.",
                                " If stakers hasn't been set or has been removed then empty exposure is returned."
                            ]
                        },
                        {
                            "name": "ErasStakersClipped",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:Exposure",
                                    "keys_id": 402,
                                    "value_id": 45
                                }
                            },
                            "fallback": "0x000000",
                            "docs": [
                                " Clipped Exposure of validator at era.",
                                "",
                                " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                                " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                                " (Note: the field `total` and `own` of the exposure remains unchanged).",
                                " This is used to limit the i/o cost for the nominator payout.",
                                "",
                                " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                                "",
                                " Is it removed after `HISTORY_DEPTH` eras.",
                                " If stakers hasn't been set or has been removed then empty exposure is returned."
                            ]
                        },
                        {
                            "name": "ErasValidatorPrefs",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:ValidatorPrefs",
                                    "keys_id": 402,
                                    "value_id": 52
                                }
                            },
                            "fallback": "0x0000",
                            "docs": [
                                " Similar to `ErasStakers`, this holds the preferences of validators.",
                                "",
                                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                                "",
                                " Is it removed after `HISTORY_DEPTH` eras."
                            ]
                        },
                        {
                            "name": "ErasValidatorReward",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U128",
                                    "keys_id": 4,
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                                "",
                                " Eras that haven't finished yet or has been removed doesn't have reward."
                            ]
                        },
                        {
                            "name": "ErasRewardPoints",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_staking:EraRewardPoints",
                                    "keys_id": 4,
                                    "value_id": 412
                                }
                            },
                            "fallback": "0x0000000000",
                            "docs": [
                                " Rewards for the last `HISTORY_DEPTH` eras.",
                                " If reward hasn't been set or has been removed then 0 reward is returned."
                            ]
                        },
                        {
                            "name": "ErasTotalStake",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U128",
                                    "keys_id": 4,
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The total amount staked for the last `HISTORY_DEPTH` eras.",
                                " If total hasn't been set or has been removed then 0 stake is returned."
                            ]
                        },
                        {
                            "name": "ForceEra",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_staking:Forcing",
                                "PlainTypeValue": 55
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Mode of era forcing."
                            ]
                        },
                        {
                            "name": "SlashRewardFraction",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 51
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The percentage of the slash that is distributed to reporters.",
                                "",
                                " The rest of the slashed value is handled by the `Slash`."
                            ]
                        },
                        {
                            "name": "CanceledSlashPayout",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The amount of currency given to reporters of a slash event which was",
                                " canceled by extraordinary circumstances (e.g. governance)."
                            ]
                        },
                        {
                            "name": "UnappliedSlashes",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<pallet_staking:UnappliedSlash>",
                                    "keys_id": 4,
                                    "value_id": 416
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " All unapplied slashes that are queued for later."
                            ]
                        },
                        {
                            "name": "BondedEras",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:U32U32>",
                                "PlainTypeValue": 337
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A mapping from still-bonded eras to the first session index of that era.",
                                "",
                                " Must contains information for eras for the range:",
                                " `[active_era - bounding_duration; active_era]`"
                            ]
                        },
                        {
                            "name": "ValidatorSlashInEra",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "Tuple:U32U128",
                                    "keys_id": 402,
                                    "value_id": 418
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " All slashing events on validators, mapped by era to the highest slash proportion",
                                " and slash value of the era."
                            ]
                        },
                        {
                            "name": "NominatorSlashInEra",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "U128",
                                    "keys_id": 402,
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " All slashing events on nominators, mapped by era to the highest slash value of the era."
                            ]
                        },
                        {
                            "name": "SlashingSpans",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_staking:slashing:SlashingSpans",
                                    "keys_id": 0,
                                    "value_id": 419
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Slashing spans for stash accounts."
                            ]
                        },
                        {
                            "name": "SpanSlash",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "U32"
                                    ],
                                    "value": "pallet_staking:slashing:SpanRecord",
                                    "keys_id": 415,
                                    "value_id": 420
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " Records information about the maximum slash of a stash within a slashing span,",
                                " as well as how much reward has been paid out."
                            ]
                        },
                        {
                            "name": "CurrentPlannedSession",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The last planned session scheduled by the session pallet.",
                                "",
                                " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                            ]
                        },
                        {
                            "name": "OffendingValidators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:U32Bool>",
                                "PlainTypeValue": 421
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Indices of validators that have offended in the active era and whether they are currently",
                                " disabled.",
                                "",
                                " This value should be a superset of disabled validators since not all offences lead to the",
                                " validator being disabled (if there was no slash). This is needed to track the percentage of",
                                " validators that have offended in the current era, ensuring a new era is forced if",
                                " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                                " whether a given validator has previously offended using binary search. It gets cleared when",
                                " the era ends."
                            ]
                        },
                        {
                            "name": "ChillThreshold",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U8",
                                "PlainTypeValue": 107
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The threshold for when users can start calling `chill_other` for other validators /",
                                " nominators. The threshold is compared to the actual number of validators / nominators",
                                " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0d00",
                            "name": "bond",
                            "docs": [
                                "See [`Pallet::bond`]."
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "payee",
                                    "type": "pallet_staking:RewardDestination",
                                    "type_name": "RewardDestination<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d01",
                            "name": "bond_extra",
                            "docs": [
                                "See [`Pallet::bond_extra`]."
                            ],
                            "args": [
                                {
                                    "name": "max_additional",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0d02",
                            "name": "unbond",
                            "docs": [
                                "See [`Pallet::unbond`]."
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0d03",
                            "name": "withdraw_unbonded",
                            "docs": [
                                "See [`Pallet::withdraw_unbonded`]."
                            ],
                            "args": [
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d04",
                            "name": "validate",
                            "docs": [
                                "See [`Pallet::validate`]."
                            ],
                            "args": [
                                {
                                    "name": "prefs",
                                    "type": "pallet_staking:ValidatorPrefs",
                                    "type_name": "ValidatorPrefs"
                                }
                            ]
                        },
                        {
                            "lookup": "0d05",
                            "name": "nominate",
                            "docs": [
                                "See [`Pallet::nominate`]."
                            ],
                            "args": [
                                {
                                    "name": "targets",
                                    "type": "Vec<sp_runtime:multiaddress:MultiAddress>",
                                    "type_name": "Vec<AccountIdLookupOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d06",
                            "name": "chill",
                            "docs": [
                                "See [`Pallet::chill`]."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d07",
                            "name": "set_payee",
                            "docs": [
                                "See [`Pallet::set_payee`]."
                            ],
                            "args": [
                                {
                                    "name": "payee",
                                    "type": "pallet_staking:RewardDestination",
                                    "type_name": "RewardDestination<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d08",
                            "name": "set_controller",
                            "docs": [
                                "See [`Pallet::set_controller`]."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d09",
                            "name": "set_validator_count",
                            "docs": [
                                "See [`Pallet::set_validator_count`]."
                            ],
                            "args": [
                                {
                                    "name": "new",
                                    "type": "compact<U32>",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d0a",
                            "name": "increase_validator_count",
                            "docs": [
                                "See [`Pallet::increase_validator_count`]."
                            ],
                            "args": [
                                {
                                    "name": "additional",
                                    "type": "compact<U32>",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d0b",
                            "name": "scale_validator_count",
                            "docs": [
                                "See [`Pallet::scale_validator_count`]."
                            ],
                            "args": [
                                {
                                    "name": "factor",
                                    "type": "U8",
                                    "type_name": "Percent"
                                }
                            ]
                        },
                        {
                            "lookup": "0d0c",
                            "name": "force_no_eras",
                            "docs": [
                                "See [`Pallet::force_no_eras`]."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d0d",
                            "name": "force_new_era",
                            "docs": [
                                "See [`Pallet::force_new_era`]."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d0e",
                            "name": "set_invulnerables",
                            "docs": [
                                "See [`Pallet::set_invulnerables`]."
                            ],
                            "args": [
                                {
                                    "name": "invulnerables",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d0f",
                            "name": "force_unstake",
                            "docs": [
                                "See [`Pallet::force_unstake`]."
                            ],
                            "args": [
                                {
                                    "name": "stash",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d10",
                            "name": "force_new_era_always",
                            "docs": [
                                "See [`Pallet::force_new_era_always`]."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d11",
                            "name": "cancel_deferred_slash",
                            "docs": [
                                "See [`Pallet::cancel_deferred_slash`]."
                            ],
                            "args": [
                                {
                                    "name": "era",
                                    "type": "U32",
                                    "type_name": "EraIndex"
                                },
                                {
                                    "name": "slash_indices",
                                    "type": "Vec<U32>",
                                    "type_name": "Vec<u32>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d12",
                            "name": "payout_stakers",
                            "docs": [
                                "See [`Pallet::payout_stakers`]."
                            ],
                            "args": [
                                {
                                    "name": "validator_stash",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "era",
                                    "type": "U32",
                                    "type_name": "EraIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "0d13",
                            "name": "rebond",
                            "docs": [
                                "See [`Pallet::rebond`]."
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0d14",
                            "name": "reap_stash",
                            "docs": [
                                "See [`Pallet::reap_stash`]."
                            ],
                            "args": [
                                {
                                    "name": "stash",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "0d15",
                            "name": "kick",
                            "docs": [
                                "See [`Pallet::kick`]."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "Vec<sp_runtime:multiaddress:MultiAddress>",
                                    "type_name": "Vec<AccountIdLookupOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d16",
                            "name": "set_staking_configs",
                            "docs": [
                                "See [`Pallet::set_staking_configs`]."
                            ],
                            "args": [
                                {
                                    "name": "min_nominator_bond",
                                    "type": "pallet_staking:pallet:pallet:ConfigOp@109",
                                    "type_name": "ConfigOp<BalanceOf>"
                                },
                                {
                                    "name": "min_validator_bond",
                                    "type": "pallet_staking:pallet:pallet:ConfigOp@109",
                                    "type_name": "ConfigOp<BalanceOf>"
                                },
                                {
                                    "name": "max_nominator_count",
                                    "type": "pallet_staking:pallet:pallet:ConfigOp@110",
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "max_validator_count",
                                    "type": "pallet_staking:pallet:pallet:ConfigOp@110",
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "chill_threshold",
                                    "type": "pallet_staking:pallet:pallet:ConfigOp@111",
                                    "type_name": "ConfigOp<Percent>"
                                },
                                {
                                    "name": "min_commission",
                                    "type": "pallet_staking:pallet:pallet:ConfigOp@112",
                                    "type_name": "ConfigOp<Perbill>"
                                }
                            ]
                        },
                        {
                            "lookup": "0d17",
                            "name": "chill_other",
                            "docs": [
                                "See [`Pallet::chill_other`]."
                            ],
                            "args": [
                                {
                                    "name": "controller",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                }
                            ]
                        },
                        {
                            "lookup": "0d18",
                            "name": "force_apply_min_commission",
                            "docs": [
                                "See [`Pallet::force_apply_min_commission`]."
                            ],
                            "args": [
                                {
                                    "name": "validator_stash",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                }
                            ]
                        },
                        {
                            "lookup": "0d19",
                            "name": "set_min_commission",
                            "docs": [
                                "See [`Pallet::set_min_commission`]."
                            ],
                            "args": [
                                {
                                    "name": "new",
                                    "type": "U32",
                                    "type_name": "Perbill"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 105
                    },
                    "events": [
                        {
                            "lookup": "0d00",
                            "name": "EraPaid",
                            "docs": [
                                "The era payout has been set; the first balance is the validator-payout; the second is",
                                "the remainder from the maximum amount of reward."
                            ],
                            "args": [
                                "U32",
                                "U128",
                                "U128"
                            ],
                            "args_name": [
                                "era_index",
                                "validator_payout",
                                "remainder"
                            ],
                            "args_type_name": [
                                "EraIndex",
                                "BalanceOf",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d01",
                            "name": "Rewarded",
                            "docs": [
                                "The nominator has been rewarded by this amount to this destination."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_staking:RewardDestination",
                                "U128"
                            ],
                            "args_name": [
                                "stash",
                                "dest",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "RewardDestination<AccountId>",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d02",
                            "name": "Slashed",
                            "docs": [
                                "A staker (validator or nominator) has been slashed by the given amount."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "staker",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d03",
                            "name": "SlashReported",
                            "docs": [
                                "A slash for the given validator, for the given percentage of their stake, at the given",
                                "era as been reported."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "validator",
                                "fraction",
                                "slash_era"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Perbill",
                                "EraIndex"
                            ]
                        },
                        {
                            "lookup": "0d04",
                            "name": "OldSlashingReportDiscarded",
                            "docs": [
                                "An old slashing report from a prior era was discarded because it could",
                                "not be processed."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "session_index"
                            ],
                            "args_type_name": [
                                "SessionIndex"
                            ]
                        },
                        {
                            "lookup": "0d05",
                            "name": "StakersElected",
                            "docs": [
                                "A new set of stakers was elected."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d06",
                            "name": "Bonded",
                            "docs": [
                                "An account has bonded this amount. \\[stash, amount\\]",
                                "",
                                "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                                "it will not be emitted for staking rewards when they are added to stake."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "stash",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d07",
                            "name": "Unbonded",
                            "docs": [
                                "An account has unbonded this amount."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "stash",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d08",
                            "name": "Withdrawn",
                            "docs": [
                                "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                                "from the unlocking queue."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "stash",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0d09",
                            "name": "Kicked",
                            "docs": [
                                "A nominator has been kicked from a validator."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId"
                            ],
                            "args_name": [
                                "nominator",
                                "stash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0d0a",
                            "name": "StakingElectionFailed",
                            "docs": [
                                "The election failed. No new era is planned."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0d0b",
                            "name": "Chilled",
                            "docs": [
                                "An account has stopped participating as either a validator or nominator."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "stash"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0d0c",
                            "name": "PayoutStarted",
                            "docs": [
                                "The stakers' rewards are getting paid."
                            ],
                            "args": [
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "era_index",
                                "validator_stash"
                            ],
                            "args_type_name": [
                                "EraIndex",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0d0d",
                            "name": "ValidatorPrefsSet",
                            "docs": [
                                "A validator has set their preferences."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_staking:ValidatorPrefs"
                            ],
                            "args_name": [
                                "stash",
                                "prefs"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "ValidatorPrefs"
                            ]
                        },
                        {
                            "lookup": "0d0e",
                            "name": "SnapshotVotersSizeExceeded",
                            "docs": [
                                "Voters size limit reached."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "size"
                            ],
                            "args_type_name": [
                                "u32"
                            ]
                        },
                        {
                            "lookup": "0d0f",
                            "name": "SnapshotTargetsSizeExceeded",
                            "docs": [
                                "Targets size limit reached."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "size"
                            ],
                            "args_type_name": [
                                "u32"
                            ]
                        },
                        {
                            "lookup": "0d10",
                            "name": "ForceEra",
                            "docs": [
                                "A new force era mode was set."
                            ],
                            "args": [
                                "pallet_staking:Forcing"
                            ],
                            "args_name": [
                                "mode"
                            ],
                            "args_type_name": [
                                "Forcing"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 49
                    },
                    "constants": [
                        {
                            "name": "HistoryDepth",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "54000000",
                            "docs": [
                                " Number of eras to keep in history.",
                                "",
                                " Following information is kept for eras in `[current_era -",
                                " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
                                " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
                                " `ErasTotalStake`, `ErasStartSessionIndex`,",
                                " `StakingLedger.claimed_rewards`.",
                                "",
                                " Must be more than the number of eras delayed by session.",
                                " I.e. active era must always be in history. I.e. `active_era >",
                                " current_era - history_depth` must be guaranteed.",
                                "",
                                " If migrating an existing pallet from storage value to config value,",
                                " this should be set to same value or greater as in storage.",
                                "",
                                " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
                                " item `StakingLedger.claimed_rewards`. Setting this value lower than",
                                " the existing value can lead to inconsistencies in the",
                                " `StakingLedger` and will need to be handled properly in a migration.",
                                " The test `reducing_history_depth_abrupt` shows this effect."
                            ]
                        },
                        {
                            "name": "SessionsPerEra",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "06000000",
                            "docs": [
                                " Number of sessions per era."
                            ]
                        },
                        {
                            "name": "BondingDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "0e000000",
                            "docs": [
                                " Number of eras that staked funds must remain bonded for."
                            ]
                        },
                        {
                            "name": "SlashDeferDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "0d000000",
                            "docs": [
                                " Number of eras that slashes are deferred by, after computation.",
                                "",
                                " This should be less than the bonding duration. Set to 0 if slashes",
                                " should be applied immediately, without opportunity for intervention."
                            ]
                        },
                        {
                            "name": "MaxNominatorRewardedPerValidator",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00010000",
                            "docs": [
                                " The maximum number of nominators rewarded for each validator.",
                                "",
                                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                                " claim their reward. This used to limit the i/o cost for the nominator payout."
                            ]
                        },
                        {
                            "name": "MaxUnlockingChunks",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "20000000",
                            "docs": [
                                " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
                                " have. Effectively determines how many unique eras a staker may be",
                                " unbonding in.",
                                "",
                                " Note: `MaxUnlockingChunks` is used as the upper bound for the",
                                " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
                                " lower than the existing value can lead to inconsistencies in the",
                                " `StakingLedger` and will need to be handled properly in a runtime",
                                " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
                                " this effect."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotController",
                            "doc": [
                                "Not a controller account."
                            ]
                        },
                        {
                            "name": "NotStash",
                            "doc": [
                                "Not a stash account."
                            ]
                        },
                        {
                            "name": "AlreadyBonded",
                            "doc": [
                                "Stash is already bonded."
                            ]
                        },
                        {
                            "name": "AlreadyPaired",
                            "doc": [
                                "Controller is already paired."
                            ]
                        },
                        {
                            "name": "EmptyTargets",
                            "doc": [
                                "Targets cannot be empty."
                            ]
                        },
                        {
                            "name": "DuplicateIndex",
                            "doc": [
                                "Duplicate index."
                            ]
                        },
                        {
                            "name": "InvalidSlashIndex",
                            "doc": [
                                "Slash record index out of bounds."
                            ]
                        },
                        {
                            "name": "InsufficientBond",
                            "doc": [
                                "Cannot have a validator or nominator role, with value less than the minimum defined by",
                                "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                                "intention, `chill` first to remove one's role as validator/nominator."
                            ]
                        },
                        {
                            "name": "NoMoreChunks",
                            "doc": [
                                "Can not schedule more unlock chunks."
                            ]
                        },
                        {
                            "name": "NoUnlockChunk",
                            "doc": [
                                "Can not rebond without unlocking chunks."
                            ]
                        },
                        {
                            "name": "FundedTarget",
                            "doc": [
                                "Attempting to target a stash that still has funds."
                            ]
                        },
                        {
                            "name": "InvalidEraToReward",
                            "doc": [
                                "Invalid era to reward."
                            ]
                        },
                        {
                            "name": "InvalidNumberOfNominations",
                            "doc": [
                                "Invalid number of nominations."
                            ]
                        },
                        {
                            "name": "NotSortedAndUnique",
                            "doc": [
                                "Items are not sorted and unique."
                            ]
                        },
                        {
                            "name": "AlreadyClaimed",
                            "doc": [
                                "Rewards for this era have already been claimed for this validator."
                            ]
                        },
                        {
                            "name": "IncorrectHistoryDepth",
                            "doc": [
                                "Incorrect previous history depth input provided."
                            ]
                        },
                        {
                            "name": "IncorrectSlashingSpans",
                            "doc": [
                                "Incorrect number of slashing spans provided."
                            ]
                        },
                        {
                            "name": "BadState",
                            "doc": [
                                "Internal state has become somehow corrupted and the operation cannot continue."
                            ]
                        },
                        {
                            "name": "TooManyTargets",
                            "doc": [
                                "Too many nomination targets supplied."
                            ]
                        },
                        {
                            "name": "BadTarget",
                            "doc": [
                                "A nomination target was supplied that was blocked or otherwise not a validator."
                            ]
                        },
                        {
                            "name": "CannotChillOther",
                            "doc": [
                                "The user has enough bond and thus cannot be chilled forcefully by an external person."
                            ]
                        },
                        {
                            "name": "TooManyNominators",
                            "doc": [
                                "There are too many nominators in the system. Governance needs to adjust the staking",
                                "settings to keep things safe for the runtime."
                            ]
                        },
                        {
                            "name": "TooManyValidators",
                            "doc": [
                                "There are too many validator candidates in the system. Governance needs to adjust the",
                                "staking settings to keep things safe for the runtime."
                            ]
                        },
                        {
                            "name": "CommissionTooLow",
                            "doc": [
                                "Commission is too low. Must be at least `MinCommission`."
                            ]
                        },
                        {
                            "name": "BoundNotMet",
                            "doc": [
                                "Some bound is not met."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 423
                    },
                    "index": 13
                },
                {
                    "name": "Session",
                    "prefix": "Session",
                    "storage": [
                        {
                            "name": "Validators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<AccountId>",
                                "PlainTypeValue": 97
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The current set of validators."
                            ]
                        },
                        {
                            "name": "CurrentIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Current index of the session."
                            ]
                        },
                        {
                            "name": "QueuedChanged",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": 54
                            },
                            "fallback": "0x00",
                            "docs": [
                                " True if the underlying economic identities or weighting behind the validators",
                                " has changed in the queued validator set."
                            ]
                        },
                        {
                            "name": "QueuedKeys",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:AccountIdvara_runtime:SessionKeys>",
                                "PlainTypeValue": 424
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The queued keys for the next session. When the next session begins, these keys",
                                " will be used to determine the validator's session keys."
                            ]
                        },
                        {
                            "name": "DisabledValidators",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<U32>",
                                "PlainTypeValue": 108
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Indices of disabled validators.",
                                "",
                                " The vec is always kept sorted so that we can find whether a given validator is",
                                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                                " a new set of identities."
                            ]
                        },
                        {
                            "name": "NextKeys",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "vara_runtime:SessionKeys",
                                    "keys_id": 0,
                                    "value_id": 114
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The next session keys for a validator."
                            ]
                        },
                        {
                            "name": "KeyOwner",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "[U8; 4]",
                                        "Vec<U8>"
                                    ],
                                    "value": "AccountId",
                                    "keys_id": 426,
                                    "value_id": 0
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0700",
                            "name": "set_keys",
                            "docs": [
                                "See [`Pallet::set_keys`]."
                            ],
                            "args": [
                                {
                                    "name": "keys",
                                    "type": "vara_runtime:SessionKeys",
                                    "type_name": "Keys"
                                },
                                {
                                    "name": "proof",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "0701",
                            "name": "purge_keys",
                            "docs": [
                                "See [`Pallet::purge_keys`]."
                            ],
                            "args": null
                        }
                    ],
                    "calls_value": {
                        "type": 113
                    },
                    "events": [
                        {
                            "lookup": "0700",
                            "name": "NewSession",
                            "docs": [
                                "New session has happened. Note that the argument is the session index, not the",
                                "block number as the type might suggest."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "session_index"
                            ],
                            "args_type_name": [
                                "SessionIndex"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 56
                    },
                    "errors": [
                        {
                            "name": "InvalidProof",
                            "doc": [
                                "Invalid ownership proof."
                            ]
                        },
                        {
                            "name": "NoAssociatedValidatorId",
                            "doc": [
                                "No associated validator ID for account."
                            ]
                        },
                        {
                            "name": "DuplicatedKey",
                            "doc": [
                                "Registered duplicate key."
                            ]
                        },
                        {
                            "name": "NoKeys",
                            "doc": [
                                "No keys are associated with this account."
                            ]
                        },
                        {
                            "name": "NoAccount",
                            "doc": [
                                "Key setting account is not live, so it's impossible to associate keys."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 428
                    },
                    "index": 7
                },
                {
                    "name": "Treasury",
                    "prefix": "Treasury",
                    "storage": [
                        {
                            "name": "ProposalCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Number of proposals that have been made."
                            ]
                        },
                        {
                            "name": "Proposals",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_treasury:Proposal",
                                    "keys_id": 4,
                                    "value_id": 429
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Proposals that have been made."
                            ]
                        },
                        {
                            "name": "Deactivated",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The amount which has been reported as inactive to Currency."
                            ]
                        },
                        {
                            "name": "Approvals",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<U32>",
                                "PlainTypeValue": 430
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Proposal indices that have been approved but not yet awarded."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "0e00",
                            "name": "propose_spend",
                            "docs": [
                                "See [`Pallet::propose_spend`]."
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "beneficiary",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0e01",
                            "name": "reject_proposal",
                            "docs": [
                                "See [`Pallet::reject_proposal`]."
                            ],
                            "args": [
                                {
                                    "name": "proposal_id",
                                    "type": "compact<U32>",
                                    "type_name": "ProposalIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "0e02",
                            "name": "approve_proposal",
                            "docs": [
                                "See [`Pallet::approve_proposal`]."
                            ],
                            "args": [
                                {
                                    "name": "proposal_id",
                                    "type": "compact<U32>",
                                    "type_name": "ProposalIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "0e03",
                            "name": "spend",
                            "docs": [
                                "See [`Pallet::spend`]."
                            ],
                            "args": [
                                {
                                    "name": "amount",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "beneficiary",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "0e04",
                            "name": "remove_approval",
                            "docs": [
                                "See [`Pallet::remove_approval`]."
                            ],
                            "args": [
                                {
                                    "name": "proposal_id",
                                    "type": "compact<U32>",
                                    "type_name": "ProposalIndex"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 116
                    },
                    "events": [
                        {
                            "lookup": "0e00",
                            "name": "Proposed",
                            "docs": [
                                "New proposal."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "proposal_index"
                            ],
                            "args_type_name": [
                                "ProposalIndex"
                            ]
                        },
                        {
                            "lookup": "0e01",
                            "name": "Spending",
                            "docs": [
                                "We have ended a spend period and will now allocate funds."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "budget_remaining"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e02",
                            "name": "Awarded",
                            "docs": [
                                "Some funds have been allocated."
                            ],
                            "args": [
                                "U32",
                                "U128",
                                "AccountId"
                            ],
                            "args_name": [
                                "proposal_index",
                                "award",
                                "account"
                            ],
                            "args_type_name": [
                                "ProposalIndex",
                                "BalanceOf",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0e03",
                            "name": "Rejected",
                            "docs": [
                                "A proposal was rejected; funds were slashed."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "proposal_index",
                                "slashed"
                            ],
                            "args_type_name": [
                                "ProposalIndex",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e04",
                            "name": "Burnt",
                            "docs": [
                                "Some of our funds have been burnt."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "burnt_funds"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e05",
                            "name": "Rollover",
                            "docs": [
                                "Spending has finished; this is the amount that rolls over until next spend."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "rollover_balance"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e06",
                            "name": "Deposit",
                            "docs": [
                                "Some funds have been deposited."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "value"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "0e07",
                            "name": "SpendApproved",
                            "docs": [
                                "A new spend proposal has been approved."
                            ],
                            "args": [
                                "U32",
                                "U128",
                                "AccountId"
                            ],
                            "args_name": [
                                "proposal_index",
                                "amount",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "ProposalIndex",
                                "BalanceOf",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "0e08",
                            "name": "UpdatedInactive",
                            "docs": [
                                "The inactive funds of the pallet have been updated."
                            ],
                            "args": [
                                "U128",
                                "U128"
                            ],
                            "args_name": [
                                "reactivated",
                                "deactivated"
                            ],
                            "args_type_name": [
                                "BalanceOf",
                                "BalanceOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 57
                    },
                    "constants": [
                        {
                            "name": "ProposalBond",
                            "type": "U32",
                            "type_value": 431,
                            "constants_value": "50c30000",
                            "docs": [
                                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                                " An accepted proposal gets these back. A rejected proposal does not."
                            ]
                        },
                        {
                            "name": "ProposalBondMinimum",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00a0724e180900000000000000000000",
                            "docs": [
                                " Minimum amount of funds that should be placed in a deposit for making a proposal."
                            ]
                        },
                        {
                            "name": "ProposalBondMaximum",
                            "type": "option<U128>",
                            "type_value": 275,
                            "constants_value": "00",
                            "docs": [
                                " Maximum amount of funds that should be placed in a deposit for making a proposal."
                            ]
                        },
                        {
                            "name": "SpendPeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80700000",
                            "docs": [
                                " Period between successive spends."
                            ]
                        },
                        {
                            "name": "Burn",
                            "type": "U32",
                            "type_value": 431,
                            "constants_value": "00000000",
                            "docs": [
                                " Percentage of spare funds (if any) that are burnt per spend period."
                            ]
                        },
                        {
                            "name": "PalletId",
                            "type": "[U8; 8]",
                            "type_value": 432,
                            "constants_value": "70792f7472737279",
                            "docs": [
                                " The treasury's pallet id, used for deriving its sovereign account ID."
                            ]
                        },
                        {
                            "name": "MaxApprovals",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " The maximum number of approvals that can wait in the spending queue.",
                                "",
                                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InsufficientProposersBalance",
                            "doc": [
                                "Proposer's balance is too low."
                            ]
                        },
                        {
                            "name": "InvalidIndex",
                            "doc": [
                                "No proposal or bounty at that index."
                            ]
                        },
                        {
                            "name": "TooManyApprovals",
                            "doc": [
                                "Too many approvals in the queue."
                            ]
                        },
                        {
                            "name": "InsufficientPermission",
                            "doc": [
                                "The spend origin is valid but the amount it is allowed to spend is lower than the",
                                "amount to be spent."
                            ]
                        },
                        {
                            "name": "ProposalNotApproved",
                            "doc": [
                                "Proposal has not been approved."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 433
                    },
                    "index": 14
                },
                {
                    "name": "Historical",
                    "prefix": "Historical",
                    "storage": [
                        {
                            "name": "HistoricalSessions",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Tuple:H256U32",
                                    "keys_id": 4,
                                    "value_id": 434
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Mapping from historical session indices to session-data root hash and validator count."
                            ]
                        },
                        {
                            "name": "StoredRange",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Tuple:U32U32",
                                "PlainTypeValue": 136
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The range of historical sessions we store. [first, last)"
                            ]
                        }
                    ],
                    "errors": null,
                    "errors_value": null,
                    "index": 15
                },
                {
                    "name": "Utility",
                    "prefix": "",
                    "storage": null,
                    "calls": [
                        {
                            "lookup": "0800",
                            "name": "batch",
                            "docs": [
                                "See [`Pallet::batch`]."
                            ],
                            "args": [
                                {
                                    "name": "calls",
                                    "type": "Vec<Call>",
                                    "type_name": "Vec<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0801",
                            "name": "as_derivative",
                            "docs": [
                                "See [`Pallet::as_derivative`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0802",
                            "name": "batch_all",
                            "docs": [
                                "See [`Pallet::batch_all`]."
                            ],
                            "args": [
                                {
                                    "name": "calls",
                                    "type": "Vec<Call>",
                                    "type_name": "Vec<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0803",
                            "name": "dispatch_as",
                            "docs": [
                                "See [`Pallet::dispatch_as`]."
                            ],
                            "args": [
                                {
                                    "name": "as_origin",
                                    "type": "vara_runtime:OriginCaller",
                                    "type_name": "Box<PalletsOrigin>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0804",
                            "name": "force_batch",
                            "docs": [
                                "See [`Pallet::force_batch`]."
                            ],
                            "args": [
                                {
                                    "name": "calls",
                                    "type": "Vec<Call>",
                                    "type_name": "Vec<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "0805",
                            "name": "with_weight",
                            "docs": [
                                "See [`Pallet::with_weight`]."
                            ],
                            "args": [
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                },
                                {
                                    "name": "weight",
                                    "type": "sp_weights:weight_v2:Weight",
                                    "type_name": "Weight"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 117
                    },
                    "events": [
                        {
                            "lookup": "0800",
                            "name": "BatchInterrupted",
                            "docs": [
                                "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                                "well as the error."
                            ],
                            "args": [
                                "U32",
                                "sp_runtime:DispatchError"
                            ],
                            "args_name": [
                                "index",
                                "error"
                            ],
                            "args_type_name": [
                                "u32",
                                "DispatchError"
                            ]
                        },
                        {
                            "lookup": "0801",
                            "name": "BatchCompleted",
                            "docs": [
                                "Batch of dispatches completed fully with no error."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0802",
                            "name": "BatchCompletedWithErrors",
                            "docs": [
                                "Batch of dispatches completed but has errors."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0803",
                            "name": "ItemCompleted",
                            "docs": [
                                "A single item within a Batch of dispatches has completed with no error."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "0804",
                            "name": "ItemFailed",
                            "docs": [
                                "A single item within a Batch of dispatches has completed with error."
                            ],
                            "args": [
                                "sp_runtime:DispatchError"
                            ],
                            "args_name": [
                                "error"
                            ],
                            "args_type_name": [
                                "DispatchError"
                            ]
                        },
                        {
                            "lookup": "0805",
                            "name": "DispatchedAs",
                            "docs": [
                                "A call was dispatched."
                            ],
                            "args": [
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "result"
                            ],
                            "args_type_name": [
                                "DispatchResult"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 58
                    },
                    "constants": [
                        {
                            "name": "batched_calls_limit",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "aa2a0000",
                            "docs": [
                                " The limit on the number of batched calls."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "TooManyCalls",
                            "doc": [
                                "Too many calls batched."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 435
                    },
                    "index": 8
                },
                {
                    "name": "ConvictionVoting",
                    "prefix": "ConvictionVoting",
                    "storage": [
                        {
                            "name": "VotingFor",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "U16"
                                    ],
                                    "value": "pallet_conviction_voting:vote:Voting",
                                    "keys_id": 436,
                                    "value_id": 437
                                }
                            },
                            "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                            "docs": [
                                " All voting for a particular voter in a particular voting class. We store the balance for the",
                                " number of votes that we have recorded."
                            ]
                        },
                        {
                            "name": "ClassLocksFor",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Vec<Tuple:U16U128>",
                                    "keys_id": 0,
                                    "value_id": 445
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                                " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                                " this list."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1000",
                            "name": "vote",
                            "docs": [
                                "See [`Pallet::vote`]."
                            ],
                            "args": [
                                {
                                    "name": "poll_index",
                                    "type": "compact<U32>",
                                    "type_name": "PollIndexOf"
                                },
                                {
                                    "name": "vote",
                                    "type": "pallet_conviction_voting:vote:AccountVote",
                                    "type_name": "AccountVote<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "1001",
                            "name": "delegate",
                            "docs": [
                                "See [`Pallet::delegate`]."
                            ],
                            "args": [
                                {
                                    "name": "class",
                                    "type": "U16",
                                    "type_name": "ClassOf"
                                },
                                {
                                    "name": "to",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "conviction",
                                    "type": "pallet_conviction_voting:conviction:Conviction",
                                    "type_name": "Conviction"
                                },
                                {
                                    "name": "balance",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1002",
                            "name": "undelegate",
                            "docs": [
                                "See [`Pallet::undelegate`]."
                            ],
                            "args": [
                                {
                                    "name": "class",
                                    "type": "U16",
                                    "type_name": "ClassOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1003",
                            "name": "unlock",
                            "docs": [
                                "See [`Pallet::unlock`]."
                            ],
                            "args": [
                                {
                                    "name": "class",
                                    "type": "U16",
                                    "type_name": "ClassOf"
                                },
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1004",
                            "name": "remove_vote",
                            "docs": [
                                "See [`Pallet::remove_vote`]."
                            ],
                            "args": [
                                {
                                    "name": "class",
                                    "type": "option<U16>",
                                    "type_name": "Option<ClassOf>"
                                },
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "PollIndexOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1005",
                            "name": "remove_other_vote",
                            "docs": [
                                "See [`Pallet::remove_other_vote`]."
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "class",
                                    "type": "U16",
                                    "type_name": "ClassOf"
                                },
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "PollIndexOf"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 123
                    },
                    "events": [
                        {
                            "lookup": "1000",
                            "name": "Delegated",
                            "docs": [
                                "An account has delegated their vote to another account. \\[who, target\\]"
                            ],
                            "args": [
                                "AccountId",
                                "AccountId"
                            ],
                            "args_name": [
                                "",
                                ""
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1001",
                            "name": "Undelegated",
                            "docs": [
                                "An \\[account\\] has cancelled a previous delegation operation."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                ""
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 61
                    },
                    "constants": [
                        {
                            "name": "MaxVotes",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00020000",
                            "docs": [
                                " The maximum number of concurrent votes an account may have.",
                                "",
                                " Also used to compute weight, an overly large value can lead to extrinsics with large",
                                " weight estimation: see `delegate` for instance."
                            ]
                        },
                        {
                            "name": "VoteLockingPeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80130300",
                            "docs": [
                                " The minimum period of vote locking.",
                                "",
                                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                                " those successful voters are locked into the consequences that their votes entail."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotOngoing",
                            "doc": [
                                "Poll is not ongoing."
                            ]
                        },
                        {
                            "name": "NotVoter",
                            "doc": [
                                "The given account did not vote on the poll."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "The actor has no permission to conduct the action."
                            ]
                        },
                        {
                            "name": "NoPermissionYet",
                            "doc": [
                                "The actor has no permission to conduct the action right now but will do in the future."
                            ]
                        },
                        {
                            "name": "AlreadyDelegating",
                            "doc": [
                                "The account is already delegating."
                            ]
                        },
                        {
                            "name": "AlreadyVoting",
                            "doc": [
                                "The account currently has votes attached to it and the operation cannot succeed until",
                                "these are removed, either through `unvote` or `reap_vote`."
                            ]
                        },
                        {
                            "name": "InsufficientFunds",
                            "doc": [
                                "Too high a balance was provided that the account cannot afford."
                            ]
                        },
                        {
                            "name": "NotDelegating",
                            "doc": [
                                "The account is not currently delegating."
                            ]
                        },
                        {
                            "name": "Nonsense",
                            "doc": [
                                "Delegation to oneself makes no sense."
                            ]
                        },
                        {
                            "name": "MaxVotesReached",
                            "doc": [
                                "Maximum number of votes reached."
                            ]
                        },
                        {
                            "name": "ClassNeeded",
                            "doc": [
                                "The class must be supplied since it is not easily determinable from the state."
                            ]
                        },
                        {
                            "name": "BadClass",
                            "doc": [
                                "The class ID supplied is invalid."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 448
                    },
                    "index": 16
                },
                {
                    "name": "Referenda",
                    "prefix": "Referenda",
                    "storage": [
                        {
                            "name": "ReferendumCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The next free referendum index, aka the number of referenda started so far."
                            ]
                        },
                        {
                            "name": "ReferendumInfoFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_referenda:types:ReferendumInfo@449",
                                    "keys_id": 4,
                                    "value_id": 449
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Information concerning any given referendum."
                            ]
                        },
                        {
                            "name": "TrackQueue",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "Vec<Tuple:U32U128>",
                                    "keys_id": 63,
                                    "value_id": 457
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                                " conviction-weighted approvals.",
                                "",
                                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                            ]
                        },
                        {
                            "name": "DecidingCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "U32",
                                    "keys_id": 63,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The number of referenda being decided currently."
                            ]
                        },
                        {
                            "name": "MetadataOf",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "H256",
                                    "keys_id": 4,
                                    "value_id": 12
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The metadata is a general information concerning the referendum.",
                                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                                " dump or IPFS hash of a JSON file.",
                                "",
                                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                                " large preimages."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1100",
                            "name": "submit",
                            "docs": [
                                "See [`Pallet::submit`]."
                            ],
                            "args": [
                                {
                                    "name": "proposal_origin",
                                    "type": "vara_runtime:OriginCaller",
                                    "type_name": "Box<PalletsOriginOf>"
                                },
                                {
                                    "name": "proposal",
                                    "type": "frame_support:traits:preimages:Bounded",
                                    "type_name": "BoundedCallOf"
                                },
                                {
                                    "name": "enactment_moment",
                                    "type": "frame_support:traits:schedule:DispatchTime",
                                    "type_name": "DispatchTime<BlockNumberFor>"
                                }
                            ]
                        },
                        {
                            "lookup": "1101",
                            "name": "place_decision_deposit",
                            "docs": [
                                "See [`Pallet::place_decision_deposit`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1102",
                            "name": "refund_decision_deposit",
                            "docs": [
                                "See [`Pallet::refund_decision_deposit`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1103",
                            "name": "cancel",
                            "docs": [
                                "See [`Pallet::cancel`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1104",
                            "name": "kill",
                            "docs": [
                                "See [`Pallet::kill`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1105",
                            "name": "nudge_referendum",
                            "docs": [
                                "See [`Pallet::nudge_referendum`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1106",
                            "name": "one_fewer_deciding",
                            "docs": [
                                "See [`Pallet::one_fewer_deciding`]."
                            ],
                            "args": [
                                {
                                    "name": "track",
                                    "type": "U16",
                                    "type_name": "TrackIdOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1107",
                            "name": "refund_submission_deposit",
                            "docs": [
                                "See [`Pallet::refund_submission_deposit`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1108",
                            "name": "set_metadata",
                            "docs": [
                                "See [`Pallet::set_metadata`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                },
                                {
                                    "name": "maybe_hash",
                                    "type": "option<H256>",
                                    "type_name": "Option<Hash>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 128
                    },
                    "events": [
                        {
                            "lookup": "1100",
                            "name": "Submitted",
                            "docs": [
                                "A referendum has been submitted."
                            ],
                            "args": [
                                "U32",
                                "U16",
                                "frame_support:traits:preimages:Bounded"
                            ],
                            "args_name": [
                                "index",
                                "track",
                                "proposal"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "TrackIdOf",
                                "BoundedCallOf"
                            ]
                        },
                        {
                            "lookup": "1101",
                            "name": "DecisionDepositPlaced",
                            "docs": [
                                "The decision deposit has been placed."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1102",
                            "name": "DecisionDepositRefunded",
                            "docs": [
                                "The decision deposit has been refunded."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1103",
                            "name": "DepositSlashed",
                            "docs": [
                                "A deposit has been slashaed."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1104",
                            "name": "DecisionStarted",
                            "docs": [
                                "A referendum has moved into the deciding phase."
                            ],
                            "args": [
                                "U32",
                                "U16",
                                "frame_support:traits:preimages:Bounded",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "track",
                                "proposal",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "TrackIdOf",
                                "BoundedCallOf",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "1105",
                            "name": "ConfirmStarted",
                            "docs": null,
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1106",
                            "name": "ConfirmAborted",
                            "docs": null,
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1107",
                            "name": "Confirmed",
                            "docs": [
                                "A referendum has ended its confirmation phase and is ready for approval."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "1108",
                            "name": "Approved",
                            "docs": [
                                "A referendum has been approved and its proposal has been scheduled."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1109",
                            "name": "Rejected",
                            "docs": [
                                "A proposal has been rejected by referendum."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "110a",
                            "name": "TimedOut",
                            "docs": [
                                "A referendum has been timed out without being decided."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "110b",
                            "name": "Cancelled",
                            "docs": [
                                "A referendum has been cancelled."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "110c",
                            "name": "Killed",
                            "docs": [
                                "A referendum has been killed."
                            ],
                            "args": [
                                "U32",
                                "pallet_conviction_voting:types:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "110d",
                            "name": "SubmissionDepositRefunded",
                            "docs": [
                                "The submission deposit has been refunded."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "110e",
                            "name": "MetadataSet",
                            "docs": [
                                "Metadata for a referendum has been set."
                            ],
                            "args": [
                                "U32",
                                "H256"
                            ],
                            "args_name": [
                                "index",
                                "hash"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Hash"
                            ]
                        },
                        {
                            "lookup": "110f",
                            "name": "MetadataCleared",
                            "docs": [
                                "Metadata for a referendum has been cleared."
                            ],
                            "args": [
                                "U32",
                                "H256"
                            ],
                            "args_name": [
                                "index",
                                "hash"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Hash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 62
                    },
                    "constants": [
                        {
                            "name": "SubmissionDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00407a10f35a00000000000000000000",
                            "docs": [
                                " The minimum amount to be used as a deposit for a public referendum proposal."
                            ]
                        },
                        {
                            "name": "MaxQueued",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " Maximum size of the referendum queue for a single track."
                            ]
                        },
                        {
                            "name": "UndecidingTimeout",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00270600",
                            "docs": [
                                " The number of blocks after submission that a referendum must begin being decided by.",
                                " Once this passes, then anyone may cancel the referendum."
                            ]
                        },
                        {
                            "name": "AlarmInterval",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "01000000",
                            "docs": [
                                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                                " automatic referendum status changes. Explicit servicing instructions are unaffected."
                            ]
                        },
                        {
                            "name": "Tracks",
                            "type": "Vec<Tuple:U16pallet_referenda:types:TrackInfo>",
                            "type_value": 460,
                            "constants_value": "34000010726f6f7401000000000064a7b3b6e00d0000000000000000600900000027060080700000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d01004877686974656c69737465645f63616c6c65726400000000008a5d7845630100000000000000005802000000270600c8000000c800000002ec972510000000007b573c170000000042392f1200000000020e00840000000000d6e61f010000000039627902000000000a00347374616b696e675f61646d696e0a0000000000c52ebca2b10000000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0b00247472656173757265720a0000000000c16ff286230000000000000000006009000000270600100e0000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d0c004066656c6c6f77736869705f61646d696e0a0000000000c52ebca2b10000000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0d003467656e6572616c5f61646d696e0a0000000000c52ebca2b10000000000000000006009000000270600100e0000c80000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff1400507265666572656e64756d5f63616e63656c6c6572e803000000008a5d7845630100000000000000006009000080130300100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1500447265666572656e64756d5f6b696c6c6572e80300000000b2d3595bf00600000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1e0030736d616c6c5f746970706572c800000000a0724e1809000000000000000000001400000080130300c80000001400000000499149150065cd1d00ca9a3b02f9ba1800000000002a4d3100000000006b59e7ffffffffff1f00286269675f7469707065726400000000407a10f35a00000000000000000000c800000080130300b0040000c800000000499149150065cd1d00ca9a3b02694f3f000000000035967d0000000000e534c1ffffffffff200034736d616c6c5f7370656e646572320000000080c6a47e8d03000000000000000000c012000000270600403800008070000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff2100386d656469756d5f7370656e6465723200000000008d49fd1a07000000000000000000c0120000002706008070000080700000005b01f6300065cd1d00ca9a3b021161db0000000000bfd1aa010000000020972affffffffff22002c6269675f7370656e6465723200000000001a93fa350e000000000000000000c01200000027060000e10000807000000000ca9a3b0065cd1d00ca9a3b02413cb00100000000755d34030000000045d165feffffffff",
                            "docs": [
                                " Information concerning the different referendum tracks."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotOngoing",
                            "doc": [
                                "Referendum is not ongoing."
                            ]
                        },
                        {
                            "name": "HasDeposit",
                            "doc": [
                                "Referendum's decision deposit is already paid."
                            ]
                        },
                        {
                            "name": "BadTrack",
                            "doc": [
                                "The track identifier given was invalid."
                            ]
                        },
                        {
                            "name": "Full",
                            "doc": [
                                "There are already a full complement of referenda in progress for this track."
                            ]
                        },
                        {
                            "name": "QueueEmpty",
                            "doc": [
                                "The queue of the track is empty."
                            ]
                        },
                        {
                            "name": "BadReferendum",
                            "doc": [
                                "The referendum index provided is invalid in this context."
                            ]
                        },
                        {
                            "name": "NothingToDo",
                            "doc": [
                                "There was nothing to do in the advancement."
                            ]
                        },
                        {
                            "name": "NoTrack",
                            "doc": [
                                "No track exists for the proposal origin."
                            ]
                        },
                        {
                            "name": "Unfinished",
                            "doc": [
                                "Any deposit cannot be refunded until after the decision is over."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "The deposit refunder is not the depositor."
                            ]
                        },
                        {
                            "name": "NoDeposit",
                            "doc": [
                                "The deposit cannot be refunded since none was made."
                            ]
                        },
                        {
                            "name": "BadStatus",
                            "doc": [
                                "The referendum status is invalid for this operation."
                            ]
                        },
                        {
                            "name": "PreimageNotExist",
                            "doc": [
                                "The preimage does not exist."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 466
                    },
                    "index": 17
                },
                {
                    "name": "FellowshipCollective",
                    "prefix": "FellowshipCollective",
                    "storage": [
                        {
                            "name": "MemberCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "U32",
                                    "keys_id": 63,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The number of members in the collective who have at least the rank according to the index",
                                " of the vec."
                            ]
                        },
                        {
                            "name": "Members",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "U16",
                                    "keys_id": 0,
                                    "value_id": 467
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The current members of the collective."
                            ]
                        },
                        {
                            "name": "IdToIndex",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16",
                                        "AccountId"
                                    ],
                                    "value": "U32",
                                    "keys_id": 468,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The index of each ranks's member into the group of members who have at least that rank."
                            ]
                        },
                        {
                            "name": "IndexToId",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16",
                                        "U32"
                                    ],
                                    "value": "AccountId",
                                    "keys_id": 469,
                                    "value_id": 0
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The members in the collective by index. All indices in the range `0..MemberCount` will",
                                " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
                            ]
                        },
                        {
                            "name": "Voting",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "AccountId"
                                    ],
                                    "value": "pallet_ranked_collective:VoteRecord",
                                    "keys_id": 402,
                                    "value_id": 282
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Votes on a given proposal, if it is ongoing."
                            ]
                        },
                        {
                            "name": "VotingCleanup",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": 470
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1200",
                            "name": "add_member",
                            "docs": [
                                "See [`Pallet::add_member`]."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1201",
                            "name": "promote_member",
                            "docs": [
                                "See [`Pallet::promote_member`]."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1202",
                            "name": "demote_member",
                            "docs": [
                                "See [`Pallet::demote_member`]."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1203",
                            "name": "remove_member",
                            "docs": [
                                "See [`Pallet::remove_member`]."
                            ],
                            "args": [
                                {
                                    "name": "who",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "min_rank",
                                    "type": "U16",
                                    "type_name": "Rank"
                                }
                            ]
                        },
                        {
                            "lookup": "1204",
                            "name": "vote",
                            "docs": [
                                "See [`Pallet::vote`]."
                            ],
                            "args": [
                                {
                                    "name": "poll",
                                    "type": "U32",
                                    "type_name": "PollIndexOf"
                                },
                                {
                                    "name": "aye",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "1205",
                            "name": "cleanup_poll",
                            "docs": [
                                "See [`Pallet::cleanup_poll`]."
                            ],
                            "args": [
                                {
                                    "name": "poll_index",
                                    "type": "U32",
                                    "type_name": "PollIndexOf"
                                },
                                {
                                    "name": "max",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 131
                    },
                    "events": [
                        {
                            "lookup": "1200",
                            "name": "MemberAdded",
                            "docs": [
                                "A member `who` has been added."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "who"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1201",
                            "name": "RankChanged",
                            "docs": [
                                "The member `who`se rank has been changed to the given `rank`."
                            ],
                            "args": [
                                "AccountId",
                                "U16"
                            ],
                            "args_name": [
                                "who",
                                "rank"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Rank"
                            ]
                        },
                        {
                            "lookup": "1202",
                            "name": "MemberRemoved",
                            "docs": [
                                "The member `who` of given `rank` has been removed from the collective."
                            ],
                            "args": [
                                "AccountId",
                                "U16"
                            ],
                            "args_name": [
                                "who",
                                "rank"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Rank"
                            ]
                        },
                        {
                            "lookup": "1203",
                            "name": "Voted",
                            "docs": [
                                "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
                                "`tally`."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "pallet_ranked_collective:VoteRecord",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "who",
                                "poll",
                                "vote",
                                "tally"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PollIndexOf",
                                "VoteRecord",
                                "TallyOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 281
                    },
                    "errors": [
                        {
                            "name": "AlreadyMember",
                            "doc": [
                                "Account is already a member."
                            ]
                        },
                        {
                            "name": "NotMember",
                            "doc": [
                                "Account is not a member."
                            ]
                        },
                        {
                            "name": "NotPolling",
                            "doc": [
                                "The given poll index is unknown or has closed."
                            ]
                        },
                        {
                            "name": "Ongoing",
                            "doc": [
                                "The given poll is still ongoing."
                            ]
                        },
                        {
                            "name": "NoneRemaining",
                            "doc": [
                                "There are no further records to be removed."
                            ]
                        },
                        {
                            "name": "Corruption",
                            "doc": [
                                "Unexpected error in state."
                            ]
                        },
                        {
                            "name": "RankTooLow",
                            "doc": [
                                "The member's rank is too low to vote."
                            ]
                        },
                        {
                            "name": "InvalidWitness",
                            "doc": [
                                "The information provided is incorrect."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "The origin is not sufficiently privileged to do the operation."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 471
                    },
                    "index": 18
                },
                {
                    "name": "FellowshipReferenda",
                    "prefix": "FellowshipReferenda",
                    "storage": [
                        {
                            "name": "ReferendumCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The next free referendum index, aka the number of referenda started so far."
                            ]
                        },
                        {
                            "name": "ReferendumInfoFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_referenda:types:ReferendumInfo@472",
                                    "keys_id": 4,
                                    "value_id": 472
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Information concerning any given referendum."
                            ]
                        },
                        {
                            "name": "TrackQueue",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "Vec<Tuple:U32U32>",
                                    "keys_id": 63,
                                    "value_id": 474
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                                " conviction-weighted approvals.",
                                "",
                                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                            ]
                        },
                        {
                            "name": "DecidingCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U16"
                                    ],
                                    "value": "U32",
                                    "keys_id": 63,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The number of referenda being decided currently."
                            ]
                        },
                        {
                            "name": "MetadataOf",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "H256",
                                    "keys_id": 4,
                                    "value_id": 12
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The metadata is a general information concerning the referendum.",
                                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                                " dump or IPFS hash of a JSON file.",
                                "",
                                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                                " large preimages."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1300",
                            "name": "submit",
                            "docs": [
                                "See [`Pallet::submit`]."
                            ],
                            "args": [
                                {
                                    "name": "proposal_origin",
                                    "type": "vara_runtime:OriginCaller",
                                    "type_name": "Box<PalletsOriginOf>"
                                },
                                {
                                    "name": "proposal",
                                    "type": "frame_support:traits:preimages:Bounded",
                                    "type_name": "BoundedCallOf"
                                },
                                {
                                    "name": "enactment_moment",
                                    "type": "frame_support:traits:schedule:DispatchTime",
                                    "type_name": "DispatchTime<BlockNumberFor>"
                                }
                            ]
                        },
                        {
                            "lookup": "1301",
                            "name": "place_decision_deposit",
                            "docs": [
                                "See [`Pallet::place_decision_deposit`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1302",
                            "name": "refund_decision_deposit",
                            "docs": [
                                "See [`Pallet::refund_decision_deposit`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1303",
                            "name": "cancel",
                            "docs": [
                                "See [`Pallet::cancel`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1304",
                            "name": "kill",
                            "docs": [
                                "See [`Pallet::kill`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1305",
                            "name": "nudge_referendum",
                            "docs": [
                                "See [`Pallet::nudge_referendum`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1306",
                            "name": "one_fewer_deciding",
                            "docs": [
                                "See [`Pallet::one_fewer_deciding`]."
                            ],
                            "args": [
                                {
                                    "name": "track",
                                    "type": "U16",
                                    "type_name": "TrackIdOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1307",
                            "name": "refund_submission_deposit",
                            "docs": [
                                "See [`Pallet::refund_submission_deposit`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1308",
                            "name": "set_metadata",
                            "docs": [
                                "See [`Pallet::set_metadata`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "ReferendumIndex"
                                },
                                {
                                    "name": "maybe_hash",
                                    "type": "option<H256>",
                                    "type_name": "Option<Hash>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 132
                    },
                    "events": [
                        {
                            "lookup": "1300",
                            "name": "Submitted",
                            "docs": [
                                "A referendum has been submitted."
                            ],
                            "args": [
                                "U32",
                                "U16",
                                "frame_support:traits:preimages:Bounded"
                            ],
                            "args_name": [
                                "index",
                                "track",
                                "proposal"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "TrackIdOf",
                                "BoundedCallOf"
                            ]
                        },
                        {
                            "lookup": "1301",
                            "name": "DecisionDepositPlaced",
                            "docs": [
                                "The decision deposit has been placed."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1302",
                            "name": "DecisionDepositRefunded",
                            "docs": [
                                "The decision deposit has been refunded."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1303",
                            "name": "DepositSlashed",
                            "docs": [
                                "A deposit has been slashaed."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1304",
                            "name": "DecisionStarted",
                            "docs": [
                                "A referendum has moved into the deciding phase."
                            ],
                            "args": [
                                "U32",
                                "U16",
                                "frame_support:traits:preimages:Bounded",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "track",
                                "proposal",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "TrackIdOf",
                                "BoundedCallOf",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "1305",
                            "name": "ConfirmStarted",
                            "docs": null,
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1306",
                            "name": "ConfirmAborted",
                            "docs": null,
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1307",
                            "name": "Confirmed",
                            "docs": [
                                "A referendum has ended its confirmation phase and is ready for approval."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "1308",
                            "name": "Approved",
                            "docs": [
                                "A referendum has been approved and its proposal has been scheduled."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "ReferendumIndex"
                            ]
                        },
                        {
                            "lookup": "1309",
                            "name": "Rejected",
                            "docs": [
                                "A proposal has been rejected by referendum."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "130a",
                            "name": "TimedOut",
                            "docs": [
                                "A referendum has been timed out without being decided."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "130b",
                            "name": "Cancelled",
                            "docs": [
                                "A referendum has been cancelled."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "130c",
                            "name": "Killed",
                            "docs": [
                                "A referendum has been killed."
                            ],
                            "args": [
                                "U32",
                                "pallet_ranked_collective:Tally"
                            ],
                            "args_name": [
                                "index",
                                "tally"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Tally"
                            ]
                        },
                        {
                            "lookup": "130d",
                            "name": "SubmissionDepositRefunded",
                            "docs": [
                                "The submission deposit has been refunded."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "who",
                                "amount"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "130e",
                            "name": "MetadataSet",
                            "docs": [
                                "Metadata for a referendum has been set."
                            ],
                            "args": [
                                "U32",
                                "H256"
                            ],
                            "args_name": [
                                "index",
                                "hash"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Hash"
                            ]
                        },
                        {
                            "lookup": "130f",
                            "name": "MetadataCleared",
                            "docs": [
                                "Metadata for a referendum has been cleared."
                            ],
                            "args": [
                                "U32",
                                "H256"
                            ],
                            "args_name": [
                                "index",
                                "hash"
                            ],
                            "args_type_name": [
                                "ReferendumIndex",
                                "Hash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 284
                    },
                    "constants": [
                        {
                            "name": "SubmissionDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00000000000000000000000000000000",
                            "docs": [
                                " The minimum amount to be used as a deposit for a public referendum proposal."
                            ]
                        },
                        {
                            "name": "MaxQueued",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " Maximum size of the referendum queue for a single track."
                            ]
                        },
                        {
                            "name": "UndecidingTimeout",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80130300",
                            "docs": [
                                " The number of blocks after submission that a referendum must begin being decided by.",
                                " Once this passes, then anyone may cancel the referendum."
                            ]
                        },
                        {
                            "name": "AlarmInterval",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "01000000",
                            "docs": [
                                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                                " automatic referendum status changes. Explicit servicing instructions are unaffected."
                            ]
                        },
                        {
                            "name": "Tracks",
                            "type": "Vec<Tuple:U16pallet_referenda:types:TrackInfo>",
                            "type_value": 460,
                            "constants_value": "2800002863616e646964617465730a0000000080c6a47e8d03000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d01001c6d656d626572730a00000000407a10f35a00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d02002c70726f66696369656e74730a00000000407a10f35a00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d03001c66656c6c6f77730a00000000407a10f35a00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d04003873656e696f722066656c6c6f77730a00000000407a10f35a00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d05001c657870657274730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d06003873656e696f7220657870657274730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d07001c6d6173746572730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d08003873656e696f72206d6173746572730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d0900346772616e64206d6173746572730a00000000a0724e180900000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d",
                            "docs": [
                                " Information concerning the different referendum tracks."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotOngoing",
                            "doc": [
                                "Referendum is not ongoing."
                            ]
                        },
                        {
                            "name": "HasDeposit",
                            "doc": [
                                "Referendum's decision deposit is already paid."
                            ]
                        },
                        {
                            "name": "BadTrack",
                            "doc": [
                                "The track identifier given was invalid."
                            ]
                        },
                        {
                            "name": "Full",
                            "doc": [
                                "There are already a full complement of referenda in progress for this track."
                            ]
                        },
                        {
                            "name": "QueueEmpty",
                            "doc": [
                                "The queue of the track is empty."
                            ]
                        },
                        {
                            "name": "BadReferendum",
                            "doc": [
                                "The referendum index provided is invalid in this context."
                            ]
                        },
                        {
                            "name": "NothingToDo",
                            "doc": [
                                "There was nothing to do in the advancement."
                            ]
                        },
                        {
                            "name": "NoTrack",
                            "doc": [
                                "No track exists for the proposal origin."
                            ]
                        },
                        {
                            "name": "Unfinished",
                            "doc": [
                                "Any deposit cannot be refunded until after the decision is over."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "The deposit refunder is not the depositor."
                            ]
                        },
                        {
                            "name": "NoDeposit",
                            "doc": [
                                "The deposit cannot be refunded since none was made."
                            ]
                        },
                        {
                            "name": "BadStatus",
                            "doc": [
                                "The referendum status is invalid for this operation."
                            ]
                        },
                        {
                            "name": "PreimageNotExist",
                            "doc": [
                                "The preimage does not exist."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 475
                    },
                    "index": 19
                },
                {
                    "name": "Origins",
                    "prefix": "",
                    "storage": null,
                    "errors": null,
                    "errors_value": null,
                    "index": 20
                },
                {
                    "name": "Whitelist",
                    "prefix": "Whitelist",
                    "storage": [
                        {
                            "name": "WhitelistedCall",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": "NULL",
                                    "keys_id": 12,
                                    "value_id": 60
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1500",
                            "name": "whitelist_call",
                            "docs": [
                                "See [`Pallet::whitelist_call`]."
                            ],
                            "args": [
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "1501",
                            "name": "remove_whitelisted_call",
                            "docs": [
                                "See [`Pallet::remove_whitelisted_call`]."
                            ],
                            "args": [
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "1502",
                            "name": "dispatch_whitelisted_call",
                            "docs": [
                                "See [`Pallet::dispatch_whitelisted_call`]."
                            ],
                            "args": [
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": "Hash"
                                },
                                {
                                    "name": "call_encoded_len",
                                    "type": "U32",
                                    "type_name": "u32"
                                },
                                {
                                    "name": "call_weight_witness",
                                    "type": "sp_weights:weight_v2:Weight",
                                    "type_name": "Weight"
                                }
                            ]
                        },
                        {
                            "lookup": "1503",
                            "name": "dispatch_whitelisted_call_with_preimage",
                            "docs": [
                                "See [`Pallet::dispatch_whitelisted_call_with_preimage`]."
                            ],
                            "args": [
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 133
                    },
                    "events": [
                        {
                            "lookup": "1500",
                            "name": "CallWhitelisted",
                            "docs": null,
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "call_hash"
                            ],
                            "args_type_name": [
                                "Hash"
                            ]
                        },
                        {
                            "lookup": "1501",
                            "name": "WhitelistedCallRemoved",
                            "docs": null,
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "call_hash"
                            ],
                            "args_type_name": [
                                "Hash"
                            ]
                        },
                        {
                            "lookup": "1502",
                            "name": "WhitelistedCallDispatched",
                            "docs": null,
                            "args": [
                                "H256",
                                "Result<frame_support:dispatch:PostDispatchInfo,sp_runtime:DispatchErrorWithPostInfo>"
                            ],
                            "args_name": [
                                "call_hash",
                                "result"
                            ],
                            "args_type_name": [
                                "Hash",
                                "DispatchResultWithPostInfo"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 285
                    },
                    "errors": [
                        {
                            "name": "UnavailablePreImage",
                            "doc": [
                                "The preimage of the call hash could not be loaded."
                            ]
                        },
                        {
                            "name": "UndecodableCall",
                            "doc": [
                                "The call could not be decoded."
                            ]
                        },
                        {
                            "name": "InvalidCallWeightWitness",
                            "doc": [
                                "The weight of the decoded call was higher than the witness."
                            ]
                        },
                        {
                            "name": "CallIsNotWhitelisted",
                            "doc": [
                                "The call was not whitelisted."
                            ]
                        },
                        {
                            "name": "CallAlreadyWhitelisted",
                            "doc": [
                                "The call was already whitelisted; No-Op."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 476
                    },
                    "index": 21
                },
                {
                    "name": "Scheduler",
                    "prefix": "Scheduler",
                    "storage": [
                        {
                            "name": "IncompleteSince",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Agenda",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<option<pallet_scheduler:Scheduled>>",
                                    "keys_id": 4,
                                    "value_id": 477
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Items to be executed, indexed by the block number that they should be executed on."
                            ]
                        },
                        {
                            "name": "Lookup",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "Tuple:U32U32",
                                    "keys_id": 1,
                                    "value_id": 136
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Lookup from a name to the block number and index of the task.",
                                "",
                                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                                " identities."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1600",
                            "name": "schedule",
                            "docs": [
                                "See [`Pallet::schedule`]."
                            ],
                            "args": [
                                {
                                    "name": "when",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "option<Tuple:U32U32>",
                                    "type_name": "Option<schedule::Period<BlockNumberFor>>"
                                },
                                {
                                    "name": "priority",
                                    "type": "U8",
                                    "type_name": "schedule::Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1601",
                            "name": "cancel",
                            "docs": [
                                "See [`Pallet::cancel`]."
                            ],
                            "args": [
                                {
                                    "name": "when",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                },
                                {
                                    "name": "index",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "1602",
                            "name": "schedule_named",
                            "docs": [
                                "See [`Pallet::schedule_named`]."
                            ],
                            "args": [
                                {
                                    "name": "id",
                                    "type": "[U8; 32]",
                                    "type_name": "TaskName"
                                },
                                {
                                    "name": "when",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "option<Tuple:U32U32>",
                                    "type_name": "Option<schedule::Period<BlockNumberFor>>"
                                },
                                {
                                    "name": "priority",
                                    "type": "U8",
                                    "type_name": "schedule::Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1603",
                            "name": "cancel_named",
                            "docs": [
                                "See [`Pallet::cancel_named`]."
                            ],
                            "args": [
                                {
                                    "name": "id",
                                    "type": "[U8; 32]",
                                    "type_name": "TaskName"
                                }
                            ]
                        },
                        {
                            "lookup": "1604",
                            "name": "schedule_after",
                            "docs": [
                                "See [`Pallet::schedule_after`]."
                            ],
                            "args": [
                                {
                                    "name": "after",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "option<Tuple:U32U32>",
                                    "type_name": "Option<schedule::Period<BlockNumberFor>>"
                                },
                                {
                                    "name": "priority",
                                    "type": "U8",
                                    "type_name": "schedule::Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1605",
                            "name": "schedule_named_after",
                            "docs": [
                                "See [`Pallet::schedule_named_after`]."
                            ],
                            "args": [
                                {
                                    "name": "id",
                                    "type": "[U8; 32]",
                                    "type_name": "TaskName"
                                },
                                {
                                    "name": "after",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "option<Tuple:U32U32>",
                                    "type_name": "Option<schedule::Period<BlockNumberFor>>"
                                },
                                {
                                    "name": "priority",
                                    "type": "U8",
                                    "type_name": "schedule::Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 134
                    },
                    "events": [
                        {
                            "lookup": "1600",
                            "name": "Scheduled",
                            "docs": [
                                "Scheduled some task."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "when",
                                "index"
                            ],
                            "args_type_name": [
                                "BlockNumberFor",
                                "u32"
                            ]
                        },
                        {
                            "lookup": "1601",
                            "name": "Canceled",
                            "docs": [
                                "Canceled some task."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "when",
                                "index"
                            ],
                            "args_type_name": [
                                "BlockNumberFor",
                                "u32"
                            ]
                        },
                        {
                            "lookup": "1602",
                            "name": "Dispatched",
                            "docs": [
                                "Dispatched some task."
                            ],
                            "args": [
                                "Tuple:U32U32",
                                "option<[U8; 32]>",
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "task",
                                "id",
                                "result"
                            ],
                            "args_type_name": [
                                "TaskAddress<BlockNumberFor>",
                                "Option<TaskName>",
                                "DispatchResult"
                            ]
                        },
                        {
                            "lookup": "1603",
                            "name": "CallUnavailable",
                            "docs": [
                                "The call for the provided hash was not found so the task has been aborted."
                            ],
                            "args": [
                                "Tuple:U32U32",
                                "option<[U8; 32]>"
                            ],
                            "args_name": [
                                "task",
                                "id"
                            ],
                            "args_type_name": [
                                "TaskAddress<BlockNumberFor>",
                                "Option<TaskName>"
                            ]
                        },
                        {
                            "lookup": "1604",
                            "name": "PeriodicFailed",
                            "docs": [
                                "The given task was unable to be renewed since the agenda is full at that block."
                            ],
                            "args": [
                                "Tuple:U32U32",
                                "option<[U8; 32]>"
                            ],
                            "args_name": [
                                "task",
                                "id"
                            ],
                            "args_type_name": [
                                "TaskAddress<BlockNumberFor>",
                                "Option<TaskName>"
                            ]
                        },
                        {
                            "lookup": "1605",
                            "name": "PermanentlyOverweight",
                            "docs": [
                                "The given task can never be executed since it is overweight."
                            ],
                            "args": [
                                "Tuple:U32U32",
                                "option<[U8; 32]>"
                            ],
                            "args_name": [
                                "task",
                                "id"
                            ],
                            "args_type_name": [
                                "TaskAddress<BlockNumberFor>",
                                "Option<TaskName>"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 290
                    },
                    "constants": [
                        {
                            "name": "MaximumWeight",
                            "type": "sp_weights:weight_v2:Weight",
                            "type_value": 9,
                            "constants_value": "070040b743ba13cccccccccccccccc",
                            "docs": [
                                " The maximum weight that may be scheduled per block for any dispatchables."
                            ]
                        },
                        {
                            "name": "MaxScheduledPerBlock",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00020000",
                            "docs": [
                                " The maximum number of scheduled calls in the queue for a single block.",
                                "",
                                " NOTE:",
                                " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
                                " higher limit under `runtime-benchmarks` feature."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "FailedToSchedule",
                            "doc": [
                                "Failed to schedule a call"
                            ]
                        },
                        {
                            "name": "NotFound",
                            "doc": [
                                "Cannot find the scheduled call."
                            ]
                        },
                        {
                            "name": "TargetBlockNumberInPast",
                            "doc": [
                                "Given target block number is in the past."
                            ]
                        },
                        {
                            "name": "RescheduleNoChange",
                            "doc": [
                                "Reschedule failed because it does not change scheduled time."
                            ]
                        },
                        {
                            "name": "Named",
                            "doc": [
                                "Attempt to use a non-named function on a named task."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 481
                    },
                    "index": 22
                },
                {
                    "name": "Preimage",
                    "prefix": "Preimage",
                    "storage": [
                        {
                            "name": "StatusFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": "pallet_preimage:OldRequestStatus",
                                    "keys_id": 12,
                                    "value_id": 482
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The request status of a given hash."
                            ]
                        },
                        {
                            "name": "RequestStatusFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": "pallet_preimage:RequestStatus",
                                    "keys_id": 12,
                                    "value_id": 484
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The request status of a given hash."
                            ]
                        },
                        {
                            "name": "PreimageFor",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "H256",
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 434,
                                    "value_id": 488
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1700",
                            "name": "note_preimage",
                            "docs": [
                                "See [`Pallet::note_preimage`]."
                            ],
                            "args": [
                                {
                                    "name": "bytes",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "1701",
                            "name": "unnote_preimage",
                            "docs": [
                                "See [`Pallet::unnote_preimage`]."
                            ],
                            "args": [
                                {
                                    "name": "hash",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "1702",
                            "name": "request_preimage",
                            "docs": [
                                "See [`Pallet::request_preimage`]."
                            ],
                            "args": [
                                {
                                    "name": "hash",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "1703",
                            "name": "unrequest_preimage",
                            "docs": [
                                "See [`Pallet::unrequest_preimage`]."
                            ],
                            "args": [
                                {
                                    "name": "hash",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "1704",
                            "name": "ensure_updated",
                            "docs": [
                                "See [`Pallet::ensure_updated`]."
                            ],
                            "args": [
                                {
                                    "name": "hashes",
                                    "type": "Vec<H256>",
                                    "type_name": "Vec<Hash>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 137
                    },
                    "events": [
                        {
                            "lookup": "1700",
                            "name": "Noted",
                            "docs": [
                                "A preimage has been noted."
                            ],
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "hash"
                            ],
                            "args_type_name": [
                                "Hash"
                            ]
                        },
                        {
                            "lookup": "1701",
                            "name": "Requested",
                            "docs": [
                                "A preimage has been requested."
                            ],
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "hash"
                            ],
                            "args_type_name": [
                                "Hash"
                            ]
                        },
                        {
                            "lookup": "1702",
                            "name": "Cleared",
                            "docs": [
                                "A preimage has ben cleared."
                            ],
                            "args": [
                                "H256"
                            ],
                            "args_name": [
                                "hash"
                            ],
                            "args_type_name": [
                                "Hash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 292
                    },
                    "errors": [
                        {
                            "name": "TooBig",
                            "doc": [
                                "Preimage is too large to store on-chain."
                            ]
                        },
                        {
                            "name": "AlreadyNoted",
                            "doc": [
                                "Preimage has already been noted on-chain."
                            ]
                        },
                        {
                            "name": "NotAuthorized",
                            "doc": [
                                "The user is not authorized to perform this action."
                            ]
                        },
                        {
                            "name": "NotNoted",
                            "doc": [
                                "The preimage cannot be removed since it has not yet been noted."
                            ]
                        },
                        {
                            "name": "Requested",
                            "doc": [
                                "A preimage may not be removed when there are outstanding requests."
                            ]
                        },
                        {
                            "name": "NotRequested",
                            "doc": [
                                "The preimage request cannot be removed since no outstanding requests exist."
                            ]
                        },
                        {
                            "name": "TooMany",
                            "doc": [
                                "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
                            ]
                        },
                        {
                            "name": "TooFew",
                            "doc": [
                                "Too few hashes were requested to be upgraded (i.e. zero)."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 489
                    },
                    "index": 23
                },
                {
                    "name": "Identity",
                    "prefix": "Identity",
                    "storage": [
                        {
                            "name": "IdentityOf",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_identity:types:Registration",
                                    "keys_id": 0,
                                    "value_id": 490
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Information that is pertinent to identify the entity behind an account.",
                                "",
                                "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
                            ]
                        },
                        {
                            "name": "SuperOf",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Tuple:AccountIdpallet_identity:types:Data",
                                    "keys_id": 0,
                                    "value_id": 177
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                                " context. If the account is not some other account's sub-identity, then just `None`."
                            ]
                        },
                        {
                            "name": "SubsOf",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Tuple:U128bounded_collections:bounded_vec:BoundedVec@495",
                                    "keys_id": 0,
                                    "value_id": 494
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000",
                            "docs": [
                                " Alternative \"sub\" identities of this account.",
                                "",
                                " The first item is the deposit, the second is a vector of the accounts.",
                                "",
                                "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
                            ]
                        },
                        {
                            "name": "Registrars",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<option<pallet_identity:types:RegistrarInfo>>",
                                "PlainTypeValue": 496
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The set of registrars. Not expected to get very big as can only be added through a",
                                " special origin (likely a council motion).",
                                "",
                                " The index into this can be cast to `RegistrarIndex` to get a valid value."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1800",
                            "name": "add_registrar",
                            "docs": [
                                "See [`Pallet::add_registrar`]."
                            ],
                            "args": [
                                {
                                    "name": "account",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1801",
                            "name": "set_identity",
                            "docs": [
                                "See [`Pallet::set_identity`]."
                            ],
                            "args": [
                                {
                                    "name": "info",
                                    "type": "pallet_identity:types:IdentityInfo",
                                    "type_name": "Box<IdentityInfo<MaxAdditionalFields>>"
                                }
                            ]
                        },
                        {
                            "lookup": "1802",
                            "name": "set_subs",
                            "docs": [
                                "See [`Pallet::set_subs`]."
                            ],
                            "args": [
                                {
                                    "name": "subs",
                                    "type": "Vec<Tuple:AccountIdpallet_identity:types:Data>",
                                    "type_name": "Vec<(AccountId, Data)>"
                                }
                            ]
                        },
                        {
                            "lookup": "1803",
                            "name": "clear_identity",
                            "docs": [
                                "See [`Pallet::clear_identity`]."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "1804",
                            "name": "request_judgement",
                            "docs": [
                                "See [`Pallet::request_judgement`]."
                            ],
                            "args": [
                                {
                                    "name": "reg_index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "max_fee",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1805",
                            "name": "cancel_request",
                            "docs": [
                                "See [`Pallet::cancel_request`]."
                            ],
                            "args": [
                                {
                                    "name": "reg_index",
                                    "type": "U32",
                                    "type_name": "RegistrarIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1806",
                            "name": "set_fee",
                            "docs": [
                                "See [`Pallet::set_fee`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "fee",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1807",
                            "name": "set_account_id",
                            "docs": [
                                "See [`Pallet::set_account_id`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "new",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1808",
                            "name": "set_fields",
                            "docs": [
                                "See [`Pallet::set_fields`]."
                            ],
                            "args": [
                                {
                                    "name": "index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "fields",
                                    "type": "U64",
                                    "type_name": "IdentityFields"
                                }
                            ]
                        },
                        {
                            "lookup": "1809",
                            "name": "provide_judgement",
                            "docs": [
                                "See [`Pallet::provide_judgement`]."
                            ],
                            "args": [
                                {
                                    "name": "reg_index",
                                    "type": "compact<U32>",
                                    "type_name": "RegistrarIndex"
                                },
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "judgement",
                                    "type": "pallet_identity:types:Judgement",
                                    "type_name": "Judgement<BalanceOf>"
                                },
                                {
                                    "name": "identity",
                                    "type": "H256",
                                    "type_name": "Hash"
                                }
                            ]
                        },
                        {
                            "lookup": "180a",
                            "name": "kill_identity",
                            "docs": [
                                "See [`Pallet::kill_identity`]."
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "180b",
                            "name": "add_sub",
                            "docs": [
                                "See [`Pallet::add_sub`]."
                            ],
                            "args": [
                                {
                                    "name": "sub",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "data",
                                    "type": "pallet_identity:types:Data",
                                    "type_name": "Data"
                                }
                            ]
                        },
                        {
                            "lookup": "180c",
                            "name": "rename_sub",
                            "docs": [
                                "See [`Pallet::rename_sub`]."
                            ],
                            "args": [
                                {
                                    "name": "sub",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "data",
                                    "type": "pallet_identity:types:Data",
                                    "type_name": "Data"
                                }
                            ]
                        },
                        {
                            "lookup": "180d",
                            "name": "remove_sub",
                            "docs": [
                                "See [`Pallet::remove_sub`]."
                            ],
                            "args": [
                                {
                                    "name": "sub",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "180e",
                            "name": "quit_sub",
                            "docs": [
                                "See [`Pallet::quit_sub`]."
                            ],
                            "args": null
                        }
                    ],
                    "calls_value": {
                        "type": 139
                    },
                    "events": [
                        {
                            "lookup": "1800",
                            "name": "IdentitySet",
                            "docs": [
                                "A name was set or reset (which will remove all judgements)."
                            ],
                            "args": [
                                "AccountId"
                            ],
                            "args_name": [
                                "who"
                            ],
                            "args_type_name": [
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1801",
                            "name": "IdentityCleared",
                            "docs": [
                                "A name was cleared, and the given balance returned."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1802",
                            "name": "IdentityKilled",
                            "docs": [
                                "A name was removed and the given balance slashed."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "who",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1803",
                            "name": "JudgementRequested",
                            "docs": [
                                "A judgement was asked from a registrar."
                            ],
                            "args": [
                                "AccountId",
                                "U32"
                            ],
                            "args_name": [
                                "who",
                                "registrar_index"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "RegistrarIndex"
                            ]
                        },
                        {
                            "lookup": "1804",
                            "name": "JudgementUnrequested",
                            "docs": [
                                "A judgement request was retracted."
                            ],
                            "args": [
                                "AccountId",
                                "U32"
                            ],
                            "args_name": [
                                "who",
                                "registrar_index"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "RegistrarIndex"
                            ]
                        },
                        {
                            "lookup": "1805",
                            "name": "JudgementGiven",
                            "docs": [
                                "A judgement was given by a registrar."
                            ],
                            "args": [
                                "AccountId",
                                "U32"
                            ],
                            "args_name": [
                                "target",
                                "registrar_index"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "RegistrarIndex"
                            ]
                        },
                        {
                            "lookup": "1806",
                            "name": "RegistrarAdded",
                            "docs": [
                                "A registrar was added."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "registrar_index"
                            ],
                            "args_type_name": [
                                "RegistrarIndex"
                            ]
                        },
                        {
                            "lookup": "1807",
                            "name": "SubIdentityAdded",
                            "docs": [
                                "A sub-identity was added to an identity and the deposit paid."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "sub",
                                "main",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1808",
                            "name": "SubIdentityRemoved",
                            "docs": [
                                "A sub-identity was removed from an identity and the deposit freed."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "sub",
                                "main",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1809",
                            "name": "SubIdentityRevoked",
                            "docs": [
                                "A sub-identity was cleared, and the given deposit repatriated from the",
                                "main identity account to the sub-identity account."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "sub",
                                "main",
                                "deposit"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "BalanceOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 293
                    },
                    "constants": [
                        {
                            "name": "BasicDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00407a10f35a00000000000000000000",
                            "docs": [
                                " The amount held on deposit for a registered identity"
                            ]
                        },
                        {
                            "name": "FieldDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00901ec4bc1600000000000000000000",
                            "docs": [
                                " The amount held on deposit per additional field for a registered identity."
                            ]
                        },
                        {
                            "name": "SubAccountDeposit",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "0040e59c301200000000000000000000",
                            "docs": [
                                " The amount held on deposit for a registered subaccount. This should account for the fact",
                                " that one storage item's value will increase by the size of an account ID, and there will",
                                " be another trie item whose value is the size of an account ID plus 32 bytes."
                            ]
                        },
                        {
                            "name": "MaxSubAccounts",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " The maximum number of sub-accounts allowed per identified account."
                            ]
                        },
                        {
                            "name": "MaxAdditionalFields",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                                " required to access an identity, but can be pretty high."
                            ]
                        },
                        {
                            "name": "MaxRegistrars",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "14000000",
                            "docs": [
                                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                                " of, e.g., updating judgements."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "TooManySubAccounts",
                            "doc": [
                                "Too many subs-accounts."
                            ]
                        },
                        {
                            "name": "NotFound",
                            "doc": [
                                "Account isn't found."
                            ]
                        },
                        {
                            "name": "NotNamed",
                            "doc": [
                                "Account isn't named."
                            ]
                        },
                        {
                            "name": "EmptyIndex",
                            "doc": [
                                "Empty index."
                            ]
                        },
                        {
                            "name": "FeeChanged",
                            "doc": [
                                "Fee is changed."
                            ]
                        },
                        {
                            "name": "NoIdentity",
                            "doc": [
                                "No identity found."
                            ]
                        },
                        {
                            "name": "StickyJudgement",
                            "doc": [
                                "Sticky judgement."
                            ]
                        },
                        {
                            "name": "JudgementGiven",
                            "doc": [
                                "Judgement given."
                            ]
                        },
                        {
                            "name": "InvalidJudgement",
                            "doc": [
                                "Invalid judgement."
                            ]
                        },
                        {
                            "name": "InvalidIndex",
                            "doc": [
                                "The index is invalid."
                            ]
                        },
                        {
                            "name": "InvalidTarget",
                            "doc": [
                                "The target is invalid."
                            ]
                        },
                        {
                            "name": "TooManyFields",
                            "doc": [
                                "Too many additional fields."
                            ]
                        },
                        {
                            "name": "TooManyRegistrars",
                            "doc": [
                                "Maximum amount of registrars reached. Cannot add any more."
                            ]
                        },
                        {
                            "name": "AlreadyClaimed",
                            "doc": [
                                "Account ID is already named."
                            ]
                        },
                        {
                            "name": "NotSub",
                            "doc": [
                                "Sender is not a sub-account."
                            ]
                        },
                        {
                            "name": "NotOwned",
                            "doc": [
                                "Sub-account isn't owned by sender."
                            ]
                        },
                        {
                            "name": "JudgementForDifferentIdentity",
                            "doc": [
                                "The provided judgement was for a different identity."
                            ]
                        },
                        {
                            "name": "JudgementPaymentFailed",
                            "doc": [
                                "Error that occurs when there is an issue paying for judgement."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 500
                    },
                    "index": 24
                },
                {
                    "name": "Proxy",
                    "prefix": "Proxy",
                    "storage": [
                        {
                            "name": "Proxies",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@502U128",
                                    "keys_id": 0,
                                    "value_id": 501
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000",
                            "docs": [
                                " The set of account proxies. Maps the account which has delegated to the accounts",
                                " which are being delegated to, together with the amount held on deposit."
                            ]
                        },
                        {
                            "name": "Announcements",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@506U128",
                                    "keys_id": 0,
                                    "value_id": 505
                                }
                            },
                            "fallback": "0x0000000000000000000000000000000000",
                            "docs": [
                                " The announcements made by the proxy (key)."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1900",
                            "name": "proxy",
                            "docs": [
                                "See [`Pallet::proxy`]."
                            ],
                            "args": [
                                {
                                    "name": "real",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "force_proxy_type",
                                    "type": "option<vara_runtime:ProxyType>",
                                    "type_name": "Option<ProxyType>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1901",
                            "name": "add_proxy",
                            "docs": [
                                "See [`Pallet::add_proxy`]."
                            ],
                            "args": [
                                {
                                    "name": "delegate",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "proxy_type",
                                    "type": "vara_runtime:ProxyType",
                                    "type_name": "ProxyType"
                                },
                                {
                                    "name": "delay",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                }
                            ]
                        },
                        {
                            "lookup": "1902",
                            "name": "remove_proxy",
                            "docs": [
                                "See [`Pallet::remove_proxy`]."
                            ],
                            "args": [
                                {
                                    "name": "delegate",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "proxy_type",
                                    "type": "vara_runtime:ProxyType",
                                    "type_name": "ProxyType"
                                },
                                {
                                    "name": "delay",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                }
                            ]
                        },
                        {
                            "lookup": "1903",
                            "name": "remove_proxies",
                            "docs": [
                                "See [`Pallet::remove_proxies`]."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "1904",
                            "name": "create_pure",
                            "docs": [
                                "See [`Pallet::create_pure`]."
                            ],
                            "args": [
                                {
                                    "name": "proxy_type",
                                    "type": "vara_runtime:ProxyType",
                                    "type_name": "ProxyType"
                                },
                                {
                                    "name": "delay",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                },
                                {
                                    "name": "index",
                                    "type": "U16",
                                    "type_name": "u16"
                                }
                            ]
                        },
                        {
                            "lookup": "1905",
                            "name": "kill_pure",
                            "docs": [
                                "See [`Pallet::kill_pure`]."
                            ],
                            "args": [
                                {
                                    "name": "spawner",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "proxy_type",
                                    "type": "vara_runtime:ProxyType",
                                    "type_name": "ProxyType"
                                },
                                {
                                    "name": "index",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "height",
                                    "type": "compact<U32>",
                                    "type_name": "BlockNumberFor"
                                },
                                {
                                    "name": "ext_index",
                                    "type": "compact<U32>",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "1906",
                            "name": "announce",
                            "docs": [
                                "See [`Pallet::announce`]."
                            ],
                            "args": [
                                {
                                    "name": "real",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": "CallHashOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1907",
                            "name": "remove_announcement",
                            "docs": [
                                "See [`Pallet::remove_announcement`]."
                            ],
                            "args": [
                                {
                                    "name": "real",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": "CallHashOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1908",
                            "name": "reject_announcement",
                            "docs": [
                                "See [`Pallet::reject_announcement`]."
                            ],
                            "args": [
                                {
                                    "name": "delegate",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "H256",
                                    "type_name": "CallHashOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1909",
                            "name": "proxy_announced",
                            "docs": [
                                "See [`Pallet::proxy_announced`]."
                            ],
                            "args": [
                                {
                                    "name": "delegate",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "real",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "force_proxy_type",
                                    "type": "option<vara_runtime:ProxyType>",
                                    "type_name": "Option<ProxyType>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 181
                    },
                    "events": [
                        {
                            "lookup": "1900",
                            "name": "ProxyExecuted",
                            "docs": [
                                "A proxy was executed correctly, with the given."
                            ],
                            "args": [
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "result"
                            ],
                            "args_type_name": [
                                "DispatchResult"
                            ]
                        },
                        {
                            "lookup": "1901",
                            "name": "PureCreated",
                            "docs": [
                                "A pure account has been created by new proxy with given",
                                "disambiguation index and proxy type."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "vara_runtime:ProxyType",
                                "U16"
                            ],
                            "args_name": [
                                "pure",
                                "who",
                                "proxy_type",
                                "disambiguation_index"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "ProxyType",
                                "u16"
                            ]
                        },
                        {
                            "lookup": "1902",
                            "name": "Announced",
                            "docs": [
                                "An announcement was placed to make a call in the future."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "H256"
                            ],
                            "args_name": [
                                "real",
                                "proxy",
                                "call_hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "CallHashOf"
                            ]
                        },
                        {
                            "lookup": "1903",
                            "name": "ProxyAdded",
                            "docs": [
                                "A proxy was added."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "vara_runtime:ProxyType",
                                "U32"
                            ],
                            "args_name": [
                                "delegator",
                                "delegatee",
                                "proxy_type",
                                "delay"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "ProxyType",
                                "BlockNumberFor"
                            ]
                        },
                        {
                            "lookup": "1904",
                            "name": "ProxyRemoved",
                            "docs": [
                                "A proxy was removed."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "vara_runtime:ProxyType",
                                "U32"
                            ],
                            "args_name": [
                                "delegator",
                                "delegatee",
                                "proxy_type",
                                "delay"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "ProxyType",
                                "BlockNumberFor"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 294
                    },
                    "constants": [
                        {
                            "name": "ProxyDepositBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "001843d5ba0500000000000000000000",
                            "docs": [
                                " The base amount of currency needed to reserve for creating a proxy.",
                                "",
                                " This is held for an additional storage item whose value size is",
                                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
                            ]
                        },
                        {
                            "name": "ProxyDepositFactor",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "0070f70b021200000000000000000000",
                            "docs": [
                                " The amount of currency needed per proxy added.",
                                "",
                                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                                " into account `32 + proxy_type.encode().len()` bytes of data."
                            ]
                        },
                        {
                            "name": "MaxProxies",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "20000000",
                            "docs": [
                                " The maximum amount of proxies allowed for a single account."
                            ]
                        },
                        {
                            "name": "MaxPending",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "20000000",
                            "docs": [
                                " The maximum amount of time-delayed announcements that are allowed to be pending."
                            ]
                        },
                        {
                            "name": "AnnouncementDepositBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "001843d5ba0500000000000000000000",
                            "docs": [
                                " The base amount of currency needed to reserve for creating an announcement.",
                                "",
                                " This is held when a new storage item holding a `Balance` is created (typically 16",
                                " bytes)."
                            ]
                        },
                        {
                            "name": "AnnouncementDepositFactor",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00e0ee17042400000000000000000000",
                            "docs": [
                                " The amount of currency needed per announcement made.",
                                "",
                                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                                " into a pre-existing storage value."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "TooMany",
                            "doc": [
                                "There are too many proxies registered or too many announcements pending."
                            ]
                        },
                        {
                            "name": "NotFound",
                            "doc": [
                                "Proxy registration not found."
                            ]
                        },
                        {
                            "name": "NotProxy",
                            "doc": [
                                "Sender is not a proxy of the account to be proxied."
                            ]
                        },
                        {
                            "name": "Unproxyable",
                            "doc": [
                                "A call which is incompatible with the proxy type's filter was attempted."
                            ]
                        },
                        {
                            "name": "Duplicate",
                            "doc": [
                                "Account is already a proxy."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "doc": [
                                "Call may not be made by proxy because it may escalate its privileges."
                            ]
                        },
                        {
                            "name": "Unannounced",
                            "doc": [
                                "Announcement, if made at all, was made too recently."
                            ]
                        },
                        {
                            "name": "NoSelfProxy",
                            "doc": [
                                "Cannot add self as proxy."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 509
                    },
                    "index": 25
                },
                {
                    "name": "Multisig",
                    "prefix": "Multisig",
                    "storage": [
                        {
                            "name": "Multisigs",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Blake2_128Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "[U8; 32]"
                                    ],
                                    "value": "pallet_multisig:Multisig",
                                    "keys_id": 510,
                                    "value_id": 511
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The set of open multisig operations."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1a00",
                            "name": "as_multi_threshold_1",
                            "docs": [
                                "See [`Pallet::as_multi_threshold_1`]."
                            ],
                            "args": [
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                }
                            ]
                        },
                        {
                            "lookup": "1a01",
                            "name": "as_multi",
                            "docs": [
                                "See [`Pallet::as_multi`]."
                            ],
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                },
                                {
                                    "name": "maybe_timepoint",
                                    "type": "option<pallet_multisig:Timepoint>",
                                    "type_name": "Option<Timepoint<BlockNumberFor>>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call",
                                    "type_name": "Box<<T as Config>::RuntimeCall>"
                                },
                                {
                                    "name": "max_weight",
                                    "type": "sp_weights:weight_v2:Weight",
                                    "type_name": "Weight"
                                }
                            ]
                        },
                        {
                            "lookup": "1a02",
                            "name": "approve_as_multi",
                            "docs": [
                                "See [`Pallet::approve_as_multi`]."
                            ],
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                },
                                {
                                    "name": "maybe_timepoint",
                                    "type": "option<pallet_multisig:Timepoint>",
                                    "type_name": "Option<Timepoint<BlockNumberFor>>"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "[U8; 32]",
                                    "type_name": "[u8; 32]"
                                },
                                {
                                    "name": "max_weight",
                                    "type": "sp_weights:weight_v2:Weight",
                                    "type_name": "Weight"
                                }
                            ]
                        },
                        {
                            "lookup": "1a03",
                            "name": "cancel_as_multi",
                            "docs": [
                                "See [`Pallet::cancel_as_multi`]."
                            ],
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "U16",
                                    "type_name": "u16"
                                },
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                },
                                {
                                    "name": "timepoint",
                                    "type": "pallet_multisig:Timepoint",
                                    "type_name": "Timepoint<BlockNumberFor>"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "[U8; 32]",
                                    "type_name": "[u8; 32]"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 184
                    },
                    "events": [
                        {
                            "lookup": "1a00",
                            "name": "NewMultisig",
                            "docs": [
                                "A new multisig operation has begun."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "approving",
                                "multisig",
                                "call_hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "AccountId",
                                "CallHash"
                            ]
                        },
                        {
                            "lookup": "1a01",
                            "name": "MultisigApproval",
                            "docs": [
                                "A multisig operation has been approved by someone."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_multisig:Timepoint",
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "approving",
                                "timepoint",
                                "multisig",
                                "call_hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Timepoint<BlockNumberFor>",
                                "AccountId",
                                "CallHash"
                            ]
                        },
                        {
                            "lookup": "1a02",
                            "name": "MultisigExecuted",
                            "docs": [
                                "A multisig operation has been executed."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_multisig:Timepoint",
                                "AccountId",
                                "[U8; 32]",
                                "Result<NULL,sp_runtime:DispatchError>"
                            ],
                            "args_name": [
                                "approving",
                                "timepoint",
                                "multisig",
                                "call_hash",
                                "result"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Timepoint<BlockNumberFor>",
                                "AccountId",
                                "CallHash",
                                "DispatchResult"
                            ]
                        },
                        {
                            "lookup": "1a03",
                            "name": "MultisigCancelled",
                            "docs": [
                                "A multisig operation has been cancelled."
                            ],
                            "args": [
                                "AccountId",
                                "pallet_multisig:Timepoint",
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "cancelling",
                                "timepoint",
                                "multisig",
                                "call_hash"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "Timepoint<BlockNumberFor>",
                                "AccountId",
                                "CallHash"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 295
                    },
                    "constants": [
                        {
                            "name": "DepositBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "001836b4623100000000000000000000",
                            "docs": [
                                " The base amount of currency needed to reserve for creating a multisig execution or to",
                                " store a dispatch call for later.",
                                "",
                                " This is held for an additional storage item whose value size is",
                                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                                " `32 + sizeof(AccountId)` bytes."
                            ]
                        },
                        {
                            "name": "DepositFactor",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00002e59761100000000000000000000",
                            "docs": [
                                " The amount of currency needed per unit threshold when creating a multisig execution.",
                                "",
                                " This is held for adding 32 bytes more into a pre-existing storage value."
                            ]
                        },
                        {
                            "name": "MaxSignatories",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "64000000",
                            "docs": [
                                " The maximum amount of signatories allowed in the multisig."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "MinimumThreshold",
                            "doc": [
                                "Threshold must be 2 or greater."
                            ]
                        },
                        {
                            "name": "AlreadyApproved",
                            "doc": [
                                "Call is already approved by this signatory."
                            ]
                        },
                        {
                            "name": "NoApprovalsNeeded",
                            "doc": [
                                "Call doesn't need any (more) approvals."
                            ]
                        },
                        {
                            "name": "TooFewSignatories",
                            "doc": [
                                "There are too few signatories in the list."
                            ]
                        },
                        {
                            "name": "TooManySignatories",
                            "doc": [
                                "There are too many signatories in the list."
                            ]
                        },
                        {
                            "name": "SignatoriesOutOfOrder",
                            "doc": [
                                "The signatories were provided out of order; they should be ordered."
                            ]
                        },
                        {
                            "name": "SenderInSignatories",
                            "doc": [
                                "The sender was contained in the other signatories; it shouldn't be."
                            ]
                        },
                        {
                            "name": "NotFound",
                            "doc": [
                                "Multisig operation not found when attempting to cancel."
                            ]
                        },
                        {
                            "name": "NotOwner",
                            "doc": [
                                "Only the account that originally created the multisig is able to cancel it."
                            ]
                        },
                        {
                            "name": "NoTimepoint",
                            "doc": [
                                "No timepoint was given, yet the multisig operation is already underway."
                            ]
                        },
                        {
                            "name": "WrongTimepoint",
                            "doc": [
                                "A different timepoint was given to the multisig operation that is underway."
                            ]
                        },
                        {
                            "name": "UnexpectedTimepoint",
                            "doc": [
                                "A timepoint was given, yet no multisig operation is underway."
                            ]
                        },
                        {
                            "name": "MaxWeightTooLow",
                            "doc": [
                                "The maximum weight information provided was too low."
                            ]
                        },
                        {
                            "name": "AlreadyStored",
                            "doc": [
                                "The data to be stored is already stored."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 513
                    },
                    "index": 26
                },
                {
                    "name": "ElectionProviderMultiPhase",
                    "prefix": "ElectionProviderMultiPhase",
                    "storage": [
                        {
                            "name": "Round",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x01000000",
                            "docs": [
                                " Internal counter for the number of rounds.",
                                "",
                                " This is useful for de-duplication of transactions submitted to the pool, and general",
                                " diagnostics of the pallet.",
                                "",
                                " This is merely incremented once per every time that an upstream `elect` is called."
                            ]
                        },
                        {
                            "name": "CurrentPhase",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_election_provider_multi_phase:Phase",
                                "PlainTypeValue": 298
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Current phase."
                            ]
                        },
                        {
                            "name": "QueuedSolution",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_election_provider_multi_phase:ReadySolution",
                                "PlainTypeValue": 514
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
                                "",
                                " Always sorted by score."
                            ]
                        },
                        {
                            "name": "Snapshot",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_election_provider_multi_phase:RoundSnapshot",
                                "PlainTypeValue": 516
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Snapshot data of the round.",
                                "",
                                " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                            ]
                        },
                        {
                            "name": "DesiredTargets",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Desired number of targets to elect for this round.",
                                "",
                                " Only exists when [`Snapshot`] is present."
                            ]
                        },
                        {
                            "name": "SnapshotMetadata",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "pallet_election_provider_multi_phase:SolutionOrSnapshotSize",
                                "PlainTypeValue": 241
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The metadata of the [`RoundSnapshot`]",
                                "",
                                " Only exists when [`Snapshot`] is present."
                            ]
                        },
                        {
                            "name": "SignedSubmissionNextIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The next index to be assigned to an incoming signed submission.",
                                "",
                                " Every accepted submission is assigned a unique index; that index is bound to that particular",
                                " submission for the duration of the election. On election finalization, the next index is",
                                " reset to 0.",
                                "",
                                " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                                " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                                " because iteration is slow. Instead, we store the value here."
                            ]
                        },
                        {
                            "name": "SignedSubmissionIndices",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<Tuple:sp_npos_elections:ElectionScoreU32U32>",
                                "PlainTypeValue": 519
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                                " value in `SignedSubmissions`.",
                                "",
                                " We never need to process more than a single signed submission at a time. Signed submissions",
                                " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                                " them one at a time instead of reading and decoding all of them at once."
                            ]
                        },
                        {
                            "name": "SignedSubmissionsMap",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_election_provider_multi_phase:signed:SignedSubmission",
                                    "keys_id": 4,
                                    "value_id": 522
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Unchecked, signed solutions.",
                                "",
                                " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                                " allowing us to keep only a single one in memory at a time.",
                                "",
                                " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                                " affect; we shouldn't need a cryptographically secure hasher."
                            ]
                        },
                        {
                            "name": "MinimumUntrustedScore",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "sp_npos_elections:ElectionScore",
                                "PlainTypeValue": 240
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The minimum score that each 'untrusted' solution must attain in order to be considered",
                                " feasible.",
                                "",
                                " Can be set via `set_minimum_untrusted_score`."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1b00",
                            "name": "submit_unsigned",
                            "docs": [
                                "See [`Pallet::submit_unsigned`]."
                            ],
                            "args": [
                                {
                                    "name": "raw_solution",
                                    "type": "pallet_election_provider_multi_phase:RawSolution",
                                    "type_name": "Box<RawSolution<SolutionOf<MinerConfig>>>"
                                },
                                {
                                    "name": "witness",
                                    "type": "pallet_election_provider_multi_phase:SolutionOrSnapshotSize",
                                    "type_name": "SolutionOrSnapshotSize"
                                }
                            ]
                        },
                        {
                            "lookup": "1b01",
                            "name": "set_minimum_untrusted_score",
                            "docs": [
                                "See [`Pallet::set_minimum_untrusted_score`]."
                            ],
                            "args": [
                                {
                                    "name": "maybe_next_score",
                                    "type": "option<sp_npos_elections:ElectionScore>",
                                    "type_name": "Option<ElectionScore>"
                                }
                            ]
                        },
                        {
                            "lookup": "1b02",
                            "name": "set_emergency_election_result",
                            "docs": [
                                "See [`Pallet::set_emergency_election_result`]."
                            ],
                            "args": [
                                {
                                    "name": "supports",
                                    "type": "Vec<Tuple:AccountIdsp_npos_elections:Support>",
                                    "type_name": "Supports<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "1b03",
                            "name": "submit",
                            "docs": [
                                "See [`Pallet::submit`]."
                            ],
                            "args": [
                                {
                                    "name": "raw_solution",
                                    "type": "pallet_election_provider_multi_phase:RawSolution",
                                    "type_name": "Box<RawSolution<SolutionOf<MinerConfig>>>"
                                }
                            ]
                        },
                        {
                            "lookup": "1b04",
                            "name": "governance_fallback",
                            "docs": [
                                "See [`Pallet::governance_fallback`]."
                            ],
                            "args": [
                                {
                                    "name": "maybe_max_voters",
                                    "type": "option<U32>",
                                    "type_name": "Option<u32>"
                                },
                                {
                                    "name": "maybe_max_targets",
                                    "type": "option<U32>",
                                    "type_name": "Option<u32>"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 187
                    },
                    "events": [
                        {
                            "lookup": "1b00",
                            "name": "SolutionStored",
                            "docs": [
                                "A solution was stored with the given compute.",
                                "",
                                "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
                                "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
                                "Otherwise, the solution was stored either during the unsigned phase or by",
                                "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
                                "room for this one."
                            ],
                            "args": [
                                "pallet_election_provider_multi_phase:ElectionCompute",
                                "option<AccountId>",
                                "Bool"
                            ],
                            "args_name": [
                                "compute",
                                "origin",
                                "prev_ejected"
                            ],
                            "args_type_name": [
                                "ElectionCompute",
                                "Option<AccountId>",
                                "bool"
                            ]
                        },
                        {
                            "lookup": "1b01",
                            "name": "ElectionFinalized",
                            "docs": [
                                "The election has been finalized, with the given computation and score."
                            ],
                            "args": [
                                "pallet_election_provider_multi_phase:ElectionCompute",
                                "sp_npos_elections:ElectionScore"
                            ],
                            "args_name": [
                                "compute",
                                "score"
                            ],
                            "args_type_name": [
                                "ElectionCompute",
                                "ElectionScore"
                            ]
                        },
                        {
                            "lookup": "1b02",
                            "name": "ElectionFailed",
                            "docs": [
                                "An election failed.",
                                "",
                                "Not much can be said about which computes failed in the process."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "1b03",
                            "name": "Rewarded",
                            "docs": [
                                "An account has been rewarded for their signed submission being finalized."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "value"
                            ],
                            "args_type_name": [
                                "<T as frame_system::Config>::AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1b04",
                            "name": "Slashed",
                            "docs": [
                                "An account has been slashed for submitting an invalid signed submission."
                            ],
                            "args": [
                                "AccountId",
                                "U128"
                            ],
                            "args_name": [
                                "account",
                                "value"
                            ],
                            "args_type_name": [
                                "<T as frame_system::Config>::AccountId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1b05",
                            "name": "PhaseTransitioned",
                            "docs": [
                                "There was a phase transition in a given round."
                            ],
                            "args": [
                                "pallet_election_provider_multi_phase:Phase",
                                "pallet_election_provider_multi_phase:Phase",
                                "U32"
                            ],
                            "args_name": [
                                "from",
                                "to",
                                "round"
                            ],
                            "args_type_name": [
                                "Phase<BlockNumberFor>",
                                "Phase<BlockNumberFor>",
                                "u32"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 296
                    },
                    "constants": [
                        {
                            "name": "UnsignedPhase",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "58020000",
                            "docs": [
                                " Duration of the unsigned phase."
                            ]
                        },
                        {
                            "name": "SignedPhase",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "58020000",
                            "docs": [
                                " Duration of the signed phase."
                            ]
                        },
                        {
                            "name": "BetterSignedThreshold",
                            "type": "U32",
                            "type_value": 51,
                            "constants_value": "00000000",
                            "docs": [
                                " The minimum amount of improvement to the solution score that defines a solution as",
                                " \"better\" in the Signed phase."
                            ]
                        },
                        {
                            "name": "BetterUnsignedThreshold",
                            "type": "U32",
                            "type_value": 51,
                            "constants_value": "a0860100",
                            "docs": [
                                " The minimum amount of improvement to the solution score that defines a solution as",
                                " \"better\" in the Unsigned phase."
                            ]
                        },
                        {
                            "name": "OffchainRepeat",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "25000000",
                            "docs": [
                                " The repeat threshold of the offchain worker.",
                                "",
                                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                                " to submit the worker's solution."
                            ]
                        },
                        {
                            "name": "MinerTxPriority",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "feffffffffffff7f",
                            "docs": [
                                " The priority of the unsigned transaction submitted in the unsigned-phase"
                            ]
                        },
                        {
                            "name": "SignedMaxSubmissions",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "0a000000",
                            "docs": [
                                " Maximum number of signed submissions that can be queued.",
                                "",
                                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                                " update this value during an election, you _must_ ensure that",
                                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                                " attempts to submit new solutions may cause a runtime panic."
                            ]
                        },
                        {
                            "name": "SignedMaxWeight",
                            "type": "sp_weights:weight_v2:Weight",
                            "type_value": 9,
                            "constants_value": "071059531a3313ec51b81e85eb5138",
                            "docs": [
                                " Maximum weight of a signed solution.",
                                "",
                                " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
                                " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
                                " this value."
                            ]
                        },
                        {
                            "name": "SignedMaxRefunds",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "03000000",
                            "docs": [
                                " The maximum amount of unchecked solutions to refund the call fee for."
                            ]
                        },
                        {
                            "name": "SignedRewardBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00a0724e180900000000000000000000",
                            "docs": [
                                " Base reward for a signed solution"
                            ]
                        },
                        {
                            "name": "SignedDepositByte",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00e87648170000000000000000000000",
                            "docs": [
                                " Per-byte deposit for a signed solution."
                            ]
                        },
                        {
                            "name": "SignedDepositWeight",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00000000000000000000000000000000",
                            "docs": [
                                " Per-weight deposit for a signed solution."
                            ]
                        },
                        {
                            "name": "MaxWinners",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "e8030000",
                            "docs": [
                                " The maximum number of winners that can be elected by this `ElectionProvider`",
                                " implementation.",
                                "",
                                " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
                            ]
                        },
                        {
                            "name": "MinerMaxLength",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00001200",
                            "docs": null
                        },
                        {
                            "name": "MinerMaxWeight",
                            "type": "sp_weights:weight_v2:Weight",
                            "type_value": 9,
                            "constants_value": "071059531a3313ec51b81e85eb5138",
                            "docs": null
                        },
                        {
                            "name": "MinerMaxVotesPerVoter",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "10000000",
                            "docs": null
                        },
                        {
                            "name": "MinerMaxWinners",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "e8030000",
                            "docs": null
                        }
                    ],
                    "errors": [
                        {
                            "name": "PreDispatchEarlySubmission",
                            "doc": [
                                "Submission was too early."
                            ]
                        },
                        {
                            "name": "PreDispatchWrongWinnerCount",
                            "doc": [
                                "Wrong number of winners presented."
                            ]
                        },
                        {
                            "name": "PreDispatchWeakSubmission",
                            "doc": [
                                "Submission was too weak, score-wise."
                            ]
                        },
                        {
                            "name": "SignedQueueFull",
                            "doc": [
                                "The queue was full, and the solution was not better than any of the existing ones."
                            ]
                        },
                        {
                            "name": "SignedCannotPayDeposit",
                            "doc": [
                                "The origin failed to pay the deposit."
                            ]
                        },
                        {
                            "name": "SignedInvalidWitness",
                            "doc": [
                                "Witness data to dispatchable is invalid."
                            ]
                        },
                        {
                            "name": "SignedTooMuchWeight",
                            "doc": [
                                "The signed submission consumes too much weight"
                            ]
                        },
                        {
                            "name": "OcwCallWrongEra",
                            "doc": [
                                "OCW submitted solution for wrong round"
                            ]
                        },
                        {
                            "name": "MissingSnapshotMetadata",
                            "doc": [
                                "Snapshot metadata should exist but didn't."
                            ]
                        },
                        {
                            "name": "InvalidSubmissionIndex",
                            "doc": [
                                "`Self::insert_submission` returned an invalid index."
                            ]
                        },
                        {
                            "name": "CallNotAllowed",
                            "doc": [
                                "The call is not allowed at this point."
                            ]
                        },
                        {
                            "name": "FallbackFailed",
                            "doc": [
                                "The fallback failed"
                            ]
                        },
                        {
                            "name": "BoundNotMet",
                            "doc": [
                                "Some bound not met"
                            ]
                        },
                        {
                            "name": "TooManyWinners",
                            "doc": [
                                "Submitted solution has too many winners"
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 523
                    },
                    "index": 27
                },
                {
                    "name": "Offences",
                    "prefix": "Offences",
                    "storage": [
                        {
                            "name": "Reports",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "H256"
                                    ],
                                    "value": "sp_staking:offence:OffenceDetails",
                                    "keys_id": 12,
                                    "value_id": 524
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The primary structure that holds all offence records keyed by report identifiers."
                            ]
                        },
                        {
                            "name": "ConcurrentReportsIndex",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "[U8; 16]",
                                        "Vec<U8>"
                                    ],
                                    "value": "Vec<H256>",
                                    "keys_id": 525,
                                    "value_id": 138
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A vector of reports of the same kind that happened at the same time slot."
                            ]
                        }
                    ],
                    "events": [
                        {
                            "lookup": "1c00",
                            "name": "Offence",
                            "docs": [
                                "There is an offence reported of the given `kind` happened at the `session_index` and",
                                "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                                "\\[kind, timeslot\\]."
                            ],
                            "args": [
                                "[U8; 16]",
                                "Vec<U8>"
                            ],
                            "args_name": [
                                "kind",
                                "timeslot"
                            ],
                            "args_type_name": [
                                "Kind",
                                "OpaqueTimeSlot"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 300
                    },
                    "errors": null,
                    "errors_value": null,
                    "index": 28
                },
                {
                    "name": "Bounties",
                    "prefix": "Bounties",
                    "storage": [
                        {
                            "name": "BountyCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Number of bounty proposals that have been made."
                            ]
                        },
                        {
                            "name": "Bounties",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_bounties:Bounty",
                                    "keys_id": 4,
                                    "value_id": 526
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Bounties that have been made."
                            ]
                        },
                        {
                            "name": "BountyDescriptions",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": 528
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The description of each bounty."
                            ]
                        },
                        {
                            "name": "BountyApprovals",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<U32>",
                                "PlainTypeValue": 430
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Bounty indices that have been approved but not yet funded."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1d00",
                            "name": "propose_bounty",
                            "docs": [
                                "See [`Pallet::propose_bounty`]."
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "description",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "1d01",
                            "name": "approve_bounty",
                            "docs": [
                                "See [`Pallet::approve_bounty`]."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d02",
                            "name": "propose_curator",
                            "docs": [
                                "See [`Pallet::propose_curator`]."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "curator",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "fee",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1d03",
                            "name": "unassign_curator",
                            "docs": [
                                "See [`Pallet::unassign_curator`]."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d04",
                            "name": "accept_curator",
                            "docs": [
                                "See [`Pallet::accept_curator`]."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d05",
                            "name": "award_bounty",
                            "docs": [
                                "See [`Pallet::award_bounty`]."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "beneficiary",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1d06",
                            "name": "claim_bounty",
                            "docs": [
                                "See [`Pallet::claim_bounty`]."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d07",
                            "name": "close_bounty",
                            "docs": [
                                "See [`Pallet::close_bounty`]."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1d08",
                            "name": "extend_bounty_expiry",
                            "docs": [
                                "See [`Pallet::extend_bounty_expiry`]."
                            ],
                            "args": [
                                {
                                    "name": "bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "remark",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 249
                    },
                    "events": [
                        {
                            "lookup": "1d00",
                            "name": "BountyProposed",
                            "docs": [
                                "New bounty proposal."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1d01",
                            "name": "BountyRejected",
                            "docs": [
                                "A bounty proposal was rejected; funds were slashed."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "index",
                                "bond"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1d02",
                            "name": "BountyBecameActive",
                            "docs": [
                                "A bounty proposal is funded and became active."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1d03",
                            "name": "BountyAwarded",
                            "docs": [
                                "A bounty is awarded to a beneficiary."
                            ],
                            "args": [
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "index",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1d04",
                            "name": "BountyClaimed",
                            "docs": [
                                "A bounty is claimed by beneficiary."
                            ],
                            "args": [
                                "U32",
                                "U128",
                                "AccountId"
                            ],
                            "args_name": [
                                "index",
                                "payout",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BalanceOf",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1d05",
                            "name": "BountyCanceled",
                            "docs": [
                                "A bounty is cancelled."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1d06",
                            "name": "BountyExtended",
                            "docs": [
                                "A bounty expiry is extended."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "index"
                            ],
                            "args_type_name": [
                                "BountyIndex"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 301
                    },
                    "constants": [
                        {
                            "name": "BountyDepositBase",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00a0724e180900000000000000000000",
                            "docs": [
                                " The amount held on deposit for placing a bounty proposal."
                            ]
                        },
                        {
                            "name": "BountyDepositPayoutDelay",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80700000",
                            "docs": [
                                " The delay period for which a bounty beneficiary need to wait before claim the payout."
                            ]
                        },
                        {
                            "name": "BountyUpdatePeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00270600",
                            "docs": [
                                " Bounty duration in blocks."
                            ]
                        },
                        {
                            "name": "CuratorDepositMultiplier",
                            "type": "U32",
                            "type_value": 431,
                            "constants_value": "20a10700",
                            "docs": [
                                " The curator deposit is calculated as a percentage of the curator fee.",
                                "",
                                " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                                " `CuratorDepositMin`."
                            ]
                        },
                        {
                            "name": "CuratorDepositMax",
                            "type": "option<U128>",
                            "type_value": 275,
                            "constants_value": "010080c6a47e8d03000000000000000000",
                            "docs": [
                                " Maximum amount of funds that should be placed in a deposit for making a proposal."
                            ]
                        },
                        {
                            "name": "CuratorDepositMin",
                            "type": "option<U128>",
                            "type_value": 275,
                            "constants_value": "0100a0724e180900000000000000000000",
                            "docs": [
                                " Minimum amount of funds that should be placed in a deposit for making a proposal."
                            ]
                        },
                        {
                            "name": "BountyValueMinimum",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00203d88792d00000000000000000000",
                            "docs": [
                                " Minimum value for a bounty."
                            ]
                        },
                        {
                            "name": "DataDepositPerByte",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00e87648170000000000000000000000",
                            "docs": [
                                " The amount held on deposit per byte within the tip report reason or bounty description."
                            ]
                        },
                        {
                            "name": "MaximumReasonLength",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "2c010000",
                            "docs": [
                                " Maximum acceptable reason length.",
                                "",
                                " Benchmarks depend on this value, be sure to update weights file when changing this value"
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InsufficientProposersBalance",
                            "doc": [
                                "Proposer's balance is too low."
                            ]
                        },
                        {
                            "name": "InvalidIndex",
                            "doc": [
                                "No proposal or bounty at that index."
                            ]
                        },
                        {
                            "name": "ReasonTooBig",
                            "doc": [
                                "The reason given is just too big."
                            ]
                        },
                        {
                            "name": "UnexpectedStatus",
                            "doc": [
                                "The bounty status is unexpected."
                            ]
                        },
                        {
                            "name": "RequireCurator",
                            "doc": [
                                "Require bounty curator."
                            ]
                        },
                        {
                            "name": "InvalidValue",
                            "doc": [
                                "Invalid bounty value."
                            ]
                        },
                        {
                            "name": "InvalidFee",
                            "doc": [
                                "Invalid bounty fee."
                            ]
                        },
                        {
                            "name": "PendingPayout",
                            "doc": [
                                "A bounty payout is pending.",
                                "To cancel the bounty, you must unassign and slash the curator."
                            ]
                        },
                        {
                            "name": "Premature",
                            "doc": [
                                "The bounties cannot be claimed/closed because it's still in the countdown period."
                            ]
                        },
                        {
                            "name": "HasActiveChildBounty",
                            "doc": [
                                "The bounty cannot be closed because it has active child bounties."
                            ]
                        },
                        {
                            "name": "TooManyQueued",
                            "doc": [
                                "Too many approvals are already queued."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 529
                    },
                    "index": 29
                },
                {
                    "name": "ChildBounties",
                    "prefix": "ChildBounties",
                    "storage": [
                        {
                            "name": "ChildBountyCount",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Number of total child bounties."
                            ]
                        },
                        {
                            "name": "ParentChildBounties",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U32",
                                    "keys_id": 4,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Number of child bounties per parent bounty.",
                                " Map of parent bounty index to number of child bounties."
                            ]
                        },
                        {
                            "name": "ChildBounties",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat",
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "U32"
                                    ],
                                    "value": "pallet_child_bounties:ChildBounty",
                                    "keys_id": 136,
                                    "value_id": 530
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Child bounties that have been added."
                            ]
                        },
                        {
                            "name": "ChildBountyDescriptions",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": 528
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The description of each child-bounty."
                            ]
                        },
                        {
                            "name": "ChildrenCuratorFees",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "U128",
                                    "keys_id": 4,
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " The cumulative child-bounty curator fee for each parent bounty."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1e00",
                            "name": "add_child_bounty",
                            "docs": [
                                "See [`Pallet::add_child_bounty`]."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "value",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "description",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "1e01",
                            "name": "propose_curator",
                            "docs": [
                                "See [`Pallet::propose_curator`]."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "curator",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "fee",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1e02",
                            "name": "accept_curator",
                            "docs": [
                                "See [`Pallet::accept_curator`]."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1e03",
                            "name": "unassign_curator",
                            "docs": [
                                "See [`Pallet::unassign_curator`]."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1e04",
                            "name": "award_child_bounty",
                            "docs": [
                                "See [`Pallet::award_child_bounty`]."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "beneficiary",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1e05",
                            "name": "claim_child_bounty",
                            "docs": [
                                "See [`Pallet::claim_child_bounty`]."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        },
                        {
                            "lookup": "1e06",
                            "name": "close_child_bounty",
                            "docs": [
                                "See [`Pallet::close_child_bounty`]."
                            ],
                            "args": [
                                {
                                    "name": "parent_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                },
                                {
                                    "name": "child_bounty_id",
                                    "type": "compact<U32>",
                                    "type_name": "BountyIndex"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 250
                    },
                    "events": [
                        {
                            "lookup": "1e00",
                            "name": "Added",
                            "docs": [
                                "A child-bounty is added."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "index",
                                "child_index"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BountyIndex"
                            ]
                        },
                        {
                            "lookup": "1e01",
                            "name": "Awarded",
                            "docs": [
                                "A child-bounty is awarded to a beneficiary."
                            ],
                            "args": [
                                "U32",
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "index",
                                "child_index",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BountyIndex",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1e02",
                            "name": "Claimed",
                            "docs": [
                                "A child-bounty is claimed by beneficiary."
                            ],
                            "args": [
                                "U32",
                                "U32",
                                "U128",
                                "AccountId"
                            ],
                            "args_name": [
                                "index",
                                "child_index",
                                "payout",
                                "beneficiary"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BountyIndex",
                                "BalanceOf",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1e03",
                            "name": "Canceled",
                            "docs": [
                                "A child-bounty is cancelled."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "index",
                                "child_index"
                            ],
                            "args_type_name": [
                                "BountyIndex",
                                "BountyIndex"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 302
                    },
                    "constants": [
                        {
                            "name": "MaxActiveChildBountyCount",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "05000000",
                            "docs": [
                                " Maximum number of child bounties that can be added to a parent bounty."
                            ]
                        },
                        {
                            "name": "ChildBountyValueMinimum",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "00a0724e180900000000000000000000",
                            "docs": [
                                " Minimum value for a child-bounty."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "ParentBountyNotActive",
                            "doc": [
                                "The parent bounty is not in active state."
                            ]
                        },
                        {
                            "name": "InsufficientBountyBalance",
                            "doc": [
                                "The bounty balance is not enough to add new child-bounty."
                            ]
                        },
                        {
                            "name": "TooManyChildBounties",
                            "doc": [
                                "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 532
                    },
                    "index": 30
                },
                {
                    "name": "NominationPools",
                    "prefix": "NominationPools",
                    "storage": [
                        {
                            "name": "MinJoinBond",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " Minimum amount to bond to join a pool."
                            ]
                        },
                        {
                            "name": "MinCreateBond",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": [
                                " Minimum bond required to create a pool.",
                                "",
                                " This is the amount that the depositor must put as their initial stake in the pool, as an",
                                " indication of \"skin in the game\".",
                                "",
                                " This is the value that will always exist in the staking ledger of the pool bonded account",
                                " while all other accounts leave."
                            ]
                        },
                        {
                            "name": "MaxPools",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
                                " pools can exist."
                            ]
                        },
                        {
                            "name": "MaxPoolMembers",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Maximum number of members that can exist in the system. If `None`, then the count",
                                " members are not bound on a system wide basis."
                            ]
                        },
                        {
                            "name": "MaxPoolMembersPerPool",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Maximum number of members that may belong to pool. If `None`, then the count of",
                                " members is not bound on a per pool basis."
                            ]
                        },
                        {
                            "name": "GlobalMaxCommission",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 51
                            },
                            "fallback": "0x00",
                            "docs": [
                                " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                                " pool commissions that are > `GlobalMaxCommission`, necessary if a future",
                                " `GlobalMaxCommission` is lower than some current pool commissions."
                            ]
                        },
                        {
                            "name": "PoolMembers",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_nomination_pools:PoolMember",
                                    "keys_id": 0,
                                    "value_id": 533
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Active members.",
                                "",
                                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                            ]
                        },
                        {
                            "name": "CounterForPoolMembers",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "BondedPools",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_nomination_pools:BondedPoolInner",
                                    "keys_id": 4,
                                    "value_id": 536
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Storage for bonded pools."
                            ]
                        },
                        {
                            "name": "CounterForBondedPools",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "RewardPools",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_nomination_pools:RewardPool",
                                    "keys_id": 4,
                                    "value_id": 541
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
                                " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."
                            ]
                        },
                        {
                            "name": "CounterForRewardPools",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "SubPoolsStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "pallet_nomination_pools:SubPools",
                                    "keys_id": 4,
                                    "value_id": 542
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Groups of unbonding pools. Each group of unbonding pools belongs to a",
                                " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
                            ]
                        },
                        {
                            "name": "CounterForSubPoolsStorage",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "Metadata",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 4,
                                    "value_id": 548
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Metadata for the pool."
                            ]
                        },
                        {
                            "name": "CounterForMetadata",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "LastPoolId",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " Ever increasing number of all pools created so far."
                            ]
                        },
                        {
                            "name": "ReversePoolIdLookup",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "U32",
                                    "keys_id": 0,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A reverse lookup from the pool's account id to its id.",
                                "",
                                " This is only used for slashing. In all other instances, the pool id is used, and the",
                                " accounts are deterministically derived from it."
                            ]
                        },
                        {
                            "name": "CounterForReversePoolIdLookup",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "ClaimPermissions",
                            "modifier": "Default",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Twox64Concat"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_nomination_pools:ClaimPermission",
                                    "keys_id": 0,
                                    "value_id": 258
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Map from a pool member account to their opted claim permission."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "1f00",
                            "name": "join",
                            "docs": [
                                "See [`Pallet::join`]."
                            ],
                            "args": [
                                {
                                    "name": "amount",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                }
                            ]
                        },
                        {
                            "lookup": "1f01",
                            "name": "bond_extra",
                            "docs": [
                                "See [`Pallet::bond_extra`]."
                            ],
                            "args": [
                                {
                                    "name": "extra",
                                    "type": "pallet_nomination_pools:BondExtra",
                                    "type_name": "BondExtra<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f02",
                            "name": "claim_payout",
                            "docs": [
                                "See [`Pallet::claim_payout`]."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "1f03",
                            "name": "unbond",
                            "docs": [
                                "See [`Pallet::unbond`]."
                            ],
                            "args": [
                                {
                                    "name": "member_account",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "unbonding_points",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1f04",
                            "name": "pool_withdraw_unbonded",
                            "docs": [
                                "See [`Pallet::pool_withdraw_unbonded`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "1f05",
                            "name": "withdraw_unbonded",
                            "docs": [
                                "See [`Pallet::withdraw_unbonded`]."
                            ],
                            "args": [
                                {
                                    "name": "member_account",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "U32",
                                    "type_name": "u32"
                                }
                            ]
                        },
                        {
                            "lookup": "1f06",
                            "name": "create",
                            "docs": [
                                "See [`Pallet::create`]."
                            ],
                            "args": [
                                {
                                    "name": "amount",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "root",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "nominator",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "bouncer",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                }
                            ]
                        },
                        {
                            "lookup": "1f07",
                            "name": "create_with_pool_id",
                            "docs": [
                                "See [`Pallet::create_with_pool_id`]."
                            ],
                            "args": [
                                {
                                    "name": "amount",
                                    "type": "compact<U128>",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "root",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "nominator",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "bouncer",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                }
                            ]
                        },
                        {
                            "lookup": "1f08",
                            "name": "nominate",
                            "docs": [
                                "See [`Pallet::nominate`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "validators",
                                    "type": "Vec<AccountId>",
                                    "type_name": "Vec<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f09",
                            "name": "set_state",
                            "docs": [
                                "See [`Pallet::set_state`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "state",
                                    "type": "pallet_nomination_pools:PoolState",
                                    "type_name": "PoolState"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0a",
                            "name": "set_metadata",
                            "docs": [
                                "See [`Pallet::set_metadata`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "metadata",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0b",
                            "name": "set_configs",
                            "docs": [
                                "See [`Pallet::set_configs`]."
                            ],
                            "args": [
                                {
                                    "name": "min_join_bond",
                                    "type": "pallet_nomination_pools:ConfigOp@254",
                                    "type_name": "ConfigOp<BalanceOf>"
                                },
                                {
                                    "name": "min_create_bond",
                                    "type": "pallet_nomination_pools:ConfigOp@254",
                                    "type_name": "ConfigOp<BalanceOf>"
                                },
                                {
                                    "name": "max_pools",
                                    "type": "pallet_nomination_pools:ConfigOp@255",
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "max_members",
                                    "type": "pallet_nomination_pools:ConfigOp@255",
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "max_members_per_pool",
                                    "type": "pallet_nomination_pools:ConfigOp@255",
                                    "type_name": "ConfigOp<u32>"
                                },
                                {
                                    "name": "global_max_commission",
                                    "type": "pallet_nomination_pools:ConfigOp@256",
                                    "type_name": "ConfigOp<Perbill>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0c",
                            "name": "update_roles",
                            "docs": [
                                "See [`Pallet::update_roles`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "new_root",
                                    "type": "pallet_nomination_pools:ConfigOp@257",
                                    "type_name": "ConfigOp<AccountId>"
                                },
                                {
                                    "name": "new_nominator",
                                    "type": "pallet_nomination_pools:ConfigOp@257",
                                    "type_name": "ConfigOp<AccountId>"
                                },
                                {
                                    "name": "new_bouncer",
                                    "type": "pallet_nomination_pools:ConfigOp@257",
                                    "type_name": "ConfigOp<AccountId>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0d",
                            "name": "chill",
                            "docs": [
                                "See [`Pallet::chill`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0e",
                            "name": "bond_extra_other",
                            "docs": [
                                "See [`Pallet::bond_extra_other`]."
                            ],
                            "args": [
                                {
                                    "name": "member",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "extra",
                                    "type": "pallet_nomination_pools:BondExtra",
                                    "type_name": "BondExtra<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f0f",
                            "name": "set_claim_permission",
                            "docs": [
                                "See [`Pallet::set_claim_permission`]."
                            ],
                            "args": [
                                {
                                    "name": "permission",
                                    "type": "pallet_nomination_pools:ClaimPermission",
                                    "type_name": "ClaimPermission"
                                }
                            ]
                        },
                        {
                            "lookup": "1f10",
                            "name": "claim_payout_other",
                            "docs": [
                                "See [`Pallet::claim_payout_other`]."
                            ],
                            "args": [
                                {
                                    "name": "other",
                                    "type": "AccountId",
                                    "type_name": "AccountId"
                                }
                            ]
                        },
                        {
                            "lookup": "1f11",
                            "name": "set_commission",
                            "docs": [
                                "See [`Pallet::set_commission`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "new_commission",
                                    "type": "option<Tuple:U32AccountId>",
                                    "type_name": "Option<(Perbill, AccountId)>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f12",
                            "name": "set_commission_max",
                            "docs": [
                                "See [`Pallet::set_commission_max`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "max_commission",
                                    "type": "U32",
                                    "type_name": "Perbill"
                                }
                            ]
                        },
                        {
                            "lookup": "1f13",
                            "name": "set_commission_change_rate",
                            "docs": [
                                "See [`Pallet::set_commission_change_rate`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                },
                                {
                                    "name": "change_rate",
                                    "type": "pallet_nomination_pools:CommissionChangeRate",
                                    "type_name": "CommissionChangeRate<BlockNumberFor>"
                                }
                            ]
                        },
                        {
                            "lookup": "1f14",
                            "name": "claim_commission",
                            "docs": [
                                "See [`Pallet::claim_commission`]."
                            ],
                            "args": [
                                {
                                    "name": "pool_id",
                                    "type": "U32",
                                    "type_name": "PoolId"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 251
                    },
                    "events": [
                        {
                            "lookup": "1f00",
                            "name": "Created",
                            "docs": [
                                "A pool has been created."
                            ],
                            "args": [
                                "AccountId",
                                "U32"
                            ],
                            "args_name": [
                                "depositor",
                                "pool_id"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId"
                            ]
                        },
                        {
                            "lookup": "1f01",
                            "name": "Bonded",
                            "docs": [
                                "A member has became bonded in a pool."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U128",
                                "Bool"
                            ],
                            "args_name": [
                                "member",
                                "pool_id",
                                "bonded",
                                "joined"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId",
                                "BalanceOf",
                                "bool"
                            ]
                        },
                        {
                            "lookup": "1f02",
                            "name": "PaidOut",
                            "docs": [
                                "A payout has been made to a member."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "member",
                                "pool_id",
                                "payout"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f03",
                            "name": "Unbonded",
                            "docs": [
                                "A member has unbonded from their pool.",
                                "",
                                "- `balance` is the corresponding balance of the number of points that has been",
                                "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
                                "  pool.",
                                "- `points` is the number of points that are issued as a result of `balance` being",
                                "dissolved into the corresponding unbonding pool.",
                                "- `era` is the era in which the balance will be unbonded.",
                                "In the absence of slashing, these values will match. In the presence of slashing, the",
                                "number of points that are issued in the unbonding pool will be less than the amount",
                                "requested to be unbonded."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U128",
                                "U128",
                                "U32"
                            ],
                            "args_name": [
                                "member",
                                "pool_id",
                                "balance",
                                "points",
                                "era"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId",
                                "BalanceOf",
                                "BalanceOf",
                                "EraIndex"
                            ]
                        },
                        {
                            "lookup": "1f04",
                            "name": "Withdrawn",
                            "docs": [
                                "A member has withdrawn from their pool.",
                                "",
                                "The given number of `points` have been dissolved in return of `balance`.",
                                "",
                                "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
                                "will be 1."
                            ],
                            "args": [
                                "AccountId",
                                "U32",
                                "U128",
                                "U128"
                            ],
                            "args_name": [
                                "member",
                                "pool_id",
                                "balance",
                                "points"
                            ],
                            "args_type_name": [
                                "AccountId",
                                "PoolId",
                                "BalanceOf",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f05",
                            "name": "Destroyed",
                            "docs": [
                                "A pool has been destroyed."
                            ],
                            "args": [
                                "U32"
                            ],
                            "args_name": [
                                "pool_id"
                            ],
                            "args_type_name": [
                                "PoolId"
                            ]
                        },
                        {
                            "lookup": "1f06",
                            "name": "StateChanged",
                            "docs": [
                                "The state of a pool has changed"
                            ],
                            "args": [
                                "U32",
                                "pallet_nomination_pools:PoolState"
                            ],
                            "args_name": [
                                "pool_id",
                                "new_state"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "PoolState"
                            ]
                        },
                        {
                            "lookup": "1f07",
                            "name": "MemberRemoved",
                            "docs": [
                                "A member has been removed from a pool.",
                                "",
                                "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
                            ],
                            "args": [
                                "U32",
                                "AccountId"
                            ],
                            "args_name": [
                                "pool_id",
                                "member"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "AccountId"
                            ]
                        },
                        {
                            "lookup": "1f08",
                            "name": "RolesUpdated",
                            "docs": [
                                "The roles of a pool have been updated to the given new roles. Note that the depositor",
                                "can never change."
                            ],
                            "args": [
                                "option<AccountId>",
                                "option<AccountId>",
                                "option<AccountId>"
                            ],
                            "args_name": [
                                "root",
                                "bouncer",
                                "nominator"
                            ],
                            "args_type_name": [
                                "Option<AccountId>",
                                "Option<AccountId>",
                                "Option<AccountId>"
                            ]
                        },
                        {
                            "lookup": "1f09",
                            "name": "PoolSlashed",
                            "docs": [
                                "The active balance of pool `pool_id` has been slashed to `balance`."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "pool_id",
                                "balance"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f0a",
                            "name": "UnbondingPoolSlashed",
                            "docs": [
                                "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
                            ],
                            "args": [
                                "U32",
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "pool_id",
                                "era",
                                "balance"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "EraIndex",
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "1f0b",
                            "name": "PoolCommissionUpdated",
                            "docs": [
                                "A pool's commission setting has been changed."
                            ],
                            "args": [
                                "U32",
                                "option<Tuple:U32AccountId>"
                            ],
                            "args_name": [
                                "pool_id",
                                "current"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "Option<(Perbill, AccountId)>"
                            ]
                        },
                        {
                            "lookup": "1f0c",
                            "name": "PoolMaxCommissionUpdated",
                            "docs": [
                                "A pool's maximum commission setting has been changed."
                            ],
                            "args": [
                                "U32",
                                "U32"
                            ],
                            "args_name": [
                                "pool_id",
                                "max_commission"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "Perbill"
                            ]
                        },
                        {
                            "lookup": "1f0d",
                            "name": "PoolCommissionChangeRateUpdated",
                            "docs": [
                                "A pool's commission `change_rate` has been changed."
                            ],
                            "args": [
                                "U32",
                                "pallet_nomination_pools:CommissionChangeRate"
                            ],
                            "args_name": [
                                "pool_id",
                                "change_rate"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "CommissionChangeRate<BlockNumberFor>"
                            ]
                        },
                        {
                            "lookup": "1f0e",
                            "name": "PoolCommissionClaimed",
                            "docs": [
                                "Pool commission has been claimed."
                            ],
                            "args": [
                                "U32",
                                "U128"
                            ],
                            "args_name": [
                                "pool_id",
                                "commission"
                            ],
                            "args_type_name": [
                                "PoolId",
                                "BalanceOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 303
                    },
                    "constants": [
                        {
                            "name": "PalletId",
                            "type": "[U8; 8]",
                            "type_value": 432,
                            "constants_value": "70792f6e6f706c73",
                            "docs": [
                                " The nomination pool's pallet id."
                            ]
                        },
                        {
                            "name": "MaxPointsToBalance",
                            "type": "U8",
                            "type_value": 2,
                            "constants_value": "0a",
                            "docs": [
                                " The maximum pool points-to-balance ratio that an `open` pool can have.",
                                "",
                                " This is important in the event slashing takes place and the pool's points-to-balance",
                                " ratio becomes disproportional.",
                                "",
                                " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
                                " are a function of number of points, and by setting this value to e.g. 10, you ensure",
                                " that the total number of points in the system are at most 10 times the total_issuance of",
                                " the chain, in the absolute worse case.",
                                "",
                                " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
                                " Such a scenario would also be the equivalent of the pool being 90% slashed."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "PoolNotFound",
                            "doc": [
                                "A (bonded) pool id does not exist."
                            ]
                        },
                        {
                            "name": "PoolMemberNotFound",
                            "doc": [
                                "An account is not a member."
                            ]
                        },
                        {
                            "name": "RewardPoolNotFound",
                            "doc": [
                                "A reward pool does not exist. In all cases this is a system logic error."
                            ]
                        },
                        {
                            "name": "SubPoolsNotFound",
                            "doc": [
                                "A sub pool does not exist."
                            ]
                        },
                        {
                            "name": "AccountBelongsToOtherPool",
                            "doc": [
                                "An account is already delegating in another pool. An account may only belong to one",
                                "pool at a time."
                            ]
                        },
                        {
                            "name": "FullyUnbonding",
                            "doc": [
                                "The member is fully unbonded (and thus cannot access the bonded and reward pool",
                                "anymore to, for example, collect rewards)."
                            ]
                        },
                        {
                            "name": "MaxUnbondingLimit",
                            "doc": [
                                "The member cannot unbond further chunks due to reaching the limit."
                            ]
                        },
                        {
                            "name": "CannotWithdrawAny",
                            "doc": [
                                "None of the funds can be withdrawn yet because the bonding duration has not passed."
                            ]
                        },
                        {
                            "name": "MinimumBondNotMet",
                            "doc": [
                                "The amount does not meet the minimum bond to either join or create a pool.",
                                "",
                                "The depositor can never unbond to a value less than",
                                "`Pallet::depositor_min_bond`. The caller does not have nominating",
                                "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."
                            ]
                        },
                        {
                            "name": "OverflowRisk",
                            "doc": [
                                "The transaction could not be executed due to overflow risk for the pool."
                            ]
                        },
                        {
                            "name": "NotDestroying",
                            "doc": [
                                "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
                                "other members to be permissionlessly unbonded."
                            ]
                        },
                        {
                            "name": "NotNominator",
                            "doc": [
                                "The caller does not have nominating permissions for the pool."
                            ]
                        },
                        {
                            "name": "NotKickerOrDestroying",
                            "doc": [
                                "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
                            ]
                        },
                        {
                            "name": "NotOpen",
                            "doc": [
                                "The pool is not open to join"
                            ]
                        },
                        {
                            "name": "MaxPools",
                            "doc": [
                                "The system is maxed out on pools."
                            ]
                        },
                        {
                            "name": "MaxPoolMembers",
                            "doc": [
                                "Too many members in the pool or system."
                            ]
                        },
                        {
                            "name": "CanNotChangeState",
                            "doc": [
                                "The pools state cannot be changed."
                            ]
                        },
                        {
                            "name": "DoesNotHavePermission",
                            "doc": [
                                "The caller does not have adequate permissions."
                            ]
                        },
                        {
                            "name": "MetadataExceedsMaxLen",
                            "doc": [
                                "Metadata exceeds [`Config::MaxMetadataLen`]"
                            ]
                        },
                        {
                            "name": "Defensive",
                            "doc": [
                                "Some error occurred that should never happen. This should be reported to the",
                                "maintainers."
                            ],
                            "fields": [
                                {
                                    "type": "pallet_nomination_pools:pallet:DefensiveError",
                                    "type_name": "DefensiveError",
                                    "doc": null
                                }
                            ]
                        },
                        {
                            "name": "PartialUnbondNotAllowedPermissionlessly",
                            "doc": [
                                "Partial unbonding now allowed permissionlessly."
                            ]
                        },
                        {
                            "name": "MaxCommissionRestricted",
                            "doc": [
                                "The pool's max commission cannot be set higher than the existing value."
                            ]
                        },
                        {
                            "name": "CommissionExceedsMaximum",
                            "doc": [
                                "The supplied commission exceeds the max allowed commission."
                            ]
                        },
                        {
                            "name": "CommissionExceedsGlobalMaximum",
                            "doc": [
                                "The supplied commission exceeds global maximum commission."
                            ]
                        },
                        {
                            "name": "CommissionChangeThrottled",
                            "doc": [
                                "Not enough blocks have surpassed since the last commission update."
                            ]
                        },
                        {
                            "name": "CommissionChangeRateNotAllowed",
                            "doc": [
                                "The submitted changes to commission change rate are not allowed."
                            ]
                        },
                        {
                            "name": "NoPendingCommission",
                            "doc": [
                                "There is no pending commission to claim."
                            ]
                        },
                        {
                            "name": "NoCommissionCurrentSet",
                            "doc": [
                                "No commission current has been set."
                            ]
                        },
                        {
                            "name": "PoolIdInUse",
                            "doc": [
                                "Pool id currently in use."
                            ]
                        },
                        {
                            "name": "InvalidPoolId",
                            "doc": [
                                "Pool id provided is not correct/usable."
                            ]
                        },
                        {
                            "name": "BondExtraRestricted",
                            "doc": [
                                "Bonding extra is restricted to the exact pending reward amount."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 549
                    },
                    "index": 31
                },
                {
                    "name": "GearProgram",
                    "prefix": "GearProgram",
                    "storage": [
                        {
                            "name": "CodeStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "gear_core:code:instrumented:InstrumentedCode",
                                    "keys_id": 263,
                                    "value_id": 551
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "CodeLenStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "U32",
                                    "keys_id": 263,
                                    "value_id": 4
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "OriginalCodeStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 263,
                                    "value_id": 13
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "MetadataStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "gear_common:CodeMetadata",
                                    "keys_id": 263,
                                    "value_id": 558
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "ProgramStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "gear_common:Program",
                                    "keys_id": 264,
                                    "value_id": 559
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "MemoryPages",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]",
                                        "U32",
                                        "U32"
                                    ],
                                    "value": "Vec<U8>",
                                    "keys_id": 572,
                                    "value_id": 573
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "PausedProgramStorage",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "Tuple:U32H256",
                                    "keys_id": 264,
                                    "value_id": 575
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "ResumeSessionsNonce",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "ResumeSessions",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "U32"
                                    ],
                                    "value": "gear_common:paused_program_storage:ResumeSession",
                                    "keys_id": 4,
                                    "value_id": 576
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "errors": [
                        {
                            "name": "DuplicateItem",
                            "doc": null
                        },
                        {
                            "name": "ProgramNotFound",
                            "doc": null
                        },
                        {
                            "name": "NotActiveProgram",
                            "doc": null
                        },
                        {
                            "name": "CannotFindDataForPage",
                            "doc": null
                        },
                        {
                            "name": "ResumeSessionNotFound",
                            "doc": null
                        },
                        {
                            "name": "NotSessionOwner",
                            "doc": null
                        },
                        {
                            "name": "ResumeSessionFailed",
                            "doc": null
                        },
                        {
                            "name": "ProgramCodeNotFound",
                            "doc": null
                        },
                        {
                            "name": "DuplicateResumeSession",
                            "doc": null
                        }
                    ],
                    "errors_value": {
                        "type": 577
                    },
                    "index": 100
                },
                {
                    "name": "GearMessenger",
                    "prefix": "GearMessenger",
                    "storage": [
                        {
                            "name": "Dequeued",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Dispatches",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "gear_common:storage:complicated:dequeue:LinkedNode",
                                    "keys_id": 265,
                                    "value_id": 578
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "CounterForDispatches",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                "Counter for the related counted storage map"
                            ]
                        },
                        {
                            "name": "Head",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "[U8; 32]",
                                "PlainTypeValue": 265
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Mailbox",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "[U8; 32]"
                                    ],
                                    "value": "Tuple:gear_core:message:user:UserStoredMessagegear_common:storage:primitives:Interval",
                                    "keys_id": 593,
                                    "value_id": 594
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "QueueProcessing",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": 54
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Sent",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Tail",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "[U8; 32]",
                                "PlainTypeValue": 265
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Waitlist",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]",
                                        "[U8; 32]"
                                    ],
                                    "value": "Tuple:gear_core:message:stored:StoredDispatchgear_common:storage:primitives:Interval",
                                    "keys_id": 597,
                                    "value_id": 598
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "DispatchStash",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "[U8; 32]"
                                    ],
                                    "value": "Tuple:gear_core:message:stored:StoredDelayedDispatchgear_common:storage:primitives:Interval",
                                    "keys_id": 265,
                                    "value_id": 599
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "errors": [
                        {
                            "name": "QueueDuplicateKey",
                            "doc": [
                                "Occurs when given key already exists in queue."
                            ]
                        },
                        {
                            "name": "QueueElementNotFound",
                            "doc": [
                                "Occurs when queue's element wasn't found in storage."
                            ]
                        },
                        {
                            "name": "QueueHeadShouldBeSet",
                            "doc": [
                                "Occurs when queue's head should contain value,",
                                "but it's empty for some reason."
                            ]
                        },
                        {
                            "name": "QueueHeadShouldNotBeSet",
                            "doc": [
                                "Occurs when queue's head should be empty,",
                                "but it contains value for some reason."
                            ]
                        },
                        {
                            "name": "QueueTailHasNextKey",
                            "doc": [
                                "Occurs when queue's tail element contains link",
                                "to the next element."
                            ]
                        },
                        {
                            "name": "QueueTailParentNotFound",
                            "doc": [
                                "Occurs when while searching queue's pre-tail,",
                                "element wasn't found."
                            ]
                        },
                        {
                            "name": "QueueTailShouldBeSet",
                            "doc": [
                                "Occurs when queue's tail should contain value,",
                                "but it's empty for some reason."
                            ]
                        },
                        {
                            "name": "QueueTailShouldNotBeSet",
                            "doc": [
                                "Occurs when queue's tail should be empty,",
                                "but it contains value for some reason."
                            ]
                        },
                        {
                            "name": "MailboxDuplicateKey",
                            "doc": [
                                "Occurs when given value already exists in mailbox."
                            ]
                        },
                        {
                            "name": "MailboxElementNotFound",
                            "doc": [
                                "Occurs when mailbox's element wasn't found in storage."
                            ]
                        },
                        {
                            "name": "WaitlistDuplicateKey",
                            "doc": [
                                "Occurs when given value already exists in waitlist."
                            ]
                        },
                        {
                            "name": "WaitlistElementNotFound",
                            "doc": [
                                "Occurs when waitlist's element wasn't found in storage."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 601
                    },
                    "index": 101
                },
                {
                    "name": "GearScheduler",
                    "prefix": "GearScheduler",
                    "storage": [
                        {
                            "name": "FirstIncompleteTasksBlock",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "TaskPool",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "U32",
                                        "gear_common:scheduler:task:ScheduledTask"
                                    ],
                                    "value": "NULL",
                                    "keys_id": 602,
                                    "value_id": 60
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        }
                    ],
                    "constants": [
                        {
                            "name": "ReserveThreshold",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "01000000",
                            "docs": [
                                " Amount of blocks for extra delay used to secure from outdated tasks."
                            ]
                        },
                        {
                            "name": "WaitlistCost",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "6400000000000000",
                            "docs": [
                                " Cost for storing in waitlist per block."
                            ]
                        },
                        {
                            "name": "MailboxCost",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "6400000000000000",
                            "docs": [
                                " Cost for storing in mailbox per block."
                            ]
                        },
                        {
                            "name": "ReservationCost",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "6400000000000000",
                            "docs": [
                                " Cost for reservation holding."
                            ]
                        },
                        {
                            "name": "DispatchHoldCost",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "6400000000000000",
                            "docs": [
                                " Cost for reservation holding."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "DuplicateTask",
                            "doc": [
                                "Occurs when given task already exists in task pool."
                            ]
                        },
                        {
                            "name": "TaskNotFound",
                            "doc": [
                                "Occurs when task wasn't found in storage."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 604
                    },
                    "index": 102
                },
                {
                    "name": "GearGas",
                    "prefix": "GearGas",
                    "storage": [
                        {
                            "name": "TotalIssuance",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 11
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "GasNodes",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "gear_common:gas_provider:node:GasNodeId"
                                    ],
                                    "value": "gear_common:gas_provider:node:GasNode",
                                    "keys_id": 324,
                                    "value_id": 605
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "Allowance",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 11
                            },
                            "fallback": "0x00cc7b9fae000000",
                            "docs": null
                        }
                    ],
                    "constants": [
                        {
                            "name": "BlockGasLimit",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "00cc7b9fae000000",
                            "docs": [
                                " The maximum amount of gas that can be used within a single block."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "Forbidden",
                            "doc": null
                        },
                        {
                            "name": "NodeAlreadyExists",
                            "doc": null
                        },
                        {
                            "name": "InsufficientBalance",
                            "doc": null
                        },
                        {
                            "name": "NodeNotFound",
                            "doc": null
                        },
                        {
                            "name": "NodeWasConsumed",
                            "doc": null
                        },
                        {
                            "name": "ParentIsLost",
                            "doc": [
                                "Errors stating that gas tree has been invalidated"
                            ]
                        },
                        {
                            "name": "ParentHasNoChildren",
                            "doc": null
                        },
                        {
                            "name": "UnexpectedConsumeOutput",
                            "doc": [
                                "Output of `Tree::consume` procedure that wasn't expected.",
                                "",
                                "Outputs of consumption procedure are determined. The error is returned",
                                "when unexpected one occurred. That signals, that algorithm works wrong",
                                "and expected invariants are not correct."
                            ]
                        },
                        {
                            "name": "UnexpectedNodeType",
                            "doc": [
                                "Node type that can't occur if algorithm work well"
                            ]
                        },
                        {
                            "name": "ValueIsNotCaught",
                            "doc": [
                                "Value must have been caught, but was missed or blocked (for more info see `ValueNode::catch_value`)."
                            ]
                        },
                        {
                            "name": "ValueIsBlocked",
                            "doc": [
                                "Value must have been caught or moved upstream, but was blocked (for more info see `ValueNode::catch_value`)."
                            ]
                        },
                        {
                            "name": "ValueIsNotBlocked",
                            "doc": [
                                "Value must have been blocked, but was either moved or caught (for more info see `ValueNode::catch_value`)."
                            ]
                        },
                        {
                            "name": "ConsumedWithLock",
                            "doc": [
                                "`GasTree::consume` called on node, which has some balance locked."
                            ]
                        },
                        {
                            "name": "ConsumedWithSystemReservation",
                            "doc": [
                                "`GasTree::consume` called on node, which has some system reservation."
                            ]
                        },
                        {
                            "name": "TotalValueIsOverflowed",
                            "doc": [
                                "`GasTree::create` called with some value amount leading to",
                                "the total value overflow."
                            ]
                        },
                        {
                            "name": "TotalValueIsUnderflowed",
                            "doc": [
                                "Either `GasTree::consume` or `GasTree::spent` called on a node creating",
                                "negative imbalance which leads to the total value drop below 0."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 610
                    },
                    "index": 103
                },
                {
                    "name": "Gear",
                    "prefix": "Gear",
                    "storage": [
                        {
                            "name": "ExecuteInherent",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Bool",
                                "PlainTypeValue": 54
                            },
                            "fallback": "0x01",
                            "docs": [
                                " A flag indicating whether the message queue should be processed at the end of a block",
                                "",
                                " If not set, the inherent extrinsic that processes the queue will keep throwing an error",
                                " thereby making the block builder exclude it from the block."
                            ]
                        },
                        {
                            "name": "BlockNumber",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U32",
                                "PlainTypeValue": 4
                            },
                            "fallback": "0x00000000",
                            "docs": [
                                " The current block number being processed.",
                                "",
                                " It shows block number in which queue is processed.",
                                " May be less than system pallet block number if panic occurred previously."
                            ]
                        },
                        {
                            "name": "GearRunInBlock",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "NULL",
                                "PlainTypeValue": 60
                            },
                            "fallback": "0x00",
                            "docs": [
                                " A guard to prohibit all but the first execution of `pallet_gear::run()` call in a block.",
                                "",
                                " Set to `Some(())` if the extrinsic is executed for the first time in a block.",
                                " All subsequent attempts would fail with `Error::<T>::GearRunAlreadyInBlock` error.",
                                " Set back to `None` in the `on_finalize()` hook at the end of the block."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "6800",
                            "name": "upload_code",
                            "docs": [
                                "See [`Pallet::upload_code`]."
                            ],
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                }
                            ]
                        },
                        {
                            "lookup": "6801",
                            "name": "upload_program",
                            "docs": [
                                "See [`Pallet::upload_program`]."
                            ],
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "salt",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "init_payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "6802",
                            "name": "create_program",
                            "docs": [
                                "See [`Pallet::create_program`]."
                            ],
                            "args": [
                                {
                                    "name": "code_id",
                                    "type": "[U8; 32]",
                                    "type_name": "CodeId"
                                },
                                {
                                    "name": "salt",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "init_payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "6803",
                            "name": "send_message",
                            "docs": [
                                "See [`Pallet::send_message`]."
                            ],
                            "args": [
                                {
                                    "name": "destination",
                                    "type": "[U8; 32]",
                                    "type_name": "ProgramId"
                                },
                                {
                                    "name": "payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "6804",
                            "name": "send_reply",
                            "docs": [
                                "See [`Pallet::send_reply`]."
                            ],
                            "args": [
                                {
                                    "name": "reply_to_id",
                                    "type": "[U8; 32]",
                                    "type_name": "MessageId"
                                },
                                {
                                    "name": "payload",
                                    "type": "Vec<U8>",
                                    "type_name": "Bytes"
                                },
                                {
                                    "name": "gas_limit",
                                    "type": "U64",
                                    "type_name": "u64"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "keep_alive",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        },
                        {
                            "lookup": "6805",
                            "name": "claim_value",
                            "docs": [
                                "See [`Pallet::claim_value`]."
                            ],
                            "args": [
                                {
                                    "name": "message_id",
                                    "type": "[U8; 32]",
                                    "type_name": "MessageId"
                                }
                            ]
                        },
                        {
                            "lookup": "6806",
                            "name": "run",
                            "docs": [
                                "See [`Pallet::run`]."
                            ],
                            "args": [
                                {
                                    "name": "max_gas",
                                    "type": "option<U64>",
                                    "type_name": "Option<GasBalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "6807",
                            "name": "set_execute_inherent",
                            "docs": [
                                "See [`Pallet::set_execute_inherent`]."
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "Bool",
                                    "type_name": "bool"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 262
                    },
                    "events": [
                        {
                            "lookup": "6800",
                            "name": "MessageQueued",
                            "docs": [
                                "User sends message to program, which was successfully",
                                "added to the Gear message queue."
                            ],
                            "args": [
                                "[U8; 32]",
                                "AccountId",
                                "[U8; 32]",
                                "gear_common:event:MessageEntry"
                            ],
                            "args_name": [
                                "id",
                                "source",
                                "destination",
                                "entry"
                            ],
                            "args_type_name": [
                                "MessageId",
                                "AccountId",
                                "ProgramId",
                                "MessageEntry"
                            ]
                        },
                        {
                            "lookup": "6801",
                            "name": "UserMessageSent",
                            "docs": [
                                "Somebody sent a message to the user."
                            ],
                            "args": [
                                "gear_core:message:user:UserMessage",
                                "option<U32>"
                            ],
                            "args_name": [
                                "message",
                                "expiration"
                            ],
                            "args_type_name": [
                                "UserMessage",
                                "Option<BlockNumberFor>"
                            ]
                        },
                        {
                            "lookup": "6802",
                            "name": "UserMessageRead",
                            "docs": [
                                "Message marked as \"read\" and removes it from `Mailbox`.",
                                "This event only affects messages that were",
                                "already inserted in `Mailbox`."
                            ],
                            "args": [
                                "[U8; 32]",
                                "gear_common:event:Reason@316"
                            ],
                            "args_name": [
                                "id",
                                "reason"
                            ],
                            "args_type_name": [
                                "MessageId",
                                "UserMessageReadReason"
                            ]
                        },
                        {
                            "lookup": "6803",
                            "name": "MessagesDispatched",
                            "docs": [
                                "The result of processing the messages within the block."
                            ],
                            "args": [
                                "U32",
                                "Vec<Tuple:[U8; 32]gear_common:event:DispatchStatus>",
                                "Vec<[U8; 32]>"
                            ],
                            "args_name": [
                                "total",
                                "statuses",
                                "state_changes"
                            ],
                            "args_type_name": [
                                "MessengerCapacityOf",
                                "BTreeMap<MessageId, DispatchStatus>",
                                "BTreeSet<ProgramId>"
                            ]
                        },
                        {
                            "lookup": "6804",
                            "name": "MessageWaited",
                            "docs": [
                                "Messages execution delayed (waited) and successfully",
                                "added to gear waitlist."
                            ],
                            "args": [
                                "[U8; 32]",
                                "option<gear_common:gas_provider:node:GasNodeId>",
                                "gear_common:event:Reason@326",
                                "U32"
                            ],
                            "args_name": [
                                "id",
                                "origin",
                                "reason",
                                "expiration"
                            ],
                            "args_type_name": [
                                "MessageId",
                                "Option<GasNodeId<MessageId, ReservationId>>",
                                "MessageWaitedReason",
                                "BlockNumberFor"
                            ]
                        },
                        {
                            "lookup": "6805",
                            "name": "MessageWoken",
                            "docs": [
                                "Message is ready to continue its execution",
                                "and was removed from `Waitlist`."
                            ],
                            "args": [
                                "[U8; 32]",
                                "gear_common:event:Reason@329"
                            ],
                            "args_name": [
                                "id",
                                "reason"
                            ],
                            "args_type_name": [
                                "MessageId",
                                "MessageWokenReason"
                            ]
                        },
                        {
                            "lookup": "6806",
                            "name": "CodeChanged",
                            "docs": [
                                "Any data related to program codes changed."
                            ],
                            "args": [
                                "[U8; 32]",
                                "gear_common:event:CodeChangeKind"
                            ],
                            "args_name": [
                                "id",
                                "change"
                            ],
                            "args_type_name": [
                                "CodeId",
                                "CodeChangeKind<BlockNumberFor>"
                            ]
                        },
                        {
                            "lookup": "6807",
                            "name": "ProgramChanged",
                            "docs": [
                                "Any data related to programs changed."
                            ],
                            "args": [
                                "[U8; 32]",
                                "gear_common:event:ProgramChangeKind"
                            ],
                            "args_name": [
                                "id",
                                "change"
                            ],
                            "args_type_name": [
                                "ProgramId",
                                "ProgramChangeKind<BlockNumberFor>"
                            ]
                        },
                        {
                            "lookup": "6808",
                            "name": "QueueNotProcessed",
                            "docs": [
                                "The pseudo-inherent extrinsic that runs queue processing rolled back or not executed."
                            ],
                            "args": null
                        },
                        {
                            "lookup": "6809",
                            "name": "ProgramResumeSessionStarted",
                            "docs": [
                                "Program resume session has been started."
                            ],
                            "args": [
                                "U32",
                                "AccountId",
                                "[U8; 32]",
                                "U32"
                            ],
                            "args_name": [
                                "session_id",
                                "account_id",
                                "program_id",
                                "session_end_block"
                            ],
                            "args_type_name": [
                                "SessionId",
                                "AccountId",
                                "ProgramId",
                                "BlockNumberFor"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 304
                    },
                    "constants": [
                        {
                            "name": "Schedule",
                            "type": "pallet_gear:schedule:Schedule",
                            "type_value": 611,
                            "constants_value": "01878f0000000100000004000080000000000200100000000100002000000020000000000080000000080000040000780500008b000000231a0000291a00004d3c0000e13e000066110000f71000005a0c0000050e00008f21000061000000f2100000ef3b00004304000000000000b80200004905000049050000a1020000d7030000d32a0000d50f00000e0f0000a60f00005a0e00004a02000072010000460500009b04000022020000a3020000dc020000a9020000200200006f02000052010000fe000000150700002204000076060000d6030000c6040000c40200005e0400000103000006050000de02000077040000dc0200006c040000ac020000e0040000bb02000016050000fb0200005b0500005a030000510500006a020000ee040000940200002f0600008e060000e70b00005c090000690c0000a50900002a2e0000501d0000290d0000c6080000590400006d030000dd0400002e0200003c0400004c02000096030000cf01000080030000ee01000030030000dc01000046050000a30100009c030000e40100002247f601009e180f0000e655260000a6252f0000f2dd030000a6318a0000becf7600004ad93f00005ee73800009e8c380000cac4380000e2ce38000006b8390000f6123b00005a933800005a12660000750200925e3f00006e833800000ef2380000ee2773000096fd8e0100fadac20000d505002e78c60000f905002e243f000032b1790000ed05001a6fa30000ea0fa30000d2aece0000e10500060baf000092491605004a1c9504000abdf7010002ad230000e2dc7c0200ba82670000ba145c0500d108008294180500fd0800010a00aaff3900003ebf3a00005276390000aab52a06004a6adc0500426646000049020096d2bd0000beb8bb0000fec65c00009502001aff490000f104008a233800002258c00500c217fd020092a0b902009274590200c23fc40200febbe000002ef4f80000390100411d0002ecfb0000610100391d009aaddb0600f2dc450800ea166802008664250700c634260800a621350200a68c7a0200027dc6180091010056984300000000fd0300b9030021090002a56d4789392ead030000",
                            "docs": [
                                " Cost schedule and limits."
                            ]
                        },
                        {
                            "name": "OutgoingLimit",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00040000",
                            "docs": [
                                " The maximum amount of messages that can be produced in during all message executions."
                            ]
                        },
                        {
                            "name": "OutgoingBytesLimit",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00000004",
                            "docs": [
                                " The maximum amount of bytes in outgoing messages during message execution."
                            ]
                        },
                        {
                            "name": "PerformanceMultiplier",
                            "type": "U32",
                            "type_value": 616,
                            "constants_value": "64000000",
                            "docs": [
                                " Performance multiplier."
                            ]
                        },
                        {
                            "name": "MailboxThreshold",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "b80b000000000000",
                            "docs": [
                                " The minimal gas amount for message to be inserted in mailbox.",
                                "",
                                " This gas will be consuming as rent for storing and message will be available",
                                " for reply or claim, once gas ends, message removes.",
                                "",
                                " Messages with gas limit less than that minimum will not be added in mailbox,",
                                " but will be seen in events."
                            ]
                        },
                        {
                            "name": "ReservationsLimit",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "0001000000000000",
                            "docs": [
                                " Amount of reservations can exist for 1 program."
                            ]
                        },
                        {
                            "name": "ProgramRentFreePeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00d44900",
                            "docs": [
                                " The free of charge period of rent."
                            ]
                        },
                        {
                            "name": "ProgramResumeMinimalRentPeriod",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "004e0c00",
                            "docs": [
                                " The minimal amount of blocks to resume."
                            ]
                        },
                        {
                            "name": "ProgramRentCostPerBlock",
                            "type": "U128",
                            "type_value": 6,
                            "constants_value": "40597307000000000000000000000000",
                            "docs": [
                                " The program rent cost per block."
                            ]
                        },
                        {
                            "name": "ProgramResumeSessionDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "b0040000",
                            "docs": [
                                " The amount of blocks for processing resume session."
                            ]
                        },
                        {
                            "name": "ProgramRentEnabled",
                            "type": "Bool",
                            "type_value": 54,
                            "constants_value": "00",
                            "docs": [
                                " The flag determines if program rent mechanism enabled."
                            ]
                        },
                        {
                            "name": "ProgramRentDisabledDelta",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "80130300",
                            "docs": [
                                " The constant defines value that is added if the program",
                                " rent is disabled."
                            ]
                        },
                        {
                            "name": "RentPoolId",
                            "type": "option<AccountId>",
                            "type_value": 274,
                            "constants_value": "01e68325a26f5e8ea5c6c93bbdcfa596ac3ec8b69301c0cc54029dc7bc891bc515",
                            "docs": [
                                " The account id of the rent pool if any."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "MessageNotFound",
                            "doc": [
                                "Message wasn't found in the mailbox."
                            ]
                        },
                        {
                            "name": "InsufficientBalance",
                            "doc": [
                                "Not enough balance to execute an action.",
                                "",
                                "Usually occurs when the gas_limit specified is such that the origin account can't afford the message."
                            ]
                        },
                        {
                            "name": "GasLimitTooHigh",
                            "doc": [
                                "Gas limit too high.",
                                "",
                                "Occurs when an extrinsic's declared `gas_limit` is greater than a block's maximum gas limit."
                            ]
                        },
                        {
                            "name": "ProgramAlreadyExists",
                            "doc": [
                                "Program already exists.",
                                "",
                                "Occurs if a program with some specific program id already exists in program storage."
                            ]
                        },
                        {
                            "name": "InactiveProgram",
                            "doc": [
                                "Program is terminated.",
                                "",
                                "Program init failed, so such message destination is no longer unavailable."
                            ]
                        },
                        {
                            "name": "NoMessageTree",
                            "doc": [
                                "Message gas tree is not found.",
                                "",
                                "When a message claimed from the mailbox has a corrupted or non-extant gas tree associated."
                            ]
                        },
                        {
                            "name": "CodeAlreadyExists",
                            "doc": [
                                "Code already exists.",
                                "",
                                "Occurs when trying to save to storage a program code that has been saved there."
                            ]
                        },
                        {
                            "name": "CodeDoesntExist",
                            "doc": [
                                "Code does not exist.",
                                "",
                                "Occurs when trying to get a program code from storage, that doesn't exist."
                            ]
                        },
                        {
                            "name": "CodeTooLarge",
                            "doc": [
                                "The code supplied to `upload_code` or `upload_program` exceeds the limit specified in the",
                                "current schedule."
                            ]
                        },
                        {
                            "name": "ProgramConstructionFailed",
                            "doc": [
                                "Failed to create a program."
                            ]
                        },
                        {
                            "name": "ValueLessThanMinimal",
                            "doc": [
                                "Value doesn't cover ExistentialDeposit."
                            ]
                        },
                        {
                            "name": "MessageQueueProcessingDisabled",
                            "doc": [
                                "Message queue processing is disabled."
                            ]
                        },
                        {
                            "name": "ResumePeriodLessThanMinimal",
                            "doc": [
                                "Block count doesn't cover MinimalResumePeriod."
                            ]
                        },
                        {
                            "name": "ProgramNotFound",
                            "doc": [
                                "Program with the specified id is not found."
                            ]
                        },
                        {
                            "name": "GearRunAlreadyInBlock",
                            "doc": [
                                "Gear::run() already included in current block."
                            ]
                        },
                        {
                            "name": "ProgramRentDisabled",
                            "doc": [
                                "The program rent logic is disabled."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 617
                    },
                    "index": 104
                },
                {
                    "name": "GearPayment",
                    "prefix": "",
                    "storage": null,
                    "errors": null,
                    "errors_value": null,
                    "index": 105
                },
                {
                    "name": "StakingRewards",
                    "prefix": "StakingRewards",
                    "storage": [
                        {
                            "name": "TargetInflation",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 618
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " Target inflation (at ideal stake)"
                            ]
                        },
                        {
                            "name": "IdealStakingRatio",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 618
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " Ideal staking ratio"
                            ]
                        },
                        {
                            "name": "NonStakeableShare",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 618
                            },
                            "fallback": "0x0000000000000000",
                            "docs": [
                                " The current share of issued tokens that cannot be staked (e.g. being vested)",
                                " This value is guaranteed to remain unchanged for the first year until vesting kicks in.",
                                " Subsequently, the non-stakeable share should be calculated based on the vesting balances."
                            ]
                        },
                        {
                            "name": "FilteredAccounts",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "Vec<AccountId>",
                                "PlainTypeValue": 619
                            },
                            "fallback": "0x00",
                            "docs": [
                                " List of accounts whose locked balance (due to incomplete vesting) should be excluded from",
                                " the total stakeable quantity.",
                                " During the 1st year the non-stakeable amount is accounted for as a fixed fraction of TTS."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "6a00",
                            "name": "refill",
                            "docs": [
                                "See [`Pallet::refill`]."
                            ],
                            "args": [
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "6a01",
                            "name": "force_refill",
                            "docs": [
                                "See [`Pallet::force_refill`]."
                            ],
                            "args": [
                                {
                                    "name": "from",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "6a02",
                            "name": "withdraw",
                            "docs": [
                                "See [`Pallet::withdraw`]."
                            ],
                            "args": [
                                {
                                    "name": "to",
                                    "type": "sp_runtime:multiaddress:MultiAddress",
                                    "type_name": "AccountIdLookupOf"
                                },
                                {
                                    "name": "value",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        },
                        {
                            "lookup": "6a03",
                            "name": "align_supply",
                            "docs": [
                                "See [`Pallet::align_supply`]."
                            ],
                            "args": [
                                {
                                    "name": "target",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 267
                    },
                    "events": [
                        {
                            "lookup": "6a00",
                            "name": "Deposited",
                            "docs": [
                                "Deposited to the pool."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "6a01",
                            "name": "Withdrawn",
                            "docs": [
                                "Transferred from the pool to an external account."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "6a02",
                            "name": "Burned",
                            "docs": [
                                "Burned from the pool."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        },
                        {
                            "lookup": "6a03",
                            "name": "Minted",
                            "docs": [
                                "Minted to the pool."
                            ],
                            "args": [
                                "U128"
                            ],
                            "args_name": [
                                "amount"
                            ],
                            "args_type_name": [
                                "BalanceOf"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 334
                    },
                    "constants": [
                        {
                            "name": "PalletId",
                            "type": "[U8; 8]",
                            "type_value": 432,
                            "constants_value": "70792f7374727764",
                            "docs": [
                                " The staking rewards' pallet id, used for deriving its sovereign account ID."
                            ]
                        },
                        {
                            "name": "MillisecondsPerYear",
                            "type": "U64",
                            "type_value": 11,
                            "constants_value": "00c3fa5807000000",
                            "docs": [
                                " Milliseconds per year to calculate inflation."
                            ]
                        },
                        {
                            "name": "MinInflation",
                            "type": "U64",
                            "type_value": 618,
                            "constants_value": "0000c16ff2862300",
                            "docs": [
                                " Minimum annual inflation."
                            ]
                        },
                        {
                            "name": "MaxROI",
                            "type": "U64",
                            "type_value": 618,
                            "constants_value": "00009e1869d02904",
                            "docs": [
                                " ROI cap."
                            ]
                        },
                        {
                            "name": "Falloff",
                            "type": "U64",
                            "type_value": 618,
                            "constants_value": "000082dfe40d4700",
                            "docs": [
                                " Exponential decay (fall-off) parameter."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "FailureToRefillPool",
                            "doc": [
                                "Pool not replenished due to error."
                            ]
                        },
                        {
                            "name": "FailureToWithdrawFromPool",
                            "doc": [
                                "Failure to withdraw funds from the rewards pool."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 620
                    },
                    "index": 106
                },
                {
                    "name": "GearVoucher",
                    "prefix": "GearVoucher",
                    "storage": [
                        {
                            "name": "Issued",
                            "modifier": "Optional",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U64",
                                "PlainTypeValue": 11
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Storage containing amount of the total vouchers issued.",
                                "",
                                " Used as nonce in voucher creation."
                            ]
                        },
                        {
                            "name": "Vouchers",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity",
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "AccountId",
                                        "[U8; 32]"
                                    ],
                                    "value": "pallet_gear_voucher:internal:VoucherInfo",
                                    "keys_id": 621,
                                    "value_id": 622
                                }
                            },
                            "fallback": "0x00",
                            "docs": [
                                " Double map storage containing data of the voucher,",
                                " associated with some spender and voucher ids."
                            ]
                        }
                    ],
                    "calls": [
                        {
                            "lookup": "6b00",
                            "name": "issue",
                            "docs": [
                                "See [`Pallet::issue`]."
                            ],
                            "args": [
                                {
                                    "name": "spender",
                                    "type": "AccountId",
                                    "type_name": "AccountIdOf"
                                },
                                {
                                    "name": "balance",
                                    "type": "U128",
                                    "type_name": "BalanceOf"
                                },
                                {
                                    "name": "programs",
                                    "type": "option<BTreeSet@270>",
                                    "type_name": "Option<BTreeSet<ProgramId>>"
                                },
                                {
                                    "name": "code_uploading",
                                    "type": "Bool",
                                    "type_name": "bool"
                                },
                                {
                                    "name": "duration",
                                    "type": "U32",
                                    "type_name": "BlockNumberFor"
                                }
                            ]
                        },
                        {
                            "lookup": "6b01",
                            "name": "call",
                            "docs": [
                                "See [`Pallet::call`]."
                            ],
                            "args": [
                                {
                                    "name": "voucher_id",
                                    "type": "[U8; 32]",
                                    "type_name": "VoucherId"
                                },
                                {
                                    "name": "call",
                                    "type": "pallet_gear_voucher:internal:PrepaidCall",
                                    "type_name": "PrepaidCall<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "6b02",
                            "name": "revoke",
                            "docs": [
                                "See [`Pallet::revoke`]."
                            ],
                            "args": [
                                {
                                    "name": "spender",
                                    "type": "AccountId",
                                    "type_name": "AccountIdOf"
                                },
                                {
                                    "name": "voucher_id",
                                    "type": "[U8; 32]",
                                    "type_name": "VoucherId"
                                }
                            ]
                        },
                        {
                            "lookup": "6b03",
                            "name": "update",
                            "docs": [
                                "See [`Pallet::update`]."
                            ],
                            "args": [
                                {
                                    "name": "spender",
                                    "type": "AccountId",
                                    "type_name": "AccountIdOf"
                                },
                                {
                                    "name": "voucher_id",
                                    "type": "[U8; 32]",
                                    "type_name": "VoucherId"
                                },
                                {
                                    "name": "move_ownership",
                                    "type": "option<AccountId>",
                                    "type_name": "Option<AccountIdOf>"
                                },
                                {
                                    "name": "balance_top_up",
                                    "type": "option<U128>",
                                    "type_name": "Option<BalanceOf>"
                                },
                                {
                                    "name": "append_programs",
                                    "type": "option<option<BTreeSet@270>>",
                                    "type_name": "Option<Option<BTreeSet<ProgramId>>>"
                                },
                                {
                                    "name": "code_uploading",
                                    "type": "option<Bool>",
                                    "type_name": "Option<bool>"
                                },
                                {
                                    "name": "prolong_duration",
                                    "type": "option<U32>",
                                    "type_name": "Option<BlockNumberFor>"
                                }
                            ]
                        },
                        {
                            "lookup": "6b04",
                            "name": "call_deprecated",
                            "docs": [
                                "See [`Pallet::call_deprecated`]."
                            ],
                            "args": [
                                {
                                    "name": "call",
                                    "type": "pallet_gear_voucher:internal:PrepaidCall",
                                    "type_name": "PrepaidCall<BalanceOf>"
                                }
                            ]
                        },
                        {
                            "lookup": "6b05",
                            "name": "decline",
                            "docs": [
                                "See [`Pallet::decline`]."
                            ],
                            "args": [
                                {
                                    "name": "voucher_id",
                                    "type": "[U8; 32]",
                                    "type_name": "VoucherId"
                                }
                            ]
                        }
                    ],
                    "calls_value": {
                        "type": 268
                    },
                    "events": [
                        {
                            "lookup": "6b00",
                            "name": "VoucherIssued",
                            "docs": [
                                "Voucher has been issued."
                            ],
                            "args": [
                                "AccountId",
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "owner",
                                "spender",
                                "voucher_id"
                            ],
                            "args_type_name": [
                                "AccountIdOf",
                                "AccountIdOf",
                                "VoucherId"
                            ]
                        },
                        {
                            "lookup": "6b01",
                            "name": "VoucherRevoked",
                            "docs": [
                                "Voucher has been revoked by owner.",
                                "",
                                "NOTE: currently means only \"refunded\"."
                            ],
                            "args": [
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "spender",
                                "voucher_id"
                            ],
                            "args_type_name": [
                                "AccountIdOf",
                                "VoucherId"
                            ]
                        },
                        {
                            "lookup": "6b02",
                            "name": "VoucherUpdated",
                            "docs": [
                                "Voucher has been updated."
                            ],
                            "args": [
                                "AccountId",
                                "[U8; 32]",
                                "option<AccountId>"
                            ],
                            "args_name": [
                                "spender",
                                "voucher_id",
                                "new_owner"
                            ],
                            "args_type_name": [
                                "AccountIdOf",
                                "VoucherId",
                                "Option<AccountIdOf>"
                            ]
                        },
                        {
                            "lookup": "6b03",
                            "name": "VoucherDeclined",
                            "docs": [
                                "Voucher has been declined (set to expired state)."
                            ],
                            "args": [
                                "AccountId",
                                "[U8; 32]"
                            ],
                            "args_name": [
                                "spender",
                                "voucher_id"
                            ],
                            "args_type_name": [
                                "AccountIdOf",
                                "VoucherId"
                            ]
                        }
                    ],
                    "events_value": {
                        "type": 335
                    },
                    "constants": [
                        {
                            "name": "PalletId",
                            "type": "[U8; 8]",
                            "type_value": 432,
                            "constants_value": "70792f766f756368",
                            "docs": [
                                " The pallet id, used for deriving its sovereign account ID."
                            ]
                        },
                        {
                            "name": "MaxProgramsAmount",
                            "type": "U8",
                            "type_value": 2,
                            "constants_value": "20",
                            "docs": [
                                " Maximal amount of programs to be specified to interact with."
                            ]
                        },
                        {
                            "name": "MinDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "14000000",
                            "docs": [
                                " Minimal duration in blocks voucher could be issued/prolonged for."
                            ]
                        },
                        {
                            "name": "MaxDuration",
                            "type": "U32",
                            "type_value": 4,
                            "constants_value": "00ea2400",
                            "docs": [
                                " Maximal duration in blocks voucher could be issued/prolonged for."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "BadOrigin",
                            "doc": [
                                "The origin is not eligible to execute call."
                            ]
                        },
                        {
                            "name": "BalanceTransfer",
                            "doc": [
                                "Error trying transfer balance to/from voucher account."
                            ]
                        },
                        {
                            "name": "InappropriateDestination",
                            "doc": [
                                "Destination program is not in whitelisted set for voucher."
                            ]
                        },
                        {
                            "name": "InexistentVoucher",
                            "doc": [
                                "Voucher with given identifier doesn't exist for given spender id."
                            ]
                        },
                        {
                            "name": "IrrevocableYet",
                            "doc": [
                                "Voucher still valid and couldn't be revoked."
                            ]
                        },
                        {
                            "name": "MaxProgramsLimitExceeded",
                            "doc": [
                                "Try to whitelist more programs than allowed."
                            ]
                        },
                        {
                            "name": "UnknownDestination",
                            "doc": [
                                "Failed to query destination of the prepaid call."
                            ]
                        },
                        {
                            "name": "VoucherExpired",
                            "doc": [
                                "Voucher has expired and couldn't be used."
                            ]
                        },
                        {
                            "name": "DurationOutOfBounds",
                            "doc": [
                                "Voucher issue/prolongation duration out of [min; max] constants."
                            ]
                        },
                        {
                            "name": "CodeUploadingEnabled",
                            "doc": [
                                "Voucher update function tries to cut voucher ability of code upload."
                            ]
                        },
                        {
                            "name": "CodeUploadingDisabled",
                            "doc": [
                                "Voucher is disabled for code uploading, but requested."
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 623
                    },
                    "index": 107
                },
                {
                    "name": "GearBank",
                    "prefix": "GearBank",
                    "storage": [
                        {
                            "name": "Bank",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "pallet_gear_bank:pallet:BankAccount",
                                    "keys_id": 0,
                                    "value_id": 624
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "UnusedValue",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": null
                        },
                        {
                            "name": "OnFinalizeTransfers",
                            "modifier": "Optional",
                            "type": {
                                "origin": "Map",
                                "n_map_type": {
                                    "hashers": [
                                        "Identity"
                                    ],
                                    "key_vec": [
                                        "AccountId"
                                    ],
                                    "value": "U128",
                                    "keys_id": 0,
                                    "value_id": 6
                                }
                            },
                            "fallback": "0x00",
                            "docs": null
                        },
                        {
                            "name": "OnFinalizeValue",
                            "modifier": "Default",
                            "type": {
                                "origin": "PlainType",
                                "plain_type": "U128",
                                "PlainTypeValue": 6
                            },
                            "fallback": "0x00000000000000000000000000000000",
                            "docs": null
                        }
                    ],
                    "constants": [
                        {
                            "name": "BankAddress",
                            "type": "AccountId",
                            "type_value": 0,
                            "constants_value": "6765617262616e6b6765617262616e6b6765617262616e6b6765617262616e6b",
                            "docs": [
                                " Bank account address, that will keep all reserved funds."
                            ]
                        },
                        {
                            "name": "GasMultiplier",
                            "type": "gear_common:GasMultiplier",
                            "type_value": 606,
                            "constants_value": "0006000000000000000000000000000000",
                            "docs": [
                                " Gas price converter."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InsufficientBalance",
                            "doc": [
                                "Insufficient user balance."
                            ]
                        },
                        {
                            "name": "InsufficientGasBalance",
                            "doc": [
                                "Insufficient user's bank account gas balance."
                            ]
                        },
                        {
                            "name": "InsufficientValueBalance",
                            "doc": [
                                "Insufficient user's bank account gas balance."
                            ]
                        },
                        {
                            "name": "InsufficientBankBalance",
                            "doc": [
                                "Insufficient bank account balance.",
                                "**Must be unreachable in Gear main protocol.**"
                            ]
                        },
                        {
                            "name": "InsufficientDeposit",
                            "doc": [
                                "Deposit of funds that will not keep bank account alive.",
                                "**Must be unreachable in Gear main protocol.**"
                            ]
                        }
                    ],
                    "errors_value": {
                        "type": 625
                    },
                    "index": 108
                },
                {
                    "name": "GearBuiltin",
                    "prefix": "",
                    "storage": null,
                    "errors": null,
                    "errors_value": null,
                    "index": 109
                }
            ]
        }
    }
}